
Simulation_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000813c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080082dc  080082dc  000182dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800841c  0800841c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800841c  0800841c  0001841c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008424  08008424  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008424  08008424  00018424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008428  08008428  00018428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800842c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000068  08008494  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08008494  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc99  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f87  00000000  00000000  0002dd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002fd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000992  00000000  00000000  00030938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001654c  00000000  00000000  000312ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb53  00000000  00000000  00047816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089841  00000000  00000000  00057369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037fc  00000000  00000000  000e0bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000e43a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080082c4 	.word	0x080082c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080082c4 	.word	0x080082c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_I2C3_Init>:

uint8_t backlight_state = 1;

I2C_HandleTypeDef hi2c3;

static void MX_I2C3_Init(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2C3_Init+0x50>)
 8000582:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <MX_I2C3_Init+0x54>)
 8000584:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2C3_Init+0x50>)
 8000588:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <MX_I2C3_Init+0x58>)
 800058a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2C3_Init+0x50>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_I2C3_Init+0x50>)
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_I2C3_Init+0x50>)
 800059a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800059e:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_I2C3_Init+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_I2C3_Init+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_I2C3_Init+0x50>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_I2C3_Init+0x50>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_I2C3_Init+0x50>)
 80005ba:	f002 f855 	bl	8002668 <HAL_I2C_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_I2C3_Init+0x4c>
		Error_Handler();
 80005c4:	f001 f9c8 	bl	8001958 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000084 	.word	0x20000084
 80005d0:	40005c00 	.word	0x40005c00
 80005d4:	000186a0 	.word	0x000186a0

080005d8 <prepare_lcd>:

int prepare_lcd(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	MX_I2C3_Init();
 80005dc:	f7ff ffce 	bl	800057c <MX_I2C3_Init>
	lcd_init();
 80005e0:	f000 f877 	bl	80006d2 <lcd_init>

	return 0;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <lcd_write_nibble>:

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af02      	add	r7, sp, #8
 80005f2:	4603      	mov	r3, r0
 80005f4:	460a      	mov	r2, r1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	4613      	mov	r3, r2
 80005fa:	71bb      	strb	r3, [r7, #6]

	uint8_t package[2];
	uint8_t data = nibble << D4_BIT;
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	011b      	lsls	r3, r3, #4
 8000600:	73fb      	strb	r3, [r7, #15]
	data |= rs << RS_BIT;
 8000602:	7bfa      	ldrb	r2, [r7, #15]
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	4313      	orrs	r3, r2
 8000608:	73fb      	strb	r3, [r7, #15]
	data |= backlight_state << BL_BIT; // Include backlight state in data
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <lcd_write_nibble+0x64>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	b25a      	sxtb	r2, r3
 8000612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000616:	4313      	orrs	r3, r2
 8000618:	b25b      	sxtb	r3, r3
 800061a:	73fb      	strb	r3, [r7, #15]
	data |= 1 << EN_BIT;
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	73fb      	strb	r3, [r7, #15]

	package[0] = data;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	733b      	strb	r3, [r7, #12]
	package[1] = data & ~(1 << EN_BIT);
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	f023 0304 	bic.w	r3, r3, #4
 800062e:	b2db      	uxtb	r3, r3
 8000630:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR << 1, package, 2, HAL_MAX_DELAY);
 8000632:	f107 020c 	add.w	r2, r7, #12
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2302      	movs	r3, #2
 800063e:	214e      	movs	r1, #78	; 0x4e
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <lcd_write_nibble+0x68>)
 8000642:	f002 f955 	bl	80028f0 <HAL_I2C_Master_Transmit>
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000000 	.word	0x20000000
 8000654:	20000084 	.word	0x20000084

08000658 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = cmd >> 4;
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = cmd & 0x0F;
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 0);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffb9 	bl	80005ec <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 0);
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffb4 	bl	80005ec <lcd_write_nibble>
	if (cmd == 0x01 || cmd == 0x02) {
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d002      	beq.n	8000690 <lcd_send_cmd+0x38>
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d102      	bne.n	8000696 <lcd_send_cmd+0x3e>
		HAL_Delay(2);
 8000690:	2002      	movs	r0, #2
 8000692:	f001 fc5d 	bl	8001f50 <HAL_Delay>
	}
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 800069e:	b580      	push	{r7, lr}
 80006a0:	b084      	sub	sp, #16
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	4603      	mov	r3, r0
 80006a6:	71fb      	strb	r3, [r7, #7]
	uint8_t upper_nibble = data >> 4;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	091b      	lsrs	r3, r3, #4
 80006ac:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_nibble = data & 0x0F;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	73bb      	strb	r3, [r7, #14]
	lcd_write_nibble(upper_nibble, 1);
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	2101      	movs	r1, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff96 	bl	80005ec <lcd_write_nibble>
	lcd_write_nibble(lower_nibble, 1);
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	2101      	movs	r1, #1
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff91 	bl	80005ec <lcd_write_nibble>
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <lcd_init>:

void lcd_init() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 80006d6:	2032      	movs	r0, #50	; 0x32
 80006d8:	f001 fc3a 	bl	8001f50 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006dc:	2100      	movs	r1, #0
 80006de:	2003      	movs	r0, #3
 80006e0:	f7ff ff84 	bl	80005ec <lcd_write_nibble>
	HAL_Delay(5);
 80006e4:	2005      	movs	r0, #5
 80006e6:	f001 fc33 	bl	8001f50 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006ea:	2100      	movs	r1, #0
 80006ec:	2003      	movs	r0, #3
 80006ee:	f7ff ff7d 	bl	80005ec <lcd_write_nibble>
	HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f001 fc2c 	bl	8001f50 <HAL_Delay>
	lcd_write_nibble(0x03, 0);
 80006f8:	2100      	movs	r1, #0
 80006fa:	2003      	movs	r0, #3
 80006fc:	f7ff ff76 	bl	80005ec <lcd_write_nibble>
	HAL_Delay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f001 fc25 	bl	8001f50 <HAL_Delay>
	lcd_write_nibble(0x02, 0);
 8000706:	2100      	movs	r1, #0
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff ff6f 	bl	80005ec <lcd_write_nibble>
	lcd_send_cmd(0x28);
 800070e:	2028      	movs	r0, #40	; 0x28
 8000710:	f7ff ffa2 	bl	8000658 <lcd_send_cmd>
	lcd_send_cmd(0x0C);
 8000714:	200c      	movs	r0, #12
 8000716:	f7ff ff9f 	bl	8000658 <lcd_send_cmd>
	lcd_send_cmd(0x06);
 800071a:	2006      	movs	r0, #6
 800071c:	f7ff ff9c 	bl	8000658 <lcd_send_cmd>
	lcd_send_cmd(0x01);
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff ff99 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(2);
 8000726:	2002      	movs	r0, #2
 8000728:	f001 fc12 	bl	8001f50 <HAL_Delay>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <lcd_write_string>:

void lcd_write_string(char *str) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000738:	e006      	b.n	8000748 <lcd_write_string+0x18>
		lcd_send_data(*str++);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ffab 	bl	800069e <lcd_send_data>
	while (*str) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1f4      	bne.n	800073a <lcd_write_string+0xa>
	}
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 800075a:	b580      	push	{r7, lr}
 800075c:	b084      	sub	sp, #16
 800075e:	af00      	add	r7, sp, #0
 8000760:	4603      	mov	r3, r0
 8000762:	460a      	mov	r2, r1
 8000764:	71fb      	strb	r3, [r7, #7]
 8000766:	4613      	mov	r3, r2
 8000768:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	switch (row) {
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <lcd_set_cursor+0x1c>
 8000770:	2b01      	cmp	r3, #1
 8000772:	d003      	beq.n	800077c <lcd_set_cursor+0x22>
 8000774:	e005      	b.n	8000782 <lcd_set_cursor+0x28>
	case 0:
		address = 0x00;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
		break;
 800077a:	e004      	b.n	8000786 <lcd_set_cursor+0x2c>
	case 1:
		address = 0x40;
 800077c:	2340      	movs	r3, #64	; 0x40
 800077e:	73fb      	strb	r3, [r7, #15]
		break;
 8000780:	e001      	b.n	8000786 <lcd_set_cursor+0x2c>
	default:
		address = 0x00;
 8000782:	2300      	movs	r3, #0
 8000784:	73fb      	strb	r3, [r7, #15]
	}
	address += column;
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	4413      	add	r3, r2
 800078c:	73fb      	strb	r3, [r7, #15]
	lcd_send_cmd(0x80 | address);
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff5e 	bl	8000658 <lcd_send_cmd>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <lcd_clear>:

void lcd_clear(void) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff ff55 	bl	8000658 <lcd_send_cmd>
	HAL_Delay(2);
 80007ae:	2002      	movs	r0, #2
 80007b0:	f001 fbce 	bl	8001f50 <HAL_Delay>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007bc:	f001 fb56 	bl	8001e6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007c0:	f000 f83a 	bl	8000838 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007c4:	f000 f958 	bl	8000a78 <MX_GPIO_Init>
	MX_I2C1_Init();
 80007c8:	f000 f896 	bl	80008f8 <MX_I2C1_Init>
	MX_SPI1_Init();
 80007cc:	f000 f8c2 	bl	8000954 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80007d0:	f000 f8fe 	bl	80009d0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80007d4:	f000 f926 	bl	8000a24 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	// Turn on backlight
	prepare_lcd();
 80007d8:	f7ff fefe 	bl	80005d8 <prepare_lcd>

	HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 80007dc:	2201      	movs	r2, #1
 80007de:	2101      	movs	r1, #1
 80007e0:	2026      	movs	r0, #38	; 0x26
 80007e2:	f001 fcb4 	bl	800214e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007e6:	2026      	movs	r0, #38	; 0x26
 80007e8:	f001 fccd 	bl	8002186 <HAL_NVIC_EnableIRQ>
	HAL_UART_Receive_IT(&huart2, MTEMU_REQUEST, sizeof(MTEMU_REQUEST));
 80007ec:	2204      	movs	r2, #4
 80007ee:	490e      	ldr	r1, [pc, #56]	; (8000828 <main+0x70>)
 80007f0:	480e      	ldr	r0, [pc, #56]	; (800082c <main+0x74>)
 80007f2:	f006 f82c 	bl	800684e <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		lcd_clear();
 80007f6:	f7ff ffd5 	bl	80007a4 <lcd_clear>
		lcd_set_cursor(0, 0);
 80007fa:	2100      	movs	r1, #0
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff ffac 	bl	800075a <lcd_set_cursor>
		lcd_write_string(FIRST_ROW_LCD);
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <main+0x78>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff92 	bl	8000730 <lcd_write_string>
		lcd_set_cursor(1, 0);
 800080c:	2100      	movs	r1, #0
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff ffa3 	bl	800075a <lcd_set_cursor>
		lcd_write_string(SECOND_ROW_LCD);
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <main+0x7c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff89 	bl	8000730 <lcd_write_string>
		HAL_Delay(1500);
 800081e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000822:	f001 fb95 	bl	8001f50 <HAL_Delay>
		lcd_clear();
 8000826:	e7e6      	b.n	80007f6 <main+0x3e>
 8000828:	2000020c 	.word	0x2000020c
 800082c:	200001c8 	.word	0x200001c8
 8000830:	20000004 	.word	0x20000004
 8000834:	20000008 	.word	0x20000008

08000838 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	; 0x50
 800083c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	2230      	movs	r2, #48	; 0x30
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f007 f8b8 	bl	80079bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <SystemClock_Config+0xb8>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <SystemClock_Config+0xb8>)
 8000866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <SystemClock_Config+0xb8>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <SystemClock_Config+0xbc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <SystemClock_Config+0xbc>)
 8000886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <SystemClock_Config+0xbc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089c:	2301      	movs	r3, #1
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a0:	2310      	movs	r3, #16
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4618      	mov	r0, r3
 80008ae:	f004 fb2f 	bl	8004f10 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x84>
		Error_Handler();
 80008b8:	f001 f84e 	bl	8001958 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 fd92 	bl	8005400 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xae>
		Error_Handler();
 80008e2:	f001 f839 	bl	8001958 <Error_Handler>
	}
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2C1_Init+0x50>)
 80008fe:	4a13      	ldr	r2, [pc, #76]	; (800094c <MX_I2C1_Init+0x54>)
 8000900:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_I2C1_Init+0x50>)
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_I2C1_Init+0x58>)
 8000906:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_I2C1_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_I2C1_Init+0x50>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_I2C1_Init+0x50>)
 8000916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_I2C1_Init+0x50>)
 8000936:	f001 fe97 	bl	8002668 <HAL_I2C_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000940:	f001 f80a 	bl	8001958 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000d8 	.word	0x200000d8
 800094c:	40005400 	.word	0x40005400
 8000950:	000186a0 	.word	0x000186a0

08000954 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 0 */

	HAL_GPIO_WritePin(GPIOD,
 8000958:	2201      	movs	r2, #1
 800095a:	211e      	movs	r1, #30
 800095c:	4819      	ldr	r0, [pc, #100]	; (80009c4 <MX_SPI1_Init+0x70>)
 800095e:	f001 fe69 	bl	8002634 <HAL_GPIO_WritePin>

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000964:	4a19      	ldr	r2, [pc, #100]	; (80009cc <MX_SPI1_Init+0x78>)
 8000966:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_SPI1_Init+0x74>)
 800096a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800096e:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_SPI1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_SPI1_Init+0x74>)
 800098a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_SPI1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_SPI1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009aa:	220a      	movs	r2, #10
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_SPI1_Init+0x74>)
 80009b0:	f004 ff06 	bl	80057c0 <HAL_SPI_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_SPI1_Init+0x6a>
		Error_Handler();
 80009ba:	f000 ffcd 	bl	8001958 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40020c00 	.word	0x40020c00
 80009c8:	2000012c 	.word	0x2000012c
 80009cc:	40013000 	.word	0x40013000

080009d0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_USART1_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 8000a08:	f005 fda0 	bl	800654c <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a12:	f000 ffa1 	bl	8001958 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000184 	.word	0x20000184
 8000a20:	40011000 	.word	0x40011000

08000a24 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_USART2_UART_Init+0x50>)
 8000a2c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	f005 fd76 	bl	800654c <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000a66:	f000 ff77 	bl	8001958 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200001c8 	.word	0x200001c8
 8000a74:	40004400 	.word	0x40004400

08000a78 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
 8000a92:	4b50      	ldr	r3, [pc, #320]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a4f      	ldr	r2, [pc, #316]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	4b49      	ldr	r3, [pc, #292]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a48      	ldr	r2, [pc, #288]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b46      	ldr	r3, [pc, #280]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a41      	ldr	r2, [pc, #260]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a3a      	ldr	r2, [pc, #232]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a33      	ldr	r2, [pc, #204]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a2c      	ldr	r2, [pc, #176]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <MX_GPIO_Init+0x15c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/*Configure GPIO pin Output Level */

	// GPIO управления SPI
	GPIO_InitStruct.Pin = not_SS7_Pin | not_SS6_Pin | not_SS5_Pin | not_SS4_Pin
 8000b36:	f641 631e 	movw	r3, #7710	; 0x1e1e
 8000b3a:	61fb      	str	r3, [r7, #28]
			| not_SS3_Pin | not_SS2_Pin | not_SS1_Pin | not_SS0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4822      	ldr	r0, [pc, #136]	; (8000bd8 <MX_GPIO_Init+0x160>)
 8000b50:	f001 fbd4 	bl	80022fc <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOD,
 8000b54:	2201      	movs	r2, #1
 8000b56:	f641 611e 	movw	r1, #7710	; 0x1e1e
 8000b5a:	481f      	ldr	r0, [pc, #124]	; (8000bd8 <MX_GPIO_Init+0x160>)
 8000b5c:	f001 fd6a 	bl	8002634 <HAL_GPIO_WritePin>
			not_SS7_Pin | not_SS6_Pin | not_SS5_Pin | not_SS4_Pin | not_SS3_Pin
					| not_SS2_Pin | not_SS1_Pin | not_SS0_Pin, GPIO_PIN_SET);

	// GPIOE параллельный интерфейс
	GPIO_InitStruct.Pin = GPIO_E0_Pin | GPIO_E1_Pin | GPIO_E2_Pin | GPIO_E3_Pin
 8000b60:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8000b64:	61fb      	str	r3, [r7, #28]
			| GPIO_E4_Pin | GPIO_E5_Pin | GPIO_E6_Pin | GPIO_E7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4819      	ldr	r0, [pc, #100]	; (8000bdc <MX_GPIO_Init+0x164>)
 8000b76:	f001 fbc1 	bl	80022fc <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOE,
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 41ff 	mov.w	r1, #32640	; 0x7f80
 8000b80:	4816      	ldr	r0, [pc, #88]	; (8000bdc <MX_GPIO_Init+0x164>)
 8000b82:	f001 fd57 	bl	8002634 <HAL_GPIO_WritePin>
			GPIO_E0_Pin | GPIO_E1_Pin | GPIO_E2_Pin | GPIO_E3_Pin | GPIO_E4_Pin
					| GPIO_E5_Pin | GPIO_E6_Pin | GPIO_E7_Pin, GPIO_PIN_RESET);

	// GPIOA параллельный интерфейс
	GPIO_InitStruct.Pin = GPIO_A0_Pin | GPIO_A1_Pin | GPIO_A2_Pin | GPIO_A3_Pin
 8000b86:	23ff      	movs	r3, #255	; 0xff
 8000b88:	61fb      	str	r3, [r7, #28]
			| GPIO_A4_Pin | GPIO_A5_Pin | GPIO_A6_Pin | GPIO_A7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_GPIO_Init+0x168>)
 8000b9a:	f001 fbaf 	bl	80022fc <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA,
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	21ff      	movs	r1, #255	; 0xff
 8000ba2:	480f      	ldr	r0, [pc, #60]	; (8000be0 <MX_GPIO_Init+0x168>)
 8000ba4:	f001 fd46 	bl	8002634 <HAL_GPIO_WritePin>
			GPIO_A0_Pin | GPIO_A1_Pin | GPIO_A2_Pin | GPIO_A3_Pin | GPIO_A4_Pin
					| GPIO_A5_Pin | GPIO_A6_Pin | GPIO_A7_Pin, GPIO_PIN_RESET);

	// GPIOС параллельный интерфейс
	GPIO_InitStruct.Pin = GPIO_C0_Pin | GPIO_C1_Pin | GPIO_C2_Pin | GPIO_C3_Pin
 8000ba8:	23ff      	movs	r3, #255	; 0xff
 8000baa:	61fb      	str	r3, [r7, #28]
			| GPIO_C4_Pin | GPIO_C5_Pin | GPIO_C6_Pin | GPIO_C7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480a      	ldr	r0, [pc, #40]	; (8000be4 <MX_GPIO_Init+0x16c>)
 8000bbc:	f001 fb9e 	bl	80022fc <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOC,
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	21ff      	movs	r1, #255	; 0xff
 8000bc4:	4807      	ldr	r0, [pc, #28]	; (8000be4 <MX_GPIO_Init+0x16c>)
 8000bc6:	f001 fd35 	bl	8002634 <HAL_GPIO_WritePin>
			GPIO_C0_Pin | GPIO_C1_Pin | GPIO_C2_Pin | GPIO_C3_Pin | GPIO_C4_Pin
					| GPIO_C5_Pin | GPIO_C6_Pin | GPIO_C7_Pin, GPIO_PIN_RESET);

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bca:	bf00      	nop
 8000bcc:	3730      	adds	r7, #48	; 0x30
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020800 	.word	0x40020800

08000be8 <UpdateGPIODirection>:

/* USER CODE BEGIN 4 */

void UpdateGPIODirection(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]

	// GPIOA параллельный интерфейс
	GPIO_InitStruct.Pin = GPIO_A0_Pin | GPIO_A1_Pin | GPIO_A2_Pin | GPIO_A3_Pin
 8000bfc:	23ff      	movs	r3, #255	; 0xff
 8000bfe:	607b      	str	r3, [r7, #4]
			| GPIO_A4_Pin | GPIO_A5_Pin | GPIO_A6_Pin | GPIO_A7_Pin;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
	if ((CONTROL_REGISTER & 0b00001000) == 0) {
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <UpdateGPIODirection+0xd4>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d10c      	bne.n	8000c2a <UpdateGPIODirection+0x42>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4829      	ldr	r0, [pc, #164]	; (8000cc0 <UpdateGPIODirection+0xd8>)
 8000c1a:	f001 fb6f 	bl	80022fc <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA,
 8000c1e:	2200      	movs	r2, #0
 8000c20:	21ff      	movs	r1, #255	; 0xff
 8000c22:	4827      	ldr	r0, [pc, #156]	; (8000cc0 <UpdateGPIODirection+0xd8>)
 8000c24:	f001 fd06 	bl	8002634 <HAL_GPIO_WritePin>
 8000c28:	e006      	b.n	8000c38 <UpdateGPIODirection+0x50>
				GPIO_A0_Pin | GPIO_A1_Pin | GPIO_A2_Pin | GPIO_A3_Pin
						| GPIO_A4_Pin | GPIO_A5_Pin | GPIO_A6_Pin | GPIO_A7_Pin,
				GPIO_PIN_RESET);
	} else {
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	4823      	ldr	r0, [pc, #140]	; (8000cc0 <UpdateGPIODirection+0xd8>)
 8000c34:	f001 fb62 	bl	80022fc <HAL_GPIO_Init>
	}

	// GPIOС параллельный интерфейс
	GPIO_InitStruct.Pin = GPIO_C0_Pin | GPIO_C1_Pin | GPIO_C2_Pin | GPIO_C3_Pin
 8000c38:	23ff      	movs	r3, #255	; 0xff
 8000c3a:	607b      	str	r3, [r7, #4]
			| GPIO_C4_Pin | GPIO_C5_Pin | GPIO_C6_Pin | GPIO_C7_Pin;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
	if ((CONTROL_REGISTER & 0b00000100) == 0) {
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <UpdateGPIODirection+0xd4>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10c      	bne.n	8000c66 <UpdateGPIODirection+0x7e>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	4619      	mov	r1, r3
 8000c54:	481b      	ldr	r0, [pc, #108]	; (8000cc4 <UpdateGPIODirection+0xdc>)
 8000c56:	f001 fb51 	bl	80022fc <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOC,
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	21ff      	movs	r1, #255	; 0xff
 8000c5e:	4819      	ldr	r0, [pc, #100]	; (8000cc4 <UpdateGPIODirection+0xdc>)
 8000c60:	f001 fce8 	bl	8002634 <HAL_GPIO_WritePin>
 8000c64:	e006      	b.n	8000c74 <UpdateGPIODirection+0x8c>
				GPIO_C0_Pin | GPIO_C1_Pin | GPIO_C2_Pin | GPIO_C3_Pin
						| GPIO_C4_Pin | GPIO_C5_Pin | GPIO_C6_Pin | GPIO_C7_Pin,
				GPIO_PIN_RESET);
	} else {
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <UpdateGPIODirection+0xdc>)
 8000c70:	f001 fb44 	bl	80022fc <HAL_GPIO_Init>
	}

	// GPIOE параллельный интерфейс
	GPIO_InitStruct.Pin = GPIO_E0_Pin | GPIO_E1_Pin | GPIO_E2_Pin | GPIO_E3_Pin
 8000c74:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8000c78:	607b      	str	r3, [r7, #4]
			| GPIO_E4_Pin | GPIO_E5_Pin | GPIO_E6_Pin | GPIO_E7_Pin;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
	if ((CONTROL_REGISTER & 0b0000010) == 0) {
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <UpdateGPIODirection+0xd4>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10d      	bne.n	8000ca6 <UpdateGPIODirection+0xbe>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4619      	mov	r1, r3
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <UpdateGPIODirection+0xe0>)
 8000c94:	f001 fb32 	bl	80022fc <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOE,
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 41ff 	mov.w	r1, #32640	; 0x7f80
 8000c9e:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <UpdateGPIODirection+0xe0>)
 8000ca0:	f001 fcc8 	bl	8002634 <HAL_GPIO_WritePin>
	} else {
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
	}

}
 8000ca4:	e006      	b.n	8000cb4 <UpdateGPIODirection+0xcc>
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <UpdateGPIODirection+0xe0>)
 8000cb0:	f001 fb24 	bl	80022fc <HAL_GPIO_Init>
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000229 	.word	0x20000229
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	40021000 	.word	0x40021000

08000ccc <GetDestinationByPort>:

AVAILABLE_DESTINATIONS GetDestinationByPort(const uint8_t port) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	switch (port) {
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	2b0e      	cmp	r3, #14
 8000cdc:	d83f      	bhi.n	8000d5e <GetDestinationByPort+0x92>
 8000cde:	a201      	add	r2, pc, #4	; (adr r2, 8000ce4 <GetDestinationByPort+0x18>)
 8000ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce4:	08000d21 	.word	0x08000d21
 8000ce8:	08000d21 	.word	0x08000d21
 8000cec:	08000d21 	.word	0x08000d21
 8000cf0:	08000d5f 	.word	0x08000d5f
 8000cf4:	08000d33 	.word	0x08000d33
 8000cf8:	08000d33 	.word	0x08000d33
 8000cfc:	08000d33 	.word	0x08000d33
 8000d00:	08000d5f 	.word	0x08000d5f
 8000d04:	08000d47 	.word	0x08000d47
 8000d08:	08000d47 	.word	0x08000d47
 8000d0c:	08000d47 	.word	0x08000d47
 8000d10:	08000d5f 	.word	0x08000d5f
 8000d14:	08000d5b 	.word	0x08000d5b
 8000d18:	08000d5b 	.word	0x08000d5b
 8000d1c:	08000d5b 	.word	0x08000d5b
	case 1:
	case 2:
	case 3:
		if ((CONTROL_REGISTER & 0b10000000) == 0) {
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <GetDestinationByPort+0xa0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db01      	blt.n	8000d2e <GetDestinationByPort+0x62>
			return INTERFACE_GPIOA;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e018      	b.n	8000d60 <GetDestinationByPort+0x94>
		}
		return INTERFACE_UART;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e016      	b.n	8000d60 <GetDestinationByPort+0x94>
	case 5:
	case 6:
	case 7:
		if ((CONTROL_REGISTER & 0b01000000) == 0) {
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <GetDestinationByPort+0xa0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <GetDestinationByPort+0x76>
			return INTERFACE_GPIOC;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	e00e      	b.n	8000d60 <GetDestinationByPort+0x94>
		}
		return INTERFACE_SPI;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00c      	b.n	8000d60 <GetDestinationByPort+0x94>
	case 9:
	case 10:
	case 11:
		if ((CONTROL_REGISTER & 0b00100000) == 0) {
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <GetDestinationByPort+0xa0>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	f003 0320 	and.w	r3, r3, #32
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <GetDestinationByPort+0x8a>
			return INTERFACE_GPIOE;
 8000d52:	2305      	movs	r3, #5
 8000d54:	e004      	b.n	8000d60 <GetDestinationByPort+0x94>
		}
		return INTERFACE_I2C;
 8000d56:	2302      	movs	r3, #2
 8000d58:	e002      	b.n	8000d60 <GetDestinationByPort+0x94>
	case 13:
	case 14:
	case 15:
		return CTRL_REG;
 8000d5a:	2306      	movs	r3, #6
 8000d5c:	e000      	b.n	8000d60 <GetDestinationByPort+0x94>
	}
	return INTERFACE_UNKNOWN;
 8000d5e:	2307      	movs	r3, #7
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	20000229 	.word	0x20000229

08000d70 <SendRequestToDestination>:

void SendRequestToDestination(AVAILABLE_DESTINATIONS dest, uint8_t address,
		uint8_t data) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	71bb      	strb	r3, [r7, #6]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	717b      	strb	r3, [r7, #5]
	switch (dest) {
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b06      	cmp	r3, #6
 8000d86:	f200 820c 	bhi.w	80011a2 <SendRequestToDestination+0x432>
 8000d8a:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <SendRequestToDestination+0x20>)
 8000d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d90:	08000dad 	.word	0x08000dad
 8000d94:	08000df3 	.word	0x08000df3
 8000d98:	08000ebd 	.word	0x08000ebd
 8000d9c:	08000efd 	.word	0x08000efd
 8000da0:	08000fb9 	.word	0x08000fb9
 8000da4:	080010b9 	.word	0x080010b9
 8000da8:	08001183 	.word	0x08001183
	case INTERFACE_UART:
		// Отправить данные по интерфейсу юарт
		FIRST_ROW_LCD = "MT->UART";
 8000dac:	4bb1      	ldr	r3, [pc, #708]	; (8001074 <SendRequestToDestination+0x304>)
 8000dae:	4ab2      	ldr	r2, [pc, #712]	; (8001078 <SendRequestToDestination+0x308>)
 8000db0:	601a      	str	r2, [r3, #0]
		sprintf(SECOND_ROW_LCD, "0x%x", data);
 8000db2:	4bb2      	ldr	r3, [pc, #712]	; (800107c <SendRequestToDestination+0x30c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	797a      	ldrb	r2, [r7, #5]
 8000db8:	49b1      	ldr	r1, [pc, #708]	; (8001080 <SendRequestToDestination+0x310>)
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 fdde 	bl	800797c <siprintf>

		HAL_UART_Transmit(&huart1, &data, 1, HAL_MAX_DELAY);
 8000dc0:	1d79      	adds	r1, r7, #5
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	48ae      	ldr	r0, [pc, #696]	; (8001084 <SendRequestToDestination+0x314>)
 8000dca:	f005 fc0c 	bl	80065e6 <HAL_UART_Transmit>

		// Прервать асинхронных прием данных, так как была дана команда на новую отправку посылки
		if (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_RX) {
 8000dce:	48ad      	ldr	r0, [pc, #692]	; (8001084 <SendRequestToDestination+0x314>)
 8000dd0:	f006 f8d8 	bl	8006f84 <HAL_UART_GetState>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b22      	cmp	r3, #34	; 0x22
 8000dd8:	d102      	bne.n	8000de0 <SendRequestToDestination+0x70>
			HAL_UART_AbortReceive_IT(&huart1);
 8000dda:	48aa      	ldr	r0, [pc, #680]	; (8001084 <SendRequestToDestination+0x314>)
 8000ddc:	f005 fd68 	bl	80068b0 <HAL_UART_AbortReceive_IT>
		}

		UART_INTERFACE_DATA_RECIEVED = 0;
 8000de0:	4ba9      	ldr	r3, [pc, #676]	; (8001088 <SendRequestToDestination+0x318>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
		// Асинхронно ожидаем прием данных
		HAL_UART_Receive_IT(&huart1, UART_INTERFACE_RESPONSE,
 8000de6:	2201      	movs	r2, #1
 8000de8:	49a8      	ldr	r1, [pc, #672]	; (800108c <SendRequestToDestination+0x31c>)
 8000dea:	48a6      	ldr	r0, [pc, #664]	; (8001084 <SendRequestToDestination+0x314>)
 8000dec:	f005 fd2f 	bl	800684e <HAL_UART_Receive_IT>
				sizeof(UART_INTERFACE_RESPONSE));

		break;
 8000df0:	e1d7      	b.n	80011a2 <SendRequestToDestination+0x432>
	case INTERFACE_SPI:
		sprintf(FIRST_ROW_LCD, "%s(%d)", "MT->SPI", address % SPI_MAX_DEVICES);
 8000df2:	4ba0      	ldr	r3, [pc, #640]	; (8001074 <SendRequestToDestination+0x304>)
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	4aa4      	ldr	r2, [pc, #656]	; (8001090 <SendRequestToDestination+0x320>)
 8000dfe:	49a5      	ldr	r1, [pc, #660]	; (8001094 <SendRequestToDestination+0x324>)
 8000e00:	f006 fdbc 	bl	800797c <siprintf>
		sprintf(SECOND_ROW_LCD, "0x%x", data);
 8000e04:	4b9d      	ldr	r3, [pc, #628]	; (800107c <SendRequestToDestination+0x30c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	797a      	ldrb	r2, [r7, #5]
 8000e0a:	499d      	ldr	r1, [pc, #628]	; (8001080 <SendRequestToDestination+0x310>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f006 fdb5 	bl	800797c <siprintf>
		switch (address % SPI_MAX_DEVICES) {
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	2b07      	cmp	r3, #7
 8000e1a:	d847      	bhi.n	8000eac <SendRequestToDestination+0x13c>
 8000e1c:	a201      	add	r2, pc, #4	; (adr r2, 8000e24 <SendRequestToDestination+0xb4>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000e45 	.word	0x08000e45
 8000e28:	08000e51 	.word	0x08000e51
 8000e2c:	08000e5d 	.word	0x08000e5d
 8000e30:	08000e69 	.word	0x08000e69
 8000e34:	08000e75 	.word	0x08000e75
 8000e38:	08000e83 	.word	0x08000e83
 8000e3c:	08000e91 	.word	0x08000e91
 8000e40:	08000e9f 	.word	0x08000e9f
		case 0:
			HAL_GPIO_WritePin(not_SS0_GPIO_Port, not_SS0_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2102      	movs	r1, #2
 8000e48:	4893      	ldr	r0, [pc, #588]	; (8001098 <SendRequestToDestination+0x328>)
 8000e4a:	f001 fbf3 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 8000e4e:	e02d      	b.n	8000eac <SendRequestToDestination+0x13c>
		case 1:
			HAL_GPIO_WritePin(not_SS1_GPIO_Port, not_SS1_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2104      	movs	r1, #4
 8000e54:	4890      	ldr	r0, [pc, #576]	; (8001098 <SendRequestToDestination+0x328>)
 8000e56:	f001 fbed 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 8000e5a:	e027      	b.n	8000eac <SendRequestToDestination+0x13c>
		case 2:
			HAL_GPIO_WritePin(not_SS2_GPIO_Port, not_SS2_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2108      	movs	r1, #8
 8000e60:	488d      	ldr	r0, [pc, #564]	; (8001098 <SendRequestToDestination+0x328>)
 8000e62:	f001 fbe7 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 8000e66:	e021      	b.n	8000eac <SendRequestToDestination+0x13c>
		case 3:
			HAL_GPIO_WritePin(not_SS3_GPIO_Port, not_SS3_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	488a      	ldr	r0, [pc, #552]	; (8001098 <SendRequestToDestination+0x328>)
 8000e6e:	f001 fbe1 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 8000e72:	e01b      	b.n	8000eac <SendRequestToDestination+0x13c>
		case 4:
			HAL_GPIO_WritePin(not_SS4_GPIO_Port, not_SS4_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7a:	4887      	ldr	r0, [pc, #540]	; (8001098 <SendRequestToDestination+0x328>)
 8000e7c:	f001 fbda 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 8000e80:	e014      	b.n	8000eac <SendRequestToDestination+0x13c>
		case 5:
			HAL_GPIO_WritePin(not_SS5_GPIO_Port, not_SS5_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e88:	4883      	ldr	r0, [pc, #524]	; (8001098 <SendRequestToDestination+0x328>)
 8000e8a:	f001 fbd3 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 8000e8e:	e00d      	b.n	8000eac <SendRequestToDestination+0x13c>
		case 6:
			HAL_GPIO_WritePin(not_SS6_GPIO_Port, not_SS6_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e96:	4880      	ldr	r0, [pc, #512]	; (8001098 <SendRequestToDestination+0x328>)
 8000e98:	f001 fbcc 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 8000e9c:	e006      	b.n	8000eac <SendRequestToDestination+0x13c>
		case 7:
			HAL_GPIO_WritePin(not_SS7_GPIO_Port, not_SS7_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea4:	487c      	ldr	r0, [pc, #496]	; (8001098 <SendRequestToDestination+0x328>)
 8000ea6:	f001 fbc5 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 8000eaa:	bf00      	nop
		}
		HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000eac:	1d79      	adds	r1, r7, #5
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4879      	ldr	r0, [pc, #484]	; (800109c <SendRequestToDestination+0x32c>)
 8000eb6:	f004 fd0c 	bl	80058d2 <HAL_SPI_Transmit>
		break;
 8000eba:	e172      	b.n	80011a2 <SendRequestToDestination+0x432>
	case INTERFACE_I2C:
		sprintf(FIRST_ROW_LCD, "%s(%d)", "MT->I2C",
 8000ebc:	4b6d      	ldr	r3, [pc, #436]	; (8001074 <SendRequestToDestination+0x304>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
				(address % I2C_MAX_DEVICES) << 1);
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	005b      	lsls	r3, r3, #1
		sprintf(FIRST_ROW_LCD, "%s(%d)", "MT->I2C",
 8000ec4:	f003 031e 	and.w	r3, r3, #30
 8000ec8:	4a75      	ldr	r2, [pc, #468]	; (80010a0 <SendRequestToDestination+0x330>)
 8000eca:	4972      	ldr	r1, [pc, #456]	; (8001094 <SendRequestToDestination+0x324>)
 8000ecc:	f006 fd56 	bl	800797c <siprintf>
		sprintf(SECOND_ROW_LCD, "0x%x", data);
 8000ed0:	4b6a      	ldr	r3, [pc, #424]	; (800107c <SendRequestToDestination+0x30c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	797a      	ldrb	r2, [r7, #5]
 8000ed6:	496a      	ldr	r1, [pc, #424]	; (8001080 <SendRequestToDestination+0x310>)
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f006 fd4f 	bl	800797c <siprintf>

		HAL_I2C_Master_Transmit(&hi2c1, (address % I2C_MAX_DEVICES) << 1, &data,
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	f003 031e 	and.w	r3, r3, #30
 8000ee8:	b299      	uxth	r1, r3
 8000eea:	1d7a      	adds	r2, r7, #5
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	486b      	ldr	r0, [pc, #428]	; (80010a4 <SendRequestToDestination+0x334>)
 8000ef6:	f001 fcfb 	bl	80028f0 <HAL_I2C_Master_Transmit>
				1,
				HAL_MAX_DELAY);
		break;
 8000efa:	e152      	b.n	80011a2 <SendRequestToDestination+0x432>
	case INTERFACE_GPIOA:
		FIRST_ROW_LCD = "MT->GPIOA";
 8000efc:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <SendRequestToDestination+0x304>)
 8000efe:	4a6a      	ldr	r2, [pc, #424]	; (80010a8 <SendRequestToDestination+0x338>)
 8000f00:	601a      	str	r2, [r3, #0]
		sprintf(SECOND_ROW_LCD, "0x%x", data);
 8000f02:	4b5e      	ldr	r3, [pc, #376]	; (800107c <SendRequestToDestination+0x30c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	797a      	ldrb	r2, [r7, #5]
 8000f08:	495d      	ldr	r1, [pc, #372]	; (8001080 <SendRequestToDestination+0x310>)
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f006 fd36 	bl	800797c <siprintf>

		HAL_GPIO_WritePin(GPIO_A0_GPIO_Port, GPIO_A0_Pin,
				(data >> 0) & 0b00000001);
 8000f10:	797b      	ldrb	r3, [r7, #5]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_A0_GPIO_Port, GPIO_A0_Pin,
 8000f18:	461a      	mov	r2, r3
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4863      	ldr	r0, [pc, #396]	; (80010ac <SendRequestToDestination+0x33c>)
 8000f1e:	f001 fb89 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_A1_GPIO_Port, GPIO_A1_Pin,
 8000f22:	797b      	ldrb	r3, [r7, #5]
 8000f24:	085b      	lsrs	r3, r3, #1
 8000f26:	b2db      	uxtb	r3, r3
				(data >> 1) & 0b00000001);
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_A1_GPIO_Port, GPIO_A1_Pin,
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2102      	movs	r1, #2
 8000f32:	485e      	ldr	r0, [pc, #376]	; (80010ac <SendRequestToDestination+0x33c>)
 8000f34:	f001 fb7e 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_A2_GPIO_Port, GPIO_A2_Pin,
 8000f38:	797b      	ldrb	r3, [r7, #5]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	b2db      	uxtb	r3, r3
				(data >> 2) & 0b00000001);
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_A2_GPIO_Port, GPIO_A2_Pin,
 8000f44:	461a      	mov	r2, r3
 8000f46:	2104      	movs	r1, #4
 8000f48:	4858      	ldr	r0, [pc, #352]	; (80010ac <SendRequestToDestination+0x33c>)
 8000f4a:	f001 fb73 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_A3_GPIO_Port, GPIO_A3_Pin,
 8000f4e:	797b      	ldrb	r3, [r7, #5]
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	b2db      	uxtb	r3, r3
				(data >> 3) & 0b00000001);
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_A3_GPIO_Port, GPIO_A3_Pin,
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	4853      	ldr	r0, [pc, #332]	; (80010ac <SendRequestToDestination+0x33c>)
 8000f60:	f001 fb68 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_A4_GPIO_Port, GPIO_A4_Pin,
 8000f64:	797b      	ldrb	r3, [r7, #5]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	b2db      	uxtb	r3, r3
				(data >> 4) & 0b00000001);
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_A4_GPIO_Port, GPIO_A4_Pin,
 8000f70:	461a      	mov	r2, r3
 8000f72:	2110      	movs	r1, #16
 8000f74:	484d      	ldr	r0, [pc, #308]	; (80010ac <SendRequestToDestination+0x33c>)
 8000f76:	f001 fb5d 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_A5_GPIO_Port, GPIO_A5_Pin,
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	095b      	lsrs	r3, r3, #5
 8000f7e:	b2db      	uxtb	r3, r3
				(data >> 5) & 0b00000001);
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_A5_GPIO_Port, GPIO_A5_Pin,
 8000f86:	461a      	mov	r2, r3
 8000f88:	2120      	movs	r1, #32
 8000f8a:	4848      	ldr	r0, [pc, #288]	; (80010ac <SendRequestToDestination+0x33c>)
 8000f8c:	f001 fb52 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_A6_GPIO_Port, GPIO_A6_Pin,
 8000f90:	797b      	ldrb	r3, [r7, #5]
 8000f92:	099b      	lsrs	r3, r3, #6
 8000f94:	b2db      	uxtb	r3, r3
				(data >> 6) & 0b00000001);
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_A6_GPIO_Port, GPIO_A6_Pin,
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	2140      	movs	r1, #64	; 0x40
 8000fa0:	4842      	ldr	r0, [pc, #264]	; (80010ac <SendRequestToDestination+0x33c>)
 8000fa2:	f001 fb47 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_A7_GPIO_Port, GPIO_A7_Pin,
 8000fa6:	797b      	ldrb	r3, [r7, #5]
 8000fa8:	09db      	lsrs	r3, r3, #7
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	483e      	ldr	r0, [pc, #248]	; (80010ac <SendRequestToDestination+0x33c>)
 8000fb2:	f001 fb3f 	bl	8002634 <HAL_GPIO_WritePin>
				(data >> 7) & 0b00000001);
		break;
 8000fb6:	e0f4      	b.n	80011a2 <SendRequestToDestination+0x432>
	case INTERFACE_GPIOC:
		FIRST_ROW_LCD = "MT->GPIOC";
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <SendRequestToDestination+0x304>)
 8000fba:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <SendRequestToDestination+0x340>)
 8000fbc:	601a      	str	r2, [r3, #0]
		sprintf(SECOND_ROW_LCD, "0x%x", data);
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <SendRequestToDestination+0x30c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	797a      	ldrb	r2, [r7, #5]
 8000fc4:	492e      	ldr	r1, [pc, #184]	; (8001080 <SendRequestToDestination+0x310>)
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f006 fcd8 	bl	800797c <siprintf>

		HAL_GPIO_WritePin(GPIO_C0_GPIO_Port, GPIO_C0_Pin,
				(data >> 0) & 0b00000001);
 8000fcc:	797b      	ldrb	r3, [r7, #5]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_C0_GPIO_Port, GPIO_C0_Pin,
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4836      	ldr	r0, [pc, #216]	; (80010b4 <SendRequestToDestination+0x344>)
 8000fda:	f001 fb2b 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_C1_GPIO_Port, GPIO_C1_Pin,
 8000fde:	797b      	ldrb	r3, [r7, #5]
 8000fe0:	085b      	lsrs	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
				(data >> 1) & 0b00000001);
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_C1_GPIO_Port, GPIO_C1_Pin,
 8000fea:	461a      	mov	r2, r3
 8000fec:	2102      	movs	r1, #2
 8000fee:	4831      	ldr	r0, [pc, #196]	; (80010b4 <SendRequestToDestination+0x344>)
 8000ff0:	f001 fb20 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_C2_GPIO_Port, GPIO_C2_Pin,
 8000ff4:	797b      	ldrb	r3, [r7, #5]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	b2db      	uxtb	r3, r3
				(data >> 2) & 0b00000001);
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_C2_GPIO_Port, GPIO_C2_Pin,
 8001000:	461a      	mov	r2, r3
 8001002:	2104      	movs	r1, #4
 8001004:	482b      	ldr	r0, [pc, #172]	; (80010b4 <SendRequestToDestination+0x344>)
 8001006:	f001 fb15 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_C3_GPIO_Port, GPIO_C3_Pin,
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	08db      	lsrs	r3, r3, #3
 800100e:	b2db      	uxtb	r3, r3
				(data >> 3) & 0b00000001);
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_C3_GPIO_Port, GPIO_C3_Pin,
 8001016:	461a      	mov	r2, r3
 8001018:	2108      	movs	r1, #8
 800101a:	4826      	ldr	r0, [pc, #152]	; (80010b4 <SendRequestToDestination+0x344>)
 800101c:	f001 fb0a 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_C4_GPIO_Port, GPIO_C4_Pin,
 8001020:	797b      	ldrb	r3, [r7, #5]
 8001022:	091b      	lsrs	r3, r3, #4
 8001024:	b2db      	uxtb	r3, r3
				(data >> 4) & 0b00000001);
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_C4_GPIO_Port, GPIO_C4_Pin,
 800102c:	461a      	mov	r2, r3
 800102e:	2110      	movs	r1, #16
 8001030:	4820      	ldr	r0, [pc, #128]	; (80010b4 <SendRequestToDestination+0x344>)
 8001032:	f001 faff 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_C5_GPIO_Port, GPIO_C5_Pin,
 8001036:	797b      	ldrb	r3, [r7, #5]
 8001038:	095b      	lsrs	r3, r3, #5
 800103a:	b2db      	uxtb	r3, r3
				(data >> 5) & 0b00000001);
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_C5_GPIO_Port, GPIO_C5_Pin,
 8001042:	461a      	mov	r2, r3
 8001044:	2120      	movs	r1, #32
 8001046:	481b      	ldr	r0, [pc, #108]	; (80010b4 <SendRequestToDestination+0x344>)
 8001048:	f001 faf4 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_C6_GPIO_Port, GPIO_C6_Pin,
 800104c:	797b      	ldrb	r3, [r7, #5]
 800104e:	099b      	lsrs	r3, r3, #6
 8001050:	b2db      	uxtb	r3, r3
				(data >> 6) & 0b00000001);
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_C6_GPIO_Port, GPIO_C6_Pin,
 8001058:	461a      	mov	r2, r3
 800105a:	2140      	movs	r1, #64	; 0x40
 800105c:	4815      	ldr	r0, [pc, #84]	; (80010b4 <SendRequestToDestination+0x344>)
 800105e:	f001 fae9 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_C7_GPIO_Port, GPIO_C7_Pin,
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	09db      	lsrs	r3, r3, #7
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	4811      	ldr	r0, [pc, #68]	; (80010b4 <SendRequestToDestination+0x344>)
 800106e:	f001 fae1 	bl	8002634 <HAL_GPIO_WritePin>
				(data >> 7) & 0b00000001);
		break;
 8001072:	e096      	b.n	80011a2 <SendRequestToDestination+0x432>
 8001074:	20000004 	.word	0x20000004
 8001078:	080082f8 	.word	0x080082f8
 800107c:	20000008 	.word	0x20000008
 8001080:	08008304 	.word	0x08008304
 8001084:	20000184 	.word	0x20000184
 8001088:	20000228 	.word	0x20000228
 800108c:	20000210 	.word	0x20000210
 8001090:	0800830c 	.word	0x0800830c
 8001094:	08008314 	.word	0x08008314
 8001098:	40020c00 	.word	0x40020c00
 800109c:	2000012c 	.word	0x2000012c
 80010a0:	0800831c 	.word	0x0800831c
 80010a4:	200000d8 	.word	0x200000d8
 80010a8:	08008324 	.word	0x08008324
 80010ac:	40020000 	.word	0x40020000
 80010b0:	08008330 	.word	0x08008330
 80010b4:	40020800 	.word	0x40020800
	case INTERFACE_GPIOE:
		FIRST_ROW_LCD = "MT->GPIOE";
 80010b8:	4b3c      	ldr	r3, [pc, #240]	; (80011ac <SendRequestToDestination+0x43c>)
 80010ba:	4a3d      	ldr	r2, [pc, #244]	; (80011b0 <SendRequestToDestination+0x440>)
 80010bc:	601a      	str	r2, [r3, #0]
		sprintf(SECOND_ROW_LCD, "0x%x", data);
 80010be:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <SendRequestToDestination+0x444>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	797a      	ldrb	r2, [r7, #5]
 80010c4:	493c      	ldr	r1, [pc, #240]	; (80011b8 <SendRequestToDestination+0x448>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f006 fc58 	bl	800797c <siprintf>

		HAL_GPIO_WritePin(GPIO_E0_GPIO_Port, GPIO_E0_Pin,
				(data >> 0) & 0b00000001);
 80010cc:	797b      	ldrb	r3, [r7, #5]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_E0_GPIO_Port, GPIO_E0_Pin,
 80010d4:	461a      	mov	r2, r3
 80010d6:	2180      	movs	r1, #128	; 0x80
 80010d8:	4838      	ldr	r0, [pc, #224]	; (80011bc <SendRequestToDestination+0x44c>)
 80010da:	f001 faab 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_E1_GPIO_Port, GPIO_E1_Pin,
 80010de:	797b      	ldrb	r3, [r7, #5]
 80010e0:	085b      	lsrs	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
				(data >> 1) & 0b00000001);
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_E1_GPIO_Port, GPIO_E1_Pin,
 80010ea:	461a      	mov	r2, r3
 80010ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f0:	4832      	ldr	r0, [pc, #200]	; (80011bc <SendRequestToDestination+0x44c>)
 80010f2:	f001 fa9f 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_E2_GPIO_Port, GPIO_E2_Pin,
 80010f6:	797b      	ldrb	r3, [r7, #5]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	b2db      	uxtb	r3, r3
				(data >> 2) & 0b00000001);
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_E2_GPIO_Port, GPIO_E2_Pin,
 8001102:	461a      	mov	r2, r3
 8001104:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001108:	482c      	ldr	r0, [pc, #176]	; (80011bc <SendRequestToDestination+0x44c>)
 800110a:	f001 fa93 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_E3_GPIO_Port, GPIO_E3_Pin,
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	b2db      	uxtb	r3, r3
				(data >> 3) & 0b00000001);
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_E3_GPIO_Port, GPIO_E3_Pin,
 800111a:	461a      	mov	r2, r3
 800111c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001120:	4826      	ldr	r0, [pc, #152]	; (80011bc <SendRequestToDestination+0x44c>)
 8001122:	f001 fa87 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_E4_GPIO_Port, GPIO_E4_Pin,
 8001126:	797b      	ldrb	r3, [r7, #5]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	b2db      	uxtb	r3, r3
				(data >> 4) & 0b00000001);
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_E4_GPIO_Port, GPIO_E4_Pin,
 8001132:	461a      	mov	r2, r3
 8001134:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001138:	4820      	ldr	r0, [pc, #128]	; (80011bc <SendRequestToDestination+0x44c>)
 800113a:	f001 fa7b 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_E5_GPIO_Port, GPIO_E5_Pin,
 800113e:	797b      	ldrb	r3, [r7, #5]
 8001140:	095b      	lsrs	r3, r3, #5
 8001142:	b2db      	uxtb	r3, r3
				(data >> 5) & 0b00000001);
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_E5_GPIO_Port, GPIO_E5_Pin,
 800114a:	461a      	mov	r2, r3
 800114c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001150:	481a      	ldr	r0, [pc, #104]	; (80011bc <SendRequestToDestination+0x44c>)
 8001152:	f001 fa6f 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_E6_GPIO_Port, GPIO_E6_Pin,
 8001156:	797b      	ldrb	r3, [r7, #5]
 8001158:	099b      	lsrs	r3, r3, #6
 800115a:	b2db      	uxtb	r3, r3
				(data >> 6) & 0b00000001);
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(GPIO_E6_GPIO_Port, GPIO_E6_Pin,
 8001162:	461a      	mov	r2, r3
 8001164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001168:	4814      	ldr	r0, [pc, #80]	; (80011bc <SendRequestToDestination+0x44c>)
 800116a:	f001 fa63 	bl	8002634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_E7_GPIO_Port, GPIO_E7_Pin,
 800116e:	797b      	ldrb	r3, [r7, #5]
 8001170:	09db      	lsrs	r3, r3, #7
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117a:	4810      	ldr	r0, [pc, #64]	; (80011bc <SendRequestToDestination+0x44c>)
 800117c:	f001 fa5a 	bl	8002634 <HAL_GPIO_WritePin>
				(data >> 7) & 0b00000001);
		break;
 8001180:	e00f      	b.n	80011a2 <SendRequestToDestination+0x432>
	case CTRL_REG:
		FIRST_ROW_LCD = "MT->CTRL REG";
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <SendRequestToDestination+0x43c>)
 8001184:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <SendRequestToDestination+0x450>)
 8001186:	601a      	str	r2, [r3, #0]
		sprintf(SECOND_ROW_LCD, "0x%x", data);
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <SendRequestToDestination+0x444>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	797a      	ldrb	r2, [r7, #5]
 800118e:	490a      	ldr	r1, [pc, #40]	; (80011b8 <SendRequestToDestination+0x448>)
 8001190:	4618      	mov	r0, r3
 8001192:	f006 fbf3 	bl	800797c <siprintf>
		CONTROL_REGISTER = data;
 8001196:	797a      	ldrb	r2, [r7, #5]
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <SendRequestToDestination+0x454>)
 800119a:	701a      	strb	r2, [r3, #0]
		UpdateGPIODirection();
 800119c:	f7ff fd24 	bl	8000be8 <UpdateGPIODirection>
		break;
 80011a0:	bf00      	nop
	}
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000004 	.word	0x20000004
 80011b0:	0800833c 	.word	0x0800833c
 80011b4:	20000008 	.word	0x20000008
 80011b8:	08008304 	.word	0x08008304
 80011bc:	40021000 	.word	0x40021000
 80011c0:	08008348 	.word	0x08008348
 80011c4:	20000229 	.word	0x20000229

080011c8 <GetResponseFromDestination>:

void GetResponseFromDestination(AVAILABLE_DESTINATIONS dest, uint8_t address,
		uint8_t *answer) {
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	603a      	str	r2, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	460b      	mov	r3, r1
 80011d6:	71bb      	strb	r3, [r7, #6]
	uint8_t error_code;
	switch (dest) {
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b06      	cmp	r3, #6
 80011dc:	f200 82de 	bhi.w	800179c <GetResponseFromDestination+0x5d4>
 80011e0:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <GetResponseFromDestination+0x20>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	08001205 	.word	0x08001205
 80011ec:	0800126d 	.word	0x0800126d
 80011f0:	08001379 	.word	0x08001379
 80011f4:	08001441 	.word	0x08001441
 80011f8:	08001547 	.word	0x08001547
 80011fc:	08001669 	.word	0x08001669
 8001200:	0800177d 	.word	0x0800177d
	case INTERFACE_UART:

		if (UART_INTERFACE_DATA_RECIEVED != 1) {
 8001204:	4b7d      	ldr	r3, [pc, #500]	; (80013fc <GetResponseFromDestination+0x234>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d009      	beq.n	8001220 <GetResponseFromDestination+0x58>
			HAL_UART_AbortReceive_IT(&huart1);
 800120c:	487c      	ldr	r0, [pc, #496]	; (8001400 <GetResponseFromDestination+0x238>)
 800120e:	f005 fb4f 	bl	80068b0 <HAL_UART_AbortReceive_IT>

			HAL_UART_Receive(&huart1, &UART_INTERFACE_RESPONSE[0],
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	2201      	movs	r2, #1
 8001218:	497a      	ldr	r1, [pc, #488]	; (8001404 <GetResponseFromDestination+0x23c>)
 800121a:	4879      	ldr	r0, [pc, #484]	; (8001400 <GetResponseFromDestination+0x238>)
 800121c:	f005 fa75 	bl	800670a <HAL_UART_Receive>
					sizeof(UART_INTERFACE_RESPONSE[0]),
					HAL_MAX_DELAY);
		}

		error_code = HAL_UART_GetError(&huart1);
 8001220:	4877      	ldr	r0, [pc, #476]	; (8001400 <GetResponseFromDestination+0x238>)
 8001222:	f005 fecd 	bl	8006fc0 <HAL_UART_GetError>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]

		FIRST_ROW_LCD = "MT<-UART";
 800122a:	4b77      	ldr	r3, [pc, #476]	; (8001408 <GetResponseFromDestination+0x240>)
 800122c:	4a77      	ldr	r2, [pc, #476]	; (800140c <GetResponseFromDestination+0x244>)
 800122e:	601a      	str	r2, [r3, #0]
		if (error_code == HAL_UART_ERROR_NONE) {
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10c      	bne.n	8001250 <GetResponseFromDestination+0x88>
			*answer = UART_INTERFACE_RESPONSE[0];
 8001236:	4b73      	ldr	r3, [pc, #460]	; (8001404 <GetResponseFromDestination+0x23c>)
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	701a      	strb	r2, [r3, #0]
			sprintf(SECOND_ROW_LCD, "0x%x", UART_INTERFACE_RESPONSE[0]);
 800123e:	4b74      	ldr	r3, [pc, #464]	; (8001410 <GetResponseFromDestination+0x248>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a70      	ldr	r2, [pc, #448]	; (8001404 <GetResponseFromDestination+0x23c>)
 8001244:	7812      	ldrb	r2, [r2, #0]
 8001246:	4973      	ldr	r1, [pc, #460]	; (8001414 <GetResponseFromDestination+0x24c>)
 8001248:	4618      	mov	r0, r3
 800124a:	f006 fb97 	bl	800797c <siprintf>
 800124e:	e009      	b.n	8001264 <GetResponseFromDestination+0x9c>
		} else {
			// TODO Нужно указать на ошибку, хз, куда поместить
			*answer = error_code;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	7bfa      	ldrb	r2, [r7, #15]
 8001254:	701a      	strb	r2, [r3, #0]
			sprintf(SECOND_ROW_LCD, "%s:0x%x", "Error code", error_code);
 8001256:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <GetResponseFromDestination+0x248>)
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4a6e      	ldr	r2, [pc, #440]	; (8001418 <GetResponseFromDestination+0x250>)
 800125e:	496f      	ldr	r1, [pc, #444]	; (800141c <GetResponseFromDestination+0x254>)
 8001260:	f006 fb8c 	bl	800797c <siprintf>
		}

		UART_INTERFACE_DATA_RECIEVED = 0;
 8001264:	4b65      	ldr	r3, [pc, #404]	; (80013fc <GetResponseFromDestination+0x234>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
		break;
 800126a:	e297      	b.n	800179c <GetResponseFromDestination+0x5d4>
	case INTERFACE_SPI:
		HAL_SPI_Receive(&hspi1,
				&SPI_INTERFACE_RESPONSE[address % SPI_MAX_DEVICES],
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	f003 0307 	and.w	r3, r3, #7
		HAL_SPI_Receive(&hspi1,
 8001272:	4a6b      	ldr	r2, [pc, #428]	; (8001420 <GetResponseFromDestination+0x258>)
 8001274:	1899      	adds	r1, r3, r2
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	2201      	movs	r2, #1
 800127c:	4869      	ldr	r0, [pc, #420]	; (8001424 <GetResponseFromDestination+0x25c>)
 800127e:	f004 fc64 	bl	8005b4a <HAL_SPI_Receive>
				sizeof(SPI_INTERFACE_RESPONSE[address % SPI_MAX_DEVICES]),
				HAL_MAX_DELAY);

		error_code = HAL_SPI_GetError(&hspi1);
 8001282:	4868      	ldr	r0, [pc, #416]	; (8001424 <GetResponseFromDestination+0x25c>)
 8001284:	f005 f812 	bl	80062ac <HAL_SPI_GetError>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]

		switch (address % SPI_MAX_DEVICES) {
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	2b07      	cmp	r3, #7
 8001294:	d846      	bhi.n	8001324 <GetResponseFromDestination+0x15c>
 8001296:	a201      	add	r2, pc, #4	; (adr r2, 800129c <GetResponseFromDestination+0xd4>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	080012bd 	.word	0x080012bd
 80012a0:	080012c9 	.word	0x080012c9
 80012a4:	080012d5 	.word	0x080012d5
 80012a8:	080012e1 	.word	0x080012e1
 80012ac:	080012ed 	.word	0x080012ed
 80012b0:	080012fb 	.word	0x080012fb
 80012b4:	08001309 	.word	0x08001309
 80012b8:	08001317 	.word	0x08001317
		case 0:
			HAL_GPIO_WritePin(not_SS0_GPIO_Port, not_SS0_Pin, GPIO_PIN_SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2102      	movs	r1, #2
 80012c0:	4859      	ldr	r0, [pc, #356]	; (8001428 <GetResponseFromDestination+0x260>)
 80012c2:	f001 f9b7 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 80012c6:	e02d      	b.n	8001324 <GetResponseFromDestination+0x15c>
		case 1:
			HAL_GPIO_WritePin(not_SS1_GPIO_Port, not_SS1_Pin, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2104      	movs	r1, #4
 80012cc:	4856      	ldr	r0, [pc, #344]	; (8001428 <GetResponseFromDestination+0x260>)
 80012ce:	f001 f9b1 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 80012d2:	e027      	b.n	8001324 <GetResponseFromDestination+0x15c>
		case 2:
			HAL_GPIO_WritePin(not_SS2_GPIO_Port, not_SS2_Pin, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2108      	movs	r1, #8
 80012d8:	4853      	ldr	r0, [pc, #332]	; (8001428 <GetResponseFromDestination+0x260>)
 80012da:	f001 f9ab 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 80012de:	e021      	b.n	8001324 <GetResponseFromDestination+0x15c>
		case 3:
			HAL_GPIO_WritePin(not_SS3_GPIO_Port, not_SS3_Pin, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2110      	movs	r1, #16
 80012e4:	4850      	ldr	r0, [pc, #320]	; (8001428 <GetResponseFromDestination+0x260>)
 80012e6:	f001 f9a5 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 80012ea:	e01b      	b.n	8001324 <GetResponseFromDestination+0x15c>
		case 4:
			HAL_GPIO_WritePin(not_SS4_GPIO_Port, not_SS4_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f2:	484d      	ldr	r0, [pc, #308]	; (8001428 <GetResponseFromDestination+0x260>)
 80012f4:	f001 f99e 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 80012f8:	e014      	b.n	8001324 <GetResponseFromDestination+0x15c>
		case 5:
			HAL_GPIO_WritePin(not_SS5_GPIO_Port, not_SS5_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001300:	4849      	ldr	r0, [pc, #292]	; (8001428 <GetResponseFromDestination+0x260>)
 8001302:	f001 f997 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 8001306:	e00d      	b.n	8001324 <GetResponseFromDestination+0x15c>
		case 6:
			HAL_GPIO_WritePin(not_SS6_GPIO_Port, not_SS6_Pin, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130e:	4846      	ldr	r0, [pc, #280]	; (8001428 <GetResponseFromDestination+0x260>)
 8001310:	f001 f990 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 8001314:	e006      	b.n	8001324 <GetResponseFromDestination+0x15c>
		case 7:
			HAL_GPIO_WritePin(not_SS7_GPIO_Port, not_SS7_Pin, GPIO_PIN_SET);
 8001316:	2201      	movs	r2, #1
 8001318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131c:	4842      	ldr	r0, [pc, #264]	; (8001428 <GetResponseFromDestination+0x260>)
 800131e:	f001 f989 	bl	8002634 <HAL_GPIO_WritePin>
			break;
 8001322:	bf00      	nop
		}

		sprintf(FIRST_ROW_LCD, "%s(%d)", "MT<-SPI", address % SPI_MAX_DEVICES);
 8001324:	4b38      	ldr	r3, [pc, #224]	; (8001408 <GetResponseFromDestination+0x240>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	79bb      	ldrb	r3, [r7, #6]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	4a3f      	ldr	r2, [pc, #252]	; (800142c <GetResponseFromDestination+0x264>)
 8001330:	493f      	ldr	r1, [pc, #252]	; (8001430 <GetResponseFromDestination+0x268>)
 8001332:	f006 fb23 	bl	800797c <siprintf>
		if (error_code == HAL_SPI_ERROR_NONE) {
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d112      	bne.n	8001362 <GetResponseFromDestination+0x19a>
			*answer = SPI_INTERFACE_RESPONSE[address % SPI_MAX_DEVICES];
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	4a37      	ldr	r2, [pc, #220]	; (8001420 <GetResponseFromDestination+0x258>)
 8001344:	5cd2      	ldrb	r2, [r2, r3]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	701a      	strb	r2, [r3, #0]
			sprintf(SECOND_ROW_LCD, "0x%x",
 800134a:	4b31      	ldr	r3, [pc, #196]	; (8001410 <GetResponseFromDestination+0x248>)
 800134c:	6818      	ldr	r0, [r3, #0]
					SPI_INTERFACE_RESPONSE[address % SPI_MAX_DEVICES]);
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	4a32      	ldr	r2, [pc, #200]	; (8001420 <GetResponseFromDestination+0x258>)
 8001356:	5cd3      	ldrb	r3, [r2, r3]
			sprintf(SECOND_ROW_LCD, "0x%x",
 8001358:	461a      	mov	r2, r3
 800135a:	492e      	ldr	r1, [pc, #184]	; (8001414 <GetResponseFromDestination+0x24c>)
 800135c:	f006 fb0e 	bl	800797c <siprintf>
		} else {
			*answer = error_code;
			sprintf(SECOND_ROW_LCD, "%s:0x%x", "Error code", error_code);
		}
		break;
 8001360:	e21c      	b.n	800179c <GetResponseFromDestination+0x5d4>
			*answer = error_code;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	701a      	strb	r2, [r3, #0]
			sprintf(SECOND_ROW_LCD, "%s:0x%x", "Error code", error_code);
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <GetResponseFromDestination+0x248>)
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	4a2a      	ldr	r2, [pc, #168]	; (8001418 <GetResponseFromDestination+0x250>)
 8001370:	492a      	ldr	r1, [pc, #168]	; (800141c <GetResponseFromDestination+0x254>)
 8001372:	f006 fb03 	bl	800797c <siprintf>
		break;
 8001376:	e211      	b.n	800179c <GetResponseFromDestination+0x5d4>
	case INTERFACE_I2C:
		HAL_I2C_Master_Receive(&hi2c1, (address % I2C_MAX_DEVICES) << 1,
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	b29b      	uxth	r3, r3
 800137e:	f003 031e 	and.w	r3, r3, #30
 8001382:	b299      	uxth	r1, r3
				&I2C_INTERFACE_RESPONSE[address % I2C_MAX_DEVICES],
 8001384:	79bb      	ldrb	r3, [r7, #6]
 8001386:	f003 030f 	and.w	r3, r3, #15
		HAL_I2C_Master_Receive(&hi2c1, (address % I2C_MAX_DEVICES) << 1,
 800138a:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <GetResponseFromDestination+0x26c>)
 800138c:	441a      	add	r2, r3
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2301      	movs	r3, #1
 8001396:	4828      	ldr	r0, [pc, #160]	; (8001438 <GetResponseFromDestination+0x270>)
 8001398:	f001 fba8 	bl	8002aec <HAL_I2C_Master_Receive>
				sizeof(I2C_INTERFACE_RESPONSE[address % I2C_MAX_DEVICES]),
				HAL_MAX_DELAY);

		error_code = HAL_I2C_GetError(&hi2c1);
 800139c:	4826      	ldr	r0, [pc, #152]	; (8001438 <GetResponseFromDestination+0x270>)
 800139e:	f002 f825 	bl	80033ec <HAL_I2C_GetError>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]

		sprintf(FIRST_ROW_LCD, "%s(%d)", "MT<-I2C",
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <GetResponseFromDestination+0x240>)
 80013a8:	6818      	ldr	r0, [r3, #0]
				(address % I2C_MAX_DEVICES) << 1);
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	005b      	lsls	r3, r3, #1
		sprintf(FIRST_ROW_LCD, "%s(%d)", "MT<-I2C",
 80013ae:	f003 031e 	and.w	r3, r3, #30
 80013b2:	4a22      	ldr	r2, [pc, #136]	; (800143c <GetResponseFromDestination+0x274>)
 80013b4:	491e      	ldr	r1, [pc, #120]	; (8001430 <GetResponseFromDestination+0x268>)
 80013b6:	f006 fae1 	bl	800797c <siprintf>
		if (error_code == HAL_I2C_ERROR_NONE) {
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d112      	bne.n	80013e6 <GetResponseFromDestination+0x21e>
			*answer = I2C_INTERFACE_RESPONSE[address % I2C_MAX_DEVICES];
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <GetResponseFromDestination+0x26c>)
 80013c8:	5cd2      	ldrb	r2, [r2, r3]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	701a      	strb	r2, [r3, #0]
			sprintf(SECOND_ROW_LCD, "0x%x",
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <GetResponseFromDestination+0x248>)
 80013d0:	6818      	ldr	r0, [r3, #0]
					I2C_INTERFACE_RESPONSE[address % I2C_MAX_DEVICES]);
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	4a16      	ldr	r2, [pc, #88]	; (8001434 <GetResponseFromDestination+0x26c>)
 80013da:	5cd3      	ldrb	r3, [r2, r3]
			sprintf(SECOND_ROW_LCD, "0x%x",
 80013dc:	461a      	mov	r2, r3
 80013de:	490d      	ldr	r1, [pc, #52]	; (8001414 <GetResponseFromDestination+0x24c>)
 80013e0:	f006 facc 	bl	800797c <siprintf>
		} else {
			*answer = error_code;
			sprintf(SECOND_ROW_LCD, "%s:0x%x", "Error code", error_code);
		}
		break;
 80013e4:	e1da      	b.n	800179c <GetResponseFromDestination+0x5d4>
			*answer = error_code;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	701a      	strb	r2, [r3, #0]
			sprintf(SECOND_ROW_LCD, "%s:0x%x", "Error code", error_code);
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <GetResponseFromDestination+0x248>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <GetResponseFromDestination+0x250>)
 80013f4:	4909      	ldr	r1, [pc, #36]	; (800141c <GetResponseFromDestination+0x254>)
 80013f6:	f006 fac1 	bl	800797c <siprintf>
		break;
 80013fa:	e1cf      	b.n	800179c <GetResponseFromDestination+0x5d4>
 80013fc:	20000228 	.word	0x20000228
 8001400:	20000184 	.word	0x20000184
 8001404:	20000210 	.word	0x20000210
 8001408:	20000004 	.word	0x20000004
 800140c:	08008358 	.word	0x08008358
 8001410:	20000008 	.word	0x20000008
 8001414:	08008304 	.word	0x08008304
 8001418:	08008364 	.word	0x08008364
 800141c:	08008370 	.word	0x08008370
 8001420:	20000224 	.word	0x20000224
 8001424:	2000012c 	.word	0x2000012c
 8001428:	40020c00 	.word	0x40020c00
 800142c:	08008378 	.word	0x08008378
 8001430:	08008314 	.word	0x08008314
 8001434:	20000214 	.word	0x20000214
 8001438:	200000d8 	.word	0x200000d8
 800143c:	08008380 	.word	0x08008380
	case INTERFACE_GPIOA:
		*answer = 0;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	781c      	ldrb	r4, [r3, #0]
				| (HAL_GPIO_ReadPin(GPIO_A0_GPIO_Port, GPIO_A0_Pin) << 0);
 800144a:	2101      	movs	r1, #1
 800144c:	487f      	ldr	r0, [pc, #508]	; (800164c <GetResponseFromDestination+0x484>)
 800144e:	f001 f8d9 	bl	8002604 <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	4323      	orrs	r3, r4
 8001456:	b2da      	uxtb	r2, r3
		*answer = *answer
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_A1_GPIO_Port, GPIO_A1_Pin) << 1);
 8001462:	2102      	movs	r1, #2
 8001464:	4879      	ldr	r0, [pc, #484]	; (800164c <GetResponseFromDestination+0x484>)
 8001466:	f001 f8cd 	bl	8002604 <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	b25b      	sxtb	r3, r3
 8001470:	4323      	orrs	r3, r4
 8001472:	b25b      	sxtb	r3, r3
 8001474:	b2da      	uxtb	r2, r3
		*answer = *answer
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_A2_GPIO_Port, GPIO_A2_Pin) << 2);
 8001480:	2104      	movs	r1, #4
 8001482:	4872      	ldr	r0, [pc, #456]	; (800164c <GetResponseFromDestination+0x484>)
 8001484:	f001 f8be 	bl	8002604 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	b25b      	sxtb	r3, r3
 800148e:	4323      	orrs	r3, r4
 8001490:	b25b      	sxtb	r3, r3
 8001492:	b2da      	uxtb	r2, r3
		*answer = *answer
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_A3_GPIO_Port, GPIO_A3_Pin) << 3);
 800149e:	2108      	movs	r1, #8
 80014a0:	486a      	ldr	r0, [pc, #424]	; (800164c <GetResponseFromDestination+0x484>)
 80014a2:	f001 f8af 	bl	8002604 <HAL_GPIO_ReadPin>
 80014a6:	4603      	mov	r3, r0
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	4323      	orrs	r3, r4
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	b2da      	uxtb	r2, r3
		*answer = *answer
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_A4_GPIO_Port, GPIO_A4_Pin) << 4);
 80014bc:	2110      	movs	r1, #16
 80014be:	4863      	ldr	r0, [pc, #396]	; (800164c <GetResponseFromDestination+0x484>)
 80014c0:	f001 f8a0 	bl	8002604 <HAL_GPIO_ReadPin>
 80014c4:	4603      	mov	r3, r0
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	4323      	orrs	r3, r4
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	b2da      	uxtb	r2, r3
		*answer = *answer
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_A5_GPIO_Port, GPIO_A5_Pin) << 5);
 80014da:	2120      	movs	r1, #32
 80014dc:	485b      	ldr	r0, [pc, #364]	; (800164c <GetResponseFromDestination+0x484>)
 80014de:	f001 f891 	bl	8002604 <HAL_GPIO_ReadPin>
 80014e2:	4603      	mov	r3, r0
 80014e4:	015b      	lsls	r3, r3, #5
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	4323      	orrs	r3, r4
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	b2da      	uxtb	r2, r3
		*answer = *answer
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_A6_GPIO_Port, GPIO_A6_Pin) << 6);
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	4854      	ldr	r0, [pc, #336]	; (800164c <GetResponseFromDestination+0x484>)
 80014fc:	f001 f882 	bl	8002604 <HAL_GPIO_ReadPin>
 8001500:	4603      	mov	r3, r0
 8001502:	019b      	lsls	r3, r3, #6
 8001504:	b25b      	sxtb	r3, r3
 8001506:	4323      	orrs	r3, r4
 8001508:	b25b      	sxtb	r3, r3
 800150a:	b2da      	uxtb	r2, r3
		*answer = *answer
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_A7_GPIO_Port, GPIO_A7_Pin) << 7);
 8001516:	2180      	movs	r1, #128	; 0x80
 8001518:	484c      	ldr	r0, [pc, #304]	; (800164c <GetResponseFromDestination+0x484>)
 800151a:	f001 f873 	bl	8002604 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	01db      	lsls	r3, r3, #7
 8001522:	b25b      	sxtb	r3, r3
 8001524:	4323      	orrs	r3, r4
 8001526:	b25b      	sxtb	r3, r3
 8001528:	b2da      	uxtb	r2, r3
		*answer = *answer
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	701a      	strb	r2, [r3, #0]

		FIRST_ROW_LCD = "MT<-GPIOA";
 800152e:	4b48      	ldr	r3, [pc, #288]	; (8001650 <GetResponseFromDestination+0x488>)
 8001530:	4a48      	ldr	r2, [pc, #288]	; (8001654 <GetResponseFromDestination+0x48c>)
 8001532:	601a      	str	r2, [r3, #0]
		sprintf(SECOND_ROW_LCD, "0x%x", *answer);
 8001534:	4b48      	ldr	r3, [pc, #288]	; (8001658 <GetResponseFromDestination+0x490>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4947      	ldr	r1, [pc, #284]	; (800165c <GetResponseFromDestination+0x494>)
 8001540:	f006 fa1c 	bl	800797c <siprintf>
		break;
 8001544:	e12a      	b.n	800179c <GetResponseFromDestination+0x5d4>
	case INTERFACE_GPIOC:
		*answer = 0;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	781c      	ldrb	r4, [r3, #0]
				| (HAL_GPIO_ReadPin(GPIO_C0_GPIO_Port, GPIO_C0_Pin) << 0);
 8001550:	2101      	movs	r1, #1
 8001552:	4843      	ldr	r0, [pc, #268]	; (8001660 <GetResponseFromDestination+0x498>)
 8001554:	f001 f856 	bl	8002604 <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	4323      	orrs	r3, r4
 800155c:	b2da      	uxtb	r2, r3
		*answer = *answer
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_C1_GPIO_Port, GPIO_C1_Pin) << 1);
 8001568:	2102      	movs	r1, #2
 800156a:	483d      	ldr	r0, [pc, #244]	; (8001660 <GetResponseFromDestination+0x498>)
 800156c:	f001 f84a 	bl	8002604 <HAL_GPIO_ReadPin>
 8001570:	4603      	mov	r3, r0
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	b25b      	sxtb	r3, r3
 8001576:	4323      	orrs	r3, r4
 8001578:	b25b      	sxtb	r3, r3
 800157a:	b2da      	uxtb	r2, r3
		*answer = *answer
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_C2_GPIO_Port, GPIO_C2_Pin) << 2);
 8001586:	2104      	movs	r1, #4
 8001588:	4835      	ldr	r0, [pc, #212]	; (8001660 <GetResponseFromDestination+0x498>)
 800158a:	f001 f83b 	bl	8002604 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	b25b      	sxtb	r3, r3
 8001594:	4323      	orrs	r3, r4
 8001596:	b25b      	sxtb	r3, r3
 8001598:	b2da      	uxtb	r2, r3
		*answer = *answer
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_C3_GPIO_Port, GPIO_C3_Pin) << 3);
 80015a4:	2108      	movs	r1, #8
 80015a6:	482e      	ldr	r0, [pc, #184]	; (8001660 <GetResponseFromDestination+0x498>)
 80015a8:	f001 f82c 	bl	8002604 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	4323      	orrs	r3, r4
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	b2da      	uxtb	r2, r3
		*answer = *answer
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_C4_GPIO_Port, GPIO_C4_Pin) << 4);
 80015c2:	2110      	movs	r1, #16
 80015c4:	4826      	ldr	r0, [pc, #152]	; (8001660 <GetResponseFromDestination+0x498>)
 80015c6:	f001 f81d 	bl	8002604 <HAL_GPIO_ReadPin>
 80015ca:	4603      	mov	r3, r0
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4323      	orrs	r3, r4
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2da      	uxtb	r2, r3
		*answer = *answer
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_C5_GPIO_Port, GPIO_C5_Pin) << 5);
 80015e0:	2120      	movs	r1, #32
 80015e2:	481f      	ldr	r0, [pc, #124]	; (8001660 <GetResponseFromDestination+0x498>)
 80015e4:	f001 f80e 	bl	8002604 <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	015b      	lsls	r3, r3, #5
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	4323      	orrs	r3, r4
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	b2da      	uxtb	r2, r3
		*answer = *answer
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_C6_GPIO_Port, GPIO_C6_Pin) << 6);
 80015fe:	2140      	movs	r1, #64	; 0x40
 8001600:	4817      	ldr	r0, [pc, #92]	; (8001660 <GetResponseFromDestination+0x498>)
 8001602:	f000 ffff 	bl	8002604 <HAL_GPIO_ReadPin>
 8001606:	4603      	mov	r3, r0
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	b25b      	sxtb	r3, r3
 800160c:	4323      	orrs	r3, r4
 800160e:	b25b      	sxtb	r3, r3
 8001610:	b2da      	uxtb	r2, r3
		*answer = *answer
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_C7_GPIO_Port, GPIO_C7_Pin) << 7);
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	4810      	ldr	r0, [pc, #64]	; (8001660 <GetResponseFromDestination+0x498>)
 8001620:	f000 fff0 	bl	8002604 <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	01db      	lsls	r3, r3, #7
 8001628:	b25b      	sxtb	r3, r3
 800162a:	4323      	orrs	r3, r4
 800162c:	b25b      	sxtb	r3, r3
 800162e:	b2da      	uxtb	r2, r3
		*answer = *answer
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	701a      	strb	r2, [r3, #0]

		FIRST_ROW_LCD = "MT<-GPIOC";
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <GetResponseFromDestination+0x488>)
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <GetResponseFromDestination+0x49c>)
 8001638:	601a      	str	r2, [r3, #0]
		sprintf(SECOND_ROW_LCD, "0x%x", *answer);
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <GetResponseFromDestination+0x490>)
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	4905      	ldr	r1, [pc, #20]	; (800165c <GetResponseFromDestination+0x494>)
 8001646:	f006 f999 	bl	800797c <siprintf>
		break;
 800164a:	e0a7      	b.n	800179c <GetResponseFromDestination+0x5d4>
 800164c:	40020000 	.word	0x40020000
 8001650:	20000004 	.word	0x20000004
 8001654:	08008388 	.word	0x08008388
 8001658:	20000008 	.word	0x20000008
 800165c:	08008304 	.word	0x08008304
 8001660:	40020800 	.word	0x40020800
 8001664:	08008394 	.word	0x08008394
	case INTERFACE_GPIOE:
		*answer = 0;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	781c      	ldrb	r4, [r3, #0]
				| (HAL_GPIO_ReadPin(GPIO_E0_GPIO_Port, GPIO_E0_Pin) << 0);
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	484b      	ldr	r0, [pc, #300]	; (80017a4 <GetResponseFromDestination+0x5dc>)
 8001676:	f000 ffc5 	bl	8002604 <HAL_GPIO_ReadPin>
 800167a:	4603      	mov	r3, r0
 800167c:	4323      	orrs	r3, r4
 800167e:	b2da      	uxtb	r2, r3
		*answer = *answer
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_E1_GPIO_Port, GPIO_E1_Pin) << 1);
 800168a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168e:	4845      	ldr	r0, [pc, #276]	; (80017a4 <GetResponseFromDestination+0x5dc>)
 8001690:	f000 ffb8 	bl	8002604 <HAL_GPIO_ReadPin>
 8001694:	4603      	mov	r3, r0
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	b25b      	sxtb	r3, r3
 800169a:	4323      	orrs	r3, r4
 800169c:	b25b      	sxtb	r3, r3
 800169e:	b2da      	uxtb	r2, r3
		*answer = *answer
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_E2_GPIO_Port, GPIO_E2_Pin) << 2);
 80016aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ae:	483d      	ldr	r0, [pc, #244]	; (80017a4 <GetResponseFromDestination+0x5dc>)
 80016b0:	f000 ffa8 	bl	8002604 <HAL_GPIO_ReadPin>
 80016b4:	4603      	mov	r3, r0
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	4323      	orrs	r3, r4
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	b2da      	uxtb	r2, r3
		*answer = *answer
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_E3_GPIO_Port, GPIO_E3_Pin) << 3);
 80016ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ce:	4835      	ldr	r0, [pc, #212]	; (80017a4 <GetResponseFromDestination+0x5dc>)
 80016d0:	f000 ff98 	bl	8002604 <HAL_GPIO_ReadPin>
 80016d4:	4603      	mov	r3, r0
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	4323      	orrs	r3, r4
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	b2da      	uxtb	r2, r3
		*answer = *answer
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_E4_GPIO_Port, GPIO_E4_Pin) << 4);
 80016ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ee:	482d      	ldr	r0, [pc, #180]	; (80017a4 <GetResponseFromDestination+0x5dc>)
 80016f0:	f000 ff88 	bl	8002604 <HAL_GPIO_ReadPin>
 80016f4:	4603      	mov	r3, r0
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	4323      	orrs	r3, r4
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	b2da      	uxtb	r2, r3
		*answer = *answer
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_E5_GPIO_Port, GPIO_E5_Pin) << 5);
 800170a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170e:	4825      	ldr	r0, [pc, #148]	; (80017a4 <GetResponseFromDestination+0x5dc>)
 8001710:	f000 ff78 	bl	8002604 <HAL_GPIO_ReadPin>
 8001714:	4603      	mov	r3, r0
 8001716:	015b      	lsls	r3, r3, #5
 8001718:	b25b      	sxtb	r3, r3
 800171a:	4323      	orrs	r3, r4
 800171c:	b25b      	sxtb	r3, r3
 800171e:	b2da      	uxtb	r2, r3
		*answer = *answer
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_E6_GPIO_Port, GPIO_E6_Pin) << 6);
 800172a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172e:	481d      	ldr	r0, [pc, #116]	; (80017a4 <GetResponseFromDestination+0x5dc>)
 8001730:	f000 ff68 	bl	8002604 <HAL_GPIO_ReadPin>
 8001734:	4603      	mov	r3, r0
 8001736:	019b      	lsls	r3, r3, #6
 8001738:	b25b      	sxtb	r3, r3
 800173a:	4323      	orrs	r3, r4
 800173c:	b25b      	sxtb	r3, r3
 800173e:	b2da      	uxtb	r2, r3
		*answer = *answer
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	701a      	strb	r2, [r3, #0]
		*answer = *answer
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b25c      	sxtb	r4, r3
				| (HAL_GPIO_ReadPin(GPIO_E7_GPIO_Port, GPIO_E7_Pin) << 7);
 800174a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800174e:	4815      	ldr	r0, [pc, #84]	; (80017a4 <GetResponseFromDestination+0x5dc>)
 8001750:	f000 ff58 	bl	8002604 <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	01db      	lsls	r3, r3, #7
 8001758:	b25b      	sxtb	r3, r3
 800175a:	4323      	orrs	r3, r4
 800175c:	b25b      	sxtb	r3, r3
 800175e:	b2da      	uxtb	r2, r3
		*answer = *answer
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	701a      	strb	r2, [r3, #0]

		FIRST_ROW_LCD = "MT<-GPIOE";
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <GetResponseFromDestination+0x5e0>)
 8001766:	4a11      	ldr	r2, [pc, #68]	; (80017ac <GetResponseFromDestination+0x5e4>)
 8001768:	601a      	str	r2, [r3, #0]
		sprintf(SECOND_ROW_LCD, "0x%x", *answer);
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <GetResponseFromDestination+0x5e8>)
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	490f      	ldr	r1, [pc, #60]	; (80017b4 <GetResponseFromDestination+0x5ec>)
 8001776:	f006 f901 	bl	800797c <siprintf>
		break;
 800177a:	e00f      	b.n	800179c <GetResponseFromDestination+0x5d4>
	case CTRL_REG:
		*answer = CONTROL_REGISTER;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <GetResponseFromDestination+0x5f0>)
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	701a      	strb	r2, [r3, #0]
		FIRST_ROW_LCD = "MT<-CTRL REG";
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <GetResponseFromDestination+0x5e0>)
 8001786:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <GetResponseFromDestination+0x5f4>)
 8001788:	601a      	str	r2, [r3, #0]
		sprintf(SECOND_ROW_LCD, "0x%x", *answer);
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <GetResponseFromDestination+0x5e8>)
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <GetResponseFromDestination+0x5ec>)
 8001796:	f006 f8f1 	bl	800797c <siprintf>
		break;
 800179a:	bf00      	nop
	}

}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	20000004 	.word	0x20000004
 80017ac:	080083a0 	.word	0x080083a0
 80017b0:	20000008 	.word	0x20000008
 80017b4:	08008304 	.word	0x08008304
 80017b8:	20000229 	.word	0x20000229
 80017bc:	080083ac 	.word	0x080083ac

080017c0 <MtemuConnection>:

// Соединение с мтему
void MtemuConnection() {
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0

	uint8_t MTEMU_RESPONSE[18] = { "\x10TMWlcmToClbBddEP\x90" };
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <MtemuConnection+0x34>)
 80017c8:	1d3c      	adds	r4, r7, #4
 80017ca:	461d      	mov	r5, r3
 80017cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d0:	682b      	ldr	r3, [r5, #0]
 80017d2:	8023      	strh	r3, [r4, #0]

	HAL_UART_Transmit(&huart2, MTEMU_RESPONSE, sizeof(MTEMU_RESPONSE),
 80017d4:	1d39      	adds	r1, r7, #4
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	2212      	movs	r2, #18
 80017dc:	4806      	ldr	r0, [pc, #24]	; (80017f8 <MtemuConnection+0x38>)
 80017de:	f004 ff02 	bl	80065e6 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	HAL_UART_Receive_IT(&huart2, MTEMU_REQUEST, sizeof(MTEMU_REQUEST));
 80017e2:	2204      	movs	r2, #4
 80017e4:	4905      	ldr	r1, [pc, #20]	; (80017fc <MtemuConnection+0x3c>)
 80017e6:	4804      	ldr	r0, [pc, #16]	; (80017f8 <MtemuConnection+0x38>)
 80017e8:	f005 f831 	bl	800684e <HAL_UART_Receive_IT>
}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bdb0      	pop	{r4, r5, r7, pc}
 80017f4:	080083bc 	.word	0x080083bc
 80017f8:	200001c8 	.word	0x200001c8
 80017fc:	2000020c 	.word	0x2000020c

08001800 <SendMtemuResponse>:

// Мтему хочет, чтобы мы ему выдали данные
void SendMtemuResponse() {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	uint8_t MTEMU_RESPONSE[4] = { 2, MTEMU_REQUEST[1], '\x44', '\x82' };
 8001806:	2302      	movs	r3, #2
 8001808:	703b      	strb	r3, [r7, #0]
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <SendMtemuResponse+0x68>)
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	707b      	strb	r3, [r7, #1]
 8001810:	2344      	movs	r3, #68	; 0x44
 8001812:	70bb      	strb	r3, [r7, #2]
 8001814:	2382      	movs	r3, #130	; 0x82
 8001816:	70fb      	strb	r3, [r7, #3]

	// 4 старших бита - адрес девайса на интерфейсе, 4 младших бита - интерфейс
	AVAILABLE_DESTINATIONS dest = GetDestinationByPort(
			MTEMU_REQUEST[1] & 0b00001111);
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <SendMtemuResponse+0x68>)
 800181a:	785b      	ldrb	r3, [r3, #1]
	AVAILABLE_DESTINATIONS dest = GetDestinationByPort(
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	b2db      	uxtb	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fa52 	bl	8000ccc <GetDestinationByPort>
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
	uint8_t address = (MTEMU_REQUEST[1] >> 4) & 0b00001111;
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <SendMtemuResponse+0x68>)
 800182e:	785b      	ldrb	r3, [r3, #1]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	71bb      	strb	r3, [r7, #6]

	if (dest != INTERFACE_UNKNOWN) {
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	2b07      	cmp	r3, #7
 8001838:	d006      	beq.n	8001848 <SendMtemuResponse+0x48>
		GetResponseFromDestination(dest, address, &MTEMU_RESPONSE[2]);
 800183a:	463b      	mov	r3, r7
 800183c:	1c9a      	adds	r2, r3, #2
 800183e:	79b9      	ldrb	r1, [r7, #6]
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fcc0 	bl	80011c8 <GetResponseFromDestination>
	} else {
		// Ошибка - нераспознанный интерфейс
	}

	HAL_UART_Transmit(&huart2, MTEMU_RESPONSE, sizeof(MTEMU_RESPONSE),
 8001848:	4639      	mov	r1, r7
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	2204      	movs	r2, #4
 8001850:	4806      	ldr	r0, [pc, #24]	; (800186c <SendMtemuResponse+0x6c>)
 8001852:	f004 fec8 	bl	80065e6 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	HAL_UART_Receive_IT(&huart2, MTEMU_REQUEST, sizeof(MTEMU_REQUEST));
 8001856:	2204      	movs	r2, #4
 8001858:	4903      	ldr	r1, [pc, #12]	; (8001868 <SendMtemuResponse+0x68>)
 800185a:	4804      	ldr	r0, [pc, #16]	; (800186c <SendMtemuResponse+0x6c>)
 800185c:	f004 fff7 	bl	800684e <HAL_UART_Receive_IT>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000020c 	.word	0x2000020c
 800186c:	200001c8 	.word	0x200001c8

08001870 <GetMtemuRequest>:

// Мтему хочет отослать нам данные
void GetMtemuRequest() {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
	// 4 старших бита - адрес девайса на интерфейса, 4 младших бита - интерфейс
	AVAILABLE_DESTINATIONS dest = GetDestinationByPort(
			MTEMU_REQUEST[1] & 0b00001111);
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <GetMtemuRequest+0x5c>)
 8001878:	785b      	ldrb	r3, [r3, #1]
	AVAILABLE_DESTINATIONS dest = GetDestinationByPort(
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	b2db      	uxtb	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fa23 	bl	8000ccc <GetDestinationByPort>
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	uint8_t address = (MTEMU_REQUEST[1] >> 4) & 0b00001111;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <GetMtemuRequest+0x5c>)
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	71bb      	strb	r3, [r7, #6]

	if (dest != INTERFACE_UNKNOWN) {
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b07      	cmp	r3, #7
 8001896:	d006      	beq.n	80018a6 <GetMtemuRequest+0x36>
		SendRequestToDestination(dest, address, MTEMU_REQUEST[2]);
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <GetMtemuRequest+0x5c>)
 800189a:	789a      	ldrb	r2, [r3, #2]
 800189c:	79b9      	ldrb	r1, [r7, #6]
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fa65 	bl	8000d70 <SendRequestToDestination>
	} else {
		// Ошибка - нераспознанный интерфейс
	}

	uint8_t MTEMU_RESPONSE[2] = { '\x00', '\x80' };
 80018a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018aa:	80bb      	strh	r3, [r7, #4]

	HAL_UART_Transmit(&huart2, MTEMU_RESPONSE, sizeof(MTEMU_RESPONSE),
 80018ac:	1d39      	adds	r1, r7, #4
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	2202      	movs	r2, #2
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <GetMtemuRequest+0x60>)
 80018b6:	f004 fe96 	bl	80065e6 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	HAL_UART_Receive_IT(&huart2, MTEMU_REQUEST, sizeof(MTEMU_REQUEST));
 80018ba:	2204      	movs	r2, #4
 80018bc:	4903      	ldr	r1, [pc, #12]	; (80018cc <GetMtemuRequest+0x5c>)
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <GetMtemuRequest+0x60>)
 80018c0:	f004 ffc5 	bl	800684e <HAL_UART_Receive_IT>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000020c 	.word	0x2000020c
 80018d0:	200001c8 	.word	0x200001c8

080018d4 <MtemuUartHandler>:

void MtemuUartHandler() {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	if (MTEMU_REQUEST[0] == 98 && MTEMU_REQUEST[1] == 0 && MTEMU_REQUEST[2] == 0
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <MtemuUartHandler+0x54>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b62      	cmp	r3, #98	; 0x62
 80018de:	d10d      	bne.n	80018fc <MtemuUartHandler+0x28>
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MtemuUartHandler+0x54>)
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <MtemuUartHandler+0x28>
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MtemuUartHandler+0x54>)
 80018ea:	789b      	ldrb	r3, [r3, #2]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <MtemuUartHandler+0x28>
			&& MTEMU_REQUEST[3] == 226) {
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <MtemuUartHandler+0x54>)
 80018f2:	78db      	ldrb	r3, [r3, #3]
 80018f4:	2be2      	cmp	r3, #226	; 0xe2
 80018f6:	d101      	bne.n	80018fc <MtemuUartHandler+0x28>
		// Соединение с Mtemu
		MtemuConnection();
 80018f8:	f7ff ff62 	bl	80017c0 <MtemuConnection>

	}
	if (MTEMU_REQUEST[0] == 34 && MTEMU_REQUEST[3] == 162) {
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <MtemuUartHandler+0x54>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b22      	cmp	r3, #34	; 0x22
 8001902:	d105      	bne.n	8001910 <MtemuUartHandler+0x3c>
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MtemuUartHandler+0x54>)
 8001906:	78db      	ldrb	r3, [r3, #3]
 8001908:	2ba2      	cmp	r3, #162	; 0xa2
 800190a:	d101      	bne.n	8001910 <MtemuUartHandler+0x3c>
		// Mtemu запросил ответ
		SendMtemuResponse();
 800190c:	f7ff ff78 	bl	8001800 <SendMtemuResponse>
	}
	if (MTEMU_REQUEST[0] == 66 && MTEMU_REQUEST[3] == 194) {
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <MtemuUartHandler+0x54>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b42      	cmp	r3, #66	; 0x42
 8001916:	d105      	bne.n	8001924 <MtemuUartHandler+0x50>
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <MtemuUartHandler+0x54>)
 800191a:	78db      	ldrb	r3, [r3, #3]
 800191c:	2bc2      	cmp	r3, #194	; 0xc2
 800191e:	d101      	bne.n	8001924 <MtemuUartHandler+0x50>
		// Mtemu плюнул информацию
		GetMtemuRequest();
 8001920:	f7ff ffa6 	bl	8001870 <GetMtemuRequest>
	}

}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000020c 	.word	0x2000020c

0800192c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a06      	ldr	r2, [pc, #24]	; (8001950 <HAL_UART_RxCpltCallback+0x24>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d102      	bne.n	8001942 <HAL_UART_RxCpltCallback+0x16>
		MtemuUartHandler();
 800193c:	f7ff ffca 	bl	80018d4 <MtemuUartHandler>
	} else {
		UART_INTERFACE_DATA_RECIEVED = 1;
	}

}
 8001940:	e002      	b.n	8001948 <HAL_UART_RxCpltCallback+0x1c>
		UART_INTERFACE_DATA_RECIEVED = 1;
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <HAL_UART_RxCpltCallback+0x28>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200001c8 	.word	0x200001c8
 8001954:	20000228 	.word	0x20000228

08001958 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195c:	b672      	cpsid	i
}
 800195e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001960:	e7fe      	b.n	8001960 <Error_Handler+0x8>
	...

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <HAL_MspInit+0x4c>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_MspInit+0x4c>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <HAL_MspInit+0x4c>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_MspInit+0x4c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800

080019b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a4a      	ldr	r2, [pc, #296]	; (8001afc <HAL_I2C_MspInit+0x148>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d13d      	bne.n	8001a52 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a48      	ldr	r2, [pc, #288]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b46      	ldr	r3, [pc, #280]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f8:	2312      	movs	r3, #18
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a04:	2304      	movs	r3, #4
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	483d      	ldr	r0, [pc, #244]	; (8001b04 <HAL_I2C_MspInit+0x150>)
 8001a10:	f000 fc74 	bl	80022fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a38      	ldr	r2, [pc, #224]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001a1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	201f      	movs	r0, #31
 8001a36:	f000 fb8a 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a3a:	201f      	movs	r0, #31
 8001a3c:	f000 fba3 	bl	8002186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2020      	movs	r0, #32
 8001a46:	f000 fb82 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a4a:	2020      	movs	r0, #32
 8001a4c:	f000 fb9b 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a50:	e050      	b.n	8001af4 <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C3)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a2c      	ldr	r2, [pc, #176]	; (8001b08 <HAL_I2C_MspInit+0x154>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d14b      	bne.n	8001af4 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	4a26      	ldr	r2, [pc, #152]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	4a1f      	ldr	r2, [pc, #124]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	6313      	str	r3, [r2, #48]	; 0x30
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9a:	2312      	movs	r3, #18
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4816      	ldr	r0, [pc, #88]	; (8001b0c <HAL_I2C_MspInit+0x158>)
 8001ab2:	f000 fc23 	bl	80022fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001abc:	2312      	movs	r3, #18
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480f      	ldr	r0, [pc, #60]	; (8001b10 <HAL_I2C_MspInit+0x15c>)
 8001ad4:	f000 fc12 	bl	80022fc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001ae2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_I2C_MspInit+0x14c>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
}
 8001af4:	bf00      	nop
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40005400 	.word	0x40005400
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020400 	.word	0x40020400
 8001b08:	40005c00 	.word	0x40005c00
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40020800 	.word	0x40020800

08001b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <HAL_SPI_MspInit+0x94>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d133      	bne.n	8001b9e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_SPI_MspInit+0x98>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a1b      	ldr	r2, [pc, #108]	; (8001bac <HAL_SPI_MspInit+0x98>)
 8001b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_SPI_MspInit+0x98>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_SPI_MspInit+0x98>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a14      	ldr	r2, [pc, #80]	; (8001bac <HAL_SPI_MspInit+0x98>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_SPI_MspInit+0x98>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_5;
 8001b6e:	2338      	movs	r3, #56	; 0x38
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b7e:	2305      	movs	r3, #5
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <HAL_SPI_MspInit+0x9c>)
 8001b8a:	f000 fbb7 	bl	80022fc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	2023      	movs	r0, #35	; 0x23
 8001b94:	f000 fadb 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b98:	2023      	movs	r0, #35	; 0x23
 8001b9a:	f000 faf4 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	; 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40013000 	.word	0x40013000
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08c      	sub	sp, #48	; 0x30
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a3a      	ldr	r2, [pc, #232]	; (8001cbc <HAL_UART_MspInit+0x108>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d134      	bne.n	8001c40 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a38      	ldr	r2, [pc, #224]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a31      	ldr	r2, [pc, #196]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001c0e:	23c0      	movs	r3, #192	; 0xc0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c1e:	2307      	movs	r3, #7
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4826      	ldr	r0, [pc, #152]	; (8001cc4 <HAL_UART_MspInit+0x110>)
 8001c2a:	f000 fb67 	bl	80022fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	2025      	movs	r0, #37	; 0x25
 8001c34:	f000 fa8b 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c38:	2025      	movs	r0, #37	; 0x25
 8001c3a:	f000 faa4 	bl	8002186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c3e:	e038      	b.n	8001cb2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_UART_MspInit+0x114>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d133      	bne.n	8001cb2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_UART_MspInit+0x10c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c82:	2360      	movs	r3, #96	; 0x60
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c92:	2307      	movs	r3, #7
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480b      	ldr	r0, [pc, #44]	; (8001ccc <HAL_UART_MspInit+0x118>)
 8001c9e:	f000 fb2d 	bl	80022fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	2026      	movs	r0, #38	; 0x26
 8001ca8:	f000 fa51 	bl	800214e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cac:	2026      	movs	r0, #38	; 0x26
 8001cae:	f000 fa6a 	bl	8002186 <HAL_NVIC_EnableIRQ>
}
 8001cb2:	bf00      	nop
 8001cb4:	3730      	adds	r7, #48	; 0x30
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40011000 	.word	0x40011000
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40004400 	.word	0x40004400
 8001ccc:	40020c00 	.word	0x40020c00

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <UsageFault_Handler+0x4>

08001cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1c:	f000 f8f8 	bl	8001f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <I2C1_EV_IRQHandler+0x10>)
 8001d2a:	f001 f905 	bl	8002f38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200000d8 	.word	0x200000d8

08001d38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <I2C1_ER_IRQHandler+0x10>)
 8001d3e:	f001 fa4e 	bl	80031de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200000d8 	.word	0x200000d8

08001d4c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <SPI1_IRQHandler+0x10>)
 8001d52:	f004 f9ad 	bl	80060b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000012c 	.word	0x2000012c

08001d60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <USART1_IRQHandler+0x10>)
 8001d66:	f004 fe55 	bl	8006a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000184 	.word	0x20000184

08001d74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <USART2_IRQHandler+0x10>)
 8001d7a:	f004 fe4b 	bl	8006a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200001c8 	.word	0x200001c8

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f005 fe08 	bl	80079cc <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20018000 	.word	0x20018000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	2000022c 	.word	0x2000022c
 8001df0:	20000380 	.word	0x20000380

08001df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <SystemInit+0x20>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <SystemInit+0x20>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e1c:	480d      	ldr	r0, [pc, #52]	; (8001e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e1e:	490e      	ldr	r1, [pc, #56]	; (8001e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e20:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e34:	4c0b      	ldr	r4, [pc, #44]	; (8001e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e42:	f7ff ffd7 	bl	8001df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e46:	f005 fdc7 	bl	80079d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4a:	f7fe fcb5 	bl	80007b8 <main>
  bx  lr    
 8001e4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001e5c:	0800842c 	.word	0x0800842c
  ldr r2, =_sbss
 8001e60:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001e64:	2000037c 	.word	0x2000037c

08001e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC_IRQHandler>
	...

08001e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <HAL_Init+0x40>)
 8001e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <HAL_Init+0x40>)
 8001e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_Init+0x40>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_Init+0x40>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e94:	2003      	movs	r0, #3
 8001e96:	f000 f94f 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9a:	200f      	movs	r0, #15
 8001e9c:	f000 f808 	bl	8001eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea0:	f7ff fd60 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x54>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_InitTick+0x58>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f967 	bl	80021a2 <HAL_SYSTICK_Config>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00e      	b.n	8001efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b0f      	cmp	r3, #15
 8001ee2:	d80a      	bhi.n	8001efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f000 f92f 	bl	800214e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef0:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <HAL_InitTick+0x5c>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000000c 	.word	0x2000000c
 8001f08:	20000014 	.word	0x20000014
 8001f0c:	20000010 	.word	0x20000010

08001f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x20>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x24>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_IncTick+0x24>)
 8001f22:	6013      	str	r3, [r2, #0]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000014 	.word	0x20000014
 8001f34:	20000230 	.word	0x20000230

08001f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_GetTick+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000230 	.word	0x20000230

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff ffee 	bl	8001f38 <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffde 	bl	8001f38 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000014 	.word	0x20000014

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4907      	ldr	r1, [pc, #28]	; (8002034 <__NVIC_EnableIRQ+0x38>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
         );
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f7ff ff8e 	bl	8002038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff29 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff3e 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff8e 	bl	800208c <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5d 	bl	8002038 <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff31 	bl	8001ffc <__NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa2 	bl	80020f4 <SysTick_Config>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff feb6 	bl	8001f38 <HAL_GetTick>
 80021cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d008      	beq.n	80021ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e052      	b.n	8002292 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0216 	bic.w	r2, r2, #22
 80021fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800220a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <HAL_DMA_Abort+0x62>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0208 	bic.w	r2, r2, #8
 800222a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800223c:	e013      	b.n	8002266 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800223e:	f7ff fe7b 	bl	8001f38 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b05      	cmp	r3, #5
 800224a:	d90c      	bls.n	8002266 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2203      	movs	r2, #3
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e015      	b.n	8002292 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e4      	bne.n	800223e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	223f      	movs	r2, #63	; 0x3f
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d004      	beq.n	80022b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2280      	movs	r2, #128	; 0x80
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e00c      	b.n	80022d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2205      	movs	r2, #5
 80022bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ec:	b2db      	uxtb	r3, r3
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	e159      	b.n	80025cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	429a      	cmp	r2, r3
 8002332:	f040 8148 	bne.w	80025c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d005      	beq.n	800234e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234a:	2b02      	cmp	r3, #2
 800234c:	d130      	bne.n	80023b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	2203      	movs	r2, #3
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002384:	2201      	movs	r2, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 0201 	and.w	r2, r3, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d017      	beq.n	80023ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d123      	bne.n	8002440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	08da      	lsrs	r2, r3, #3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3208      	adds	r2, #8
 8002400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	08da      	lsrs	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3208      	adds	r2, #8
 800243a:	69b9      	ldr	r1, [r7, #24]
 800243c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0203 	and.w	r2, r3, #3
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80a2 	beq.w	80025c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <HAL_GPIO_Init+0x2e8>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a56      	ldr	r2, [pc, #344]	; (80025e4 <HAL_GPIO_Init+0x2e8>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b54      	ldr	r3, [pc, #336]	; (80025e4 <HAL_GPIO_Init+0x2e8>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249e:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_GPIO_Init+0x2ec>)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	220f      	movs	r2, #15
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a49      	ldr	r2, [pc, #292]	; (80025ec <HAL_GPIO_Init+0x2f0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d019      	beq.n	80024fe <HAL_GPIO_Init+0x202>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a48      	ldr	r2, [pc, #288]	; (80025f0 <HAL_GPIO_Init+0x2f4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_GPIO_Init+0x1fe>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a47      	ldr	r2, [pc, #284]	; (80025f4 <HAL_GPIO_Init+0x2f8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00d      	beq.n	80024f6 <HAL_GPIO_Init+0x1fa>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a46      	ldr	r2, [pc, #280]	; (80025f8 <HAL_GPIO_Init+0x2fc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <HAL_GPIO_Init+0x1f6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a45      	ldr	r2, [pc, #276]	; (80025fc <HAL_GPIO_Init+0x300>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_GPIO_Init+0x1f2>
 80024ea:	2304      	movs	r3, #4
 80024ec:	e008      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024ee:	2307      	movs	r3, #7
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024f2:	2303      	movs	r3, #3
 80024f4:	e004      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e002      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024fe:	2300      	movs	r3, #0
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	f002 0203 	and.w	r2, r2, #3
 8002506:	0092      	lsls	r2, r2, #2
 8002508:	4093      	lsls	r3, r2
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002510:	4935      	ldr	r1, [pc, #212]	; (80025e8 <HAL_GPIO_Init+0x2ec>)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3302      	adds	r3, #2
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251e:	4b38      	ldr	r3, [pc, #224]	; (8002600 <HAL_GPIO_Init+0x304>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002542:	4a2f      	ldr	r2, [pc, #188]	; (8002600 <HAL_GPIO_Init+0x304>)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002548:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <HAL_GPIO_Init+0x304>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800256c:	4a24      	ldr	r2, [pc, #144]	; (8002600 <HAL_GPIO_Init+0x304>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002572:	4b23      	ldr	r3, [pc, #140]	; (8002600 <HAL_GPIO_Init+0x304>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002596:	4a1a      	ldr	r2, [pc, #104]	; (8002600 <HAL_GPIO_Init+0x304>)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <HAL_GPIO_Init+0x304>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c0:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <HAL_GPIO_Init+0x304>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b0f      	cmp	r3, #15
 80025d0:	f67f aea2 	bls.w	8002318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40013800 	.word	0x40013800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	40021000 	.word	0x40021000
 8002600:	40013c00 	.word	0x40013c00

08002604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
 8002620:	e001      	b.n	8002626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002626:	7bfb      	ldrb	r3, [r7, #15]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
 8002640:	4613      	mov	r3, r2
 8002642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002644:	787b      	ldrb	r3, [r7, #1]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002650:	e003      	b.n	800265a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	041a      	lsls	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	619a      	str	r2, [r3, #24]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e12b      	b.n	80028d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff f990 	bl	80019b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2224      	movs	r2, #36	; 0x24
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026cc:	f003 f850 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 80026d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4a81      	ldr	r2, [pc, #516]	; (80028dc <HAL_I2C_Init+0x274>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d807      	bhi.n	80026ec <HAL_I2C_Init+0x84>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a80      	ldr	r2, [pc, #512]	; (80028e0 <HAL_I2C_Init+0x278>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	bf94      	ite	ls
 80026e4:	2301      	movls	r3, #1
 80026e6:	2300      	movhi	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e006      	b.n	80026fa <HAL_I2C_Init+0x92>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a7d      	ldr	r2, [pc, #500]	; (80028e4 <HAL_I2C_Init+0x27c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	bf94      	ite	ls
 80026f4:	2301      	movls	r3, #1
 80026f6:	2300      	movhi	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0e7      	b.n	80028d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4a78      	ldr	r2, [pc, #480]	; (80028e8 <HAL_I2C_Init+0x280>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0c9b      	lsrs	r3, r3, #18
 800270c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4a6a      	ldr	r2, [pc, #424]	; (80028dc <HAL_I2C_Init+0x274>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d802      	bhi.n	800273c <HAL_I2C_Init+0xd4>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3301      	adds	r3, #1
 800273a:	e009      	b.n	8002750 <HAL_I2C_Init+0xe8>
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002742:	fb02 f303 	mul.w	r3, r2, r3
 8002746:	4a69      	ldr	r2, [pc, #420]	; (80028ec <HAL_I2C_Init+0x284>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	3301      	adds	r3, #1
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	430b      	orrs	r3, r1
 8002756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002762:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	495c      	ldr	r1, [pc, #368]	; (80028dc <HAL_I2C_Init+0x274>)
 800276c:	428b      	cmp	r3, r1
 800276e:	d819      	bhi.n	80027a4 <HAL_I2C_Init+0x13c>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e59      	subs	r1, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fbb1 f3f3 	udiv	r3, r1, r3
 800277e:	1c59      	adds	r1, r3, #1
 8002780:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002784:	400b      	ands	r3, r1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_I2C_Init+0x138>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e59      	subs	r1, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fbb1 f3f3 	udiv	r3, r1, r3
 8002798:	3301      	adds	r3, #1
 800279a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279e:	e051      	b.n	8002844 <HAL_I2C_Init+0x1dc>
 80027a0:	2304      	movs	r3, #4
 80027a2:	e04f      	b.n	8002844 <HAL_I2C_Init+0x1dc>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d111      	bne.n	80027d0 <HAL_I2C_Init+0x168>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1e58      	subs	r0, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	440b      	add	r3, r1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	e012      	b.n	80027f6 <HAL_I2C_Init+0x18e>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1e58      	subs	r0, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	0099      	lsls	r1, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Init+0x196>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e022      	b.n	8002844 <HAL_I2C_Init+0x1dc>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10e      	bne.n	8002824 <HAL_I2C_Init+0x1bc>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1e58      	subs	r0, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	440b      	add	r3, r1
 8002814:	fbb0 f3f3 	udiv	r3, r0, r3
 8002818:	3301      	adds	r3, #1
 800281a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800281e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002822:	e00f      	b.n	8002844 <HAL_I2C_Init+0x1dc>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e58      	subs	r0, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	0099      	lsls	r1, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	fbb0 f3f3 	udiv	r3, r0, r3
 800283a:	3301      	adds	r3, #1
 800283c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	6809      	ldr	r1, [r1, #0]
 8002848:	4313      	orrs	r3, r2
 800284a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69da      	ldr	r2, [r3, #28]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6911      	ldr	r1, [r2, #16]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68d2      	ldr	r2, [r2, #12]
 800287e:	4311      	orrs	r1, r2
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	430b      	orrs	r3, r1
 8002886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	000186a0 	.word	0x000186a0
 80028e0:	001e847f 	.word	0x001e847f
 80028e4:	003d08ff 	.word	0x003d08ff
 80028e8:	431bde83 	.word	0x431bde83
 80028ec:	10624dd3 	.word	0x10624dd3

080028f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	461a      	mov	r2, r3
 80028fc:	460b      	mov	r3, r1
 80028fe:	817b      	strh	r3, [r7, #10]
 8002900:	4613      	mov	r3, r2
 8002902:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff fb18 	bl	8001f38 <HAL_GetTick>
 8002908:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b20      	cmp	r3, #32
 8002914:	f040 80e0 	bne.w	8002ad8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2319      	movs	r3, #25
 800291e:	2201      	movs	r2, #1
 8002920:	4970      	ldr	r1, [pc, #448]	; (8002ae4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f002 f8ca 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	e0d3      	b.n	8002ada <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_I2C_Master_Transmit+0x50>
 800293c:	2302      	movs	r3, #2
 800293e:	e0cc      	b.n	8002ada <HAL_I2C_Master_Transmit+0x1ea>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d007      	beq.n	8002966 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002974:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2221      	movs	r2, #33	; 0x21
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2210      	movs	r2, #16
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	893a      	ldrh	r2, [r7, #8]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a50      	ldr	r2, [pc, #320]	; (8002ae8 <HAL_I2C_Master_Transmit+0x1f8>)
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029a8:	8979      	ldrh	r1, [r7, #10]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	6a3a      	ldr	r2, [r7, #32]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f001 fe8c 	bl	80046cc <I2C_MasterRequestWrite>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e08d      	b.n	8002ada <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029d4:	e066      	b.n	8002aa4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	6a39      	ldr	r1, [r7, #32]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f002 f944 	bl	8004c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d107      	bne.n	80029fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06b      	b.n	8002ada <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	781a      	ldrb	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d11b      	bne.n	8002a78 <HAL_I2C_Master_Transmit+0x188>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d017      	beq.n	8002a78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	6a39      	ldr	r1, [r7, #32]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f002 f934 	bl	8004cea <I2C_WaitOnBTFFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00d      	beq.n	8002aa4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d107      	bne.n	8002aa0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e01a      	b.n	8002ada <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d194      	bne.n	80029d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e000      	b.n	8002ada <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ad8:	2302      	movs	r3, #2
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	00100002 	.word	0x00100002
 8002ae8:	ffff0000 	.word	0xffff0000

08002aec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	461a      	mov	r2, r3
 8002af8:	460b      	mov	r3, r1
 8002afa:	817b      	strh	r3, [r7, #10]
 8002afc:	4613      	mov	r3, r2
 8002afe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff fa1a 	bl	8001f38 <HAL_GetTick>
 8002b04:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	f040 820b 	bne.w	8002f2a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	2319      	movs	r3, #25
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	497c      	ldr	r1, [pc, #496]	; (8002d10 <HAL_I2C_Master_Receive+0x224>)
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f001 ffcc 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e1fe      	b.n	8002f2c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_I2C_Master_Receive+0x50>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e1f7      	b.n	8002f2c <HAL_I2C_Master_Receive+0x440>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d007      	beq.n	8002b62 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0201 	orr.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2222      	movs	r2, #34	; 0x22
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	893a      	ldrh	r2, [r7, #8]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a5c      	ldr	r2, [pc, #368]	; (8002d14 <HAL_I2C_Master_Receive+0x228>)
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ba4:	8979      	ldrh	r1, [r7, #10]
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f001 fe10 	bl	80047d0 <I2C_MasterRequestRead>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e1b8      	b.n	8002f2c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d113      	bne.n	8002bea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	623b      	str	r3, [r7, #32]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	623b      	str	r3, [r7, #32]
 8002bd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e18c      	b.n	8002f04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d11b      	bne.n	8002c2a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e16c      	b.n	8002f04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d11b      	bne.n	8002c6a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	e14c      	b.n	8002f04 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c90:	e138      	b.n	8002f04 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	f200 80f1 	bhi.w	8002e7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d123      	bne.n	8002cec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f002 f891 	bl	8004dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e139      	b.n	8002f2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cea:	e10b      	b.n	8002f04 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d14e      	bne.n	8002d92 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4906      	ldr	r1, [pc, #24]	; (8002d18 <HAL_I2C_Master_Receive+0x22c>)
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f001 fedc 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e10e      	b.n	8002f2c <HAL_I2C_Master_Receive+0x440>
 8002d0e:	bf00      	nop
 8002d10:	00100002 	.word	0x00100002
 8002d14:	ffff0000 	.word	0xffff0000
 8002d18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d90:	e0b8      	b.n	8002f04 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4966      	ldr	r1, [pc, #408]	; (8002f34 <HAL_I2C_Master_Receive+0x448>)
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f001 fe8d 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0bf      	b.n	8002f2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	2200      	movs	r2, #0
 8002df6:	494f      	ldr	r1, [pc, #316]	; (8002f34 <HAL_I2C_Master_Receive+0x448>)
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f001 fe5f 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e091      	b.n	8002f2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e7c:	e042      	b.n	8002f04 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f001 ffa4 	bl	8004dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e04c      	b.n	8002f2c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d118      	bne.n	8002f04 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f47f aec2 	bne.w	8002c92 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
  }
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3728      	adds	r7, #40	; 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	00010004 	.word	0x00010004

08002f38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d003      	beq.n	8002f70 <HAL_I2C_EV_IRQHandler+0x38>
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	f040 80b1 	bne.w	80030d2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10d      	bne.n	8002fa6 <HAL_I2C_EV_IRQHandler+0x6e>
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f90:	d003      	beq.n	8002f9a <HAL_I2C_EV_IRQHandler+0x62>
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f98:	d101      	bne.n	8002f9e <HAL_I2C_EV_IRQHandler+0x66>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <HAL_I2C_EV_IRQHandler+0x68>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f000 8114 	beq.w	80031ce <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HAL_I2C_EV_IRQHandler+0x90>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d006      	beq.n	8002fc8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f001 ff8d 	bl	8004eda <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fd6a 	bl	8003a9a <I2C_Master_SB>
 8002fc6:	e083      	b.n	80030d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_I2C_EV_IRQHandler+0xac>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fde2 	bl	8003ba6 <I2C_Master_ADD10>
 8002fe2:	e075      	b.n	80030d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0xc8>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fdfe 	bl	8003bfa <I2C_Master_ADDR>
 8002ffe:	e067      	b.n	80030d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d036      	beq.n	8003078 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003018:	f000 80db 	beq.w	80031d2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <HAL_I2C_EV_IRQHandler+0x10a>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_I2C_EV_IRQHandler+0x10a>
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f9e2 	bl	8003404 <I2C_MasterTransmit_TXE>
 8003040:	e046      	b.n	80030d0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80c2 	beq.w	80031d2 <HAL_I2C_EV_IRQHandler+0x29a>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80bc 	beq.w	80031d2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800305a:	7bbb      	ldrb	r3, [r7, #14]
 800305c:	2b21      	cmp	r3, #33	; 0x21
 800305e:	d103      	bne.n	8003068 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fa6b 	bl	800353c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003066:	e0b4      	b.n	80031d2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	f040 80b1 	bne.w	80031d2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fad9 	bl	8003628 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003076:	e0ac      	b.n	80031d2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003086:	f000 80a4 	beq.w	80031d2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00d      	beq.n	80030b0 <HAL_I2C_EV_IRQHandler+0x178>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_I2C_EV_IRQHandler+0x178>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fb51 	bl	8003750 <I2C_MasterReceive_RXNE>
 80030ae:	e00f      	b.n	80030d0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 808b 	beq.w	80031d2 <HAL_I2C_EV_IRQHandler+0x29a>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8085 	beq.w	80031d2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fbfc 	bl	80038c6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ce:	e080      	b.n	80031d2 <HAL_I2C_EV_IRQHandler+0x29a>
 80030d0:	e07f      	b.n	80031d2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	e007      	b.n	80030f4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d011      	beq.n	8003122 <HAL_I2C_EV_IRQHandler+0x1ea>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00c      	beq.n	8003122 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003118:	69b9      	ldr	r1, [r7, #24]
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 ffbc 	bl	8004098 <I2C_Slave_ADDR>
 8003120:	e05a      	b.n	80031d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_I2C_EV_IRQHandler+0x206>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fff6 	bl	8004128 <I2C_Slave_STOPF>
 800313c:	e04c      	b.n	80031d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800313e:	7bbb      	ldrb	r3, [r7, #14]
 8003140:	2b21      	cmp	r3, #33	; 0x21
 8003142:	d002      	beq.n	800314a <HAL_I2C_EV_IRQHandler+0x212>
 8003144:	7bbb      	ldrb	r3, [r7, #14]
 8003146:	2b29      	cmp	r3, #41	; 0x29
 8003148:	d120      	bne.n	800318c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <HAL_I2C_EV_IRQHandler+0x238>
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_I2C_EV_IRQHandler+0x238>
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fed7 	bl	8003f1c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800316e:	e032      	b.n	80031d6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02d      	beq.n	80031d6 <HAL_I2C_EV_IRQHandler+0x29e>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003180:	2b00      	cmp	r3, #0
 8003182:	d028      	beq.n	80031d6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 ff06 	bl	8003f96 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800318a:	e024      	b.n	80031d6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <HAL_I2C_EV_IRQHandler+0x27a>
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_I2C_EV_IRQHandler+0x27a>
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 ff14 	bl	8003fd8 <I2C_SlaveReceive_RXNE>
 80031b0:	e012      	b.n	80031d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <HAL_I2C_EV_IRQHandler+0x2a0>
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 ff44 	bl	8004054 <I2C_SlaveReceive_BTF>
 80031cc:	e004      	b.n	80031d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80031ce:	bf00      	nop
 80031d0:	e002      	b.n	80031d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d2:	bf00      	nop
 80031d4:	e000      	b.n	80031d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b08a      	sub	sp, #40	; 0x28
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003200:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00d      	beq.n	8003228 <HAL_I2C_ER_IRQHandler+0x4a>
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003226:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <HAL_I2C_ER_IRQHandler+0x70>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	f043 0302 	orr.w	r3, r3, #2
 8003242:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800324c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d03e      	beq.n	80032d6 <HAL_I2C_ER_IRQHandler+0xf8>
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d039      	beq.n	80032d6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003262:	7efb      	ldrb	r3, [r7, #27]
 8003264:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003274:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800327c:	7ebb      	ldrb	r3, [r7, #26]
 800327e:	2b20      	cmp	r3, #32
 8003280:	d112      	bne.n	80032a8 <HAL_I2C_ER_IRQHandler+0xca>
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10f      	bne.n	80032a8 <HAL_I2C_ER_IRQHandler+0xca>
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	2b21      	cmp	r3, #33	; 0x21
 800328c:	d008      	beq.n	80032a0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	2b29      	cmp	r3, #41	; 0x29
 8003292:	d005      	beq.n	80032a0 <HAL_I2C_ER_IRQHandler+0xc2>
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	2b28      	cmp	r3, #40	; 0x28
 8003298:	d106      	bne.n	80032a8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b21      	cmp	r3, #33	; 0x21
 800329e:	d103      	bne.n	80032a8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f001 f871 	bl	8004388 <I2C_Slave_AF>
 80032a6:	e016      	b.n	80032d6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032b0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032ba:	7efb      	ldrb	r3, [r7, #27]
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d002      	beq.n	80032c6 <HAL_I2C_ER_IRQHandler+0xe8>
 80032c0:	7efb      	ldrb	r3, [r7, #27]
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	d107      	bne.n	80032d6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <HAL_I2C_ER_IRQHandler+0x11e>
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d008      	beq.n	80032fc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	f043 0308 	orr.w	r3, r3, #8
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80032fa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f001 f8aa 	bl	8004468 <I2C_ITError>
  }
}
 8003314:	bf00      	nop
 8003316:	3728      	adds	r7, #40	; 0x28
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
 8003378:	4613      	mov	r3, r2
 800337a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003412:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800341a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003426:	2b00      	cmp	r3, #0
 8003428:	d150      	bne.n	80034cc <I2C_MasterTransmit_TXE+0xc8>
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b21      	cmp	r3, #33	; 0x21
 800342e:	d14d      	bne.n	80034cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b08      	cmp	r3, #8
 8003434:	d01d      	beq.n	8003472 <I2C_MasterTransmit_TXE+0x6e>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b20      	cmp	r3, #32
 800343a:	d01a      	beq.n	8003472 <I2C_MasterTransmit_TXE+0x6e>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003442:	d016      	beq.n	8003472 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003452:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2211      	movs	r2, #17
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff ff56 	bl	800331c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003470:	e060      	b.n	8003534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003480:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003490:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b40      	cmp	r3, #64	; 0x40
 80034aa:	d107      	bne.n	80034bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff71 	bl	800339c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034ba:	e03b      	b.n	8003534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff29 	bl	800331c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034ca:	e033      	b.n	8003534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b21      	cmp	r3, #33	; 0x21
 80034d0:	d005      	beq.n	80034de <I2C_MasterTransmit_TXE+0xda>
 80034d2:	7bbb      	ldrb	r3, [r7, #14]
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d12d      	bne.n	8003534 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b22      	cmp	r3, #34	; 0x22
 80034dc:	d12a      	bne.n	8003534 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d108      	bne.n	80034fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80034f8:	e01c      	b.n	8003534 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d103      	bne.n	800350e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f88e 	bl	8003628 <I2C_MemoryTransmit_TXE_BTF>
}
 800350c:	e012      	b.n	8003534 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	781a      	ldrb	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003532:	e7ff      	b.n	8003534 <I2C_MasterTransmit_TXE+0x130>
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b21      	cmp	r3, #33	; 0x21
 8003554:	d164      	bne.n	8003620 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d012      	beq.n	8003586 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003584:	e04c      	b.n	8003620 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d01d      	beq.n	80035c8 <I2C_MasterTransmit_BTF+0x8c>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b20      	cmp	r3, #32
 8003590:	d01a      	beq.n	80035c8 <I2C_MasterTransmit_BTF+0x8c>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003598:	d016      	beq.n	80035c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2211      	movs	r2, #17
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff feab 	bl	800331c <HAL_I2C_MasterTxCpltCallback>
}
 80035c6:	e02b      	b.n	8003620 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d107      	bne.n	8003612 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fec6 	bl	800339c <HAL_I2C_MemTxCpltCallback>
}
 8003610:	e006      	b.n	8003620 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff fe7e 	bl	800331c <HAL_I2C_MasterTxCpltCallback>
}
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363c:	2b00      	cmp	r3, #0
 800363e:	d11d      	bne.n	800367c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d10b      	bne.n	8003660 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364c:	b2da      	uxtb	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	1c9a      	adds	r2, r3, #2
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800365e:	e073      	b.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003664:	b29b      	uxth	r3, r3
 8003666:	121b      	asrs	r3, r3, #8
 8003668:	b2da      	uxtb	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	651a      	str	r2, [r3, #80]	; 0x50
}
 800367a:	e065      	b.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	2b01      	cmp	r3, #1
 8003682:	d10b      	bne.n	800369c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003688:	b2da      	uxtb	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	651a      	str	r2, [r3, #80]	; 0x50
}
 800369a:	e055      	b.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d151      	bne.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b22      	cmp	r3, #34	; 0x22
 80036a8:	d10d      	bne.n	80036c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036c4:	e040      	b.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d015      	beq.n	80036fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b21      	cmp	r3, #33	; 0x21
 80036d4:	d112      	bne.n	80036fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	781a      	ldrb	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036fa:	e025      	b.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d120      	bne.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b21      	cmp	r3, #33	; 0x21
 800370a:	d11d      	bne.n	8003748 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800371a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fe2a 	bl	800339c <HAL_I2C_MemTxCpltCallback>
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b22      	cmp	r3, #34	; 0x22
 8003762:	f040 80ac 	bne.w	80038be <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d921      	bls.n	80037b8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	f040 808c 	bne.w	80038be <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80037b6:	e082      	b.n	80038be <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d075      	beq.n	80038ac <I2C_MasterReceive_RXNE+0x15c>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d002      	beq.n	80037cc <I2C_MasterReceive_RXNE+0x7c>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d16f      	bne.n	80038ac <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f001 facd 	bl	8004d6c <I2C_WaitOnSTOPRequestThroughIT>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d142      	bne.n	800385e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d10a      	bne.n	8003848 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fdb5 	bl	80033b0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003846:	e03a      	b.n	80038be <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2212      	movs	r2, #18
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff fd6a 	bl	8003330 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800385c:	e02f      	b.n	80038be <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800386c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fd8d 	bl	80033c4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038aa:	e008      	b.n	80038be <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ba:	605a      	str	r2, [r3, #4]
}
 80038bc:	e7ff      	b.n	80038be <I2C_MasterReceive_RXNE+0x16e>
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d11b      	bne.n	8003916 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003914:	e0bd      	b.n	8003a92 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b03      	cmp	r3, #3
 800391e:	d129      	bne.n	8003974 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b04      	cmp	r3, #4
 8003934:	d00a      	beq.n	800394c <I2C_MasterReceive_BTF+0x86>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d007      	beq.n	800394c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691a      	ldr	r2, [r3, #16]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003972:	e08e      	b.n	8003a92 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d176      	bne.n	8003a6c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d002      	beq.n	800398a <I2C_MasterReceive_BTF+0xc4>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b10      	cmp	r3, #16
 8003988:	d108      	bne.n	800399c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e019      	b.n	80039d0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d002      	beq.n	80039a8 <I2C_MasterReceive_BTF+0xe2>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d108      	bne.n	80039ba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e00a      	b.n	80039d0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d007      	beq.n	80039d0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a2a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d10a      	bne.n	8003a56 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fcae 	bl	80033b0 <HAL_I2C_MemRxCpltCallback>
}
 8003a54:	e01d      	b.n	8003a92 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2212      	movs	r2, #18
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fc63 	bl	8003330 <HAL_I2C_MasterRxCpltCallback>
}
 8003a6a:	e012      	b.n	8003a92 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d117      	bne.n	8003ade <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ac6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003ac8:	e067      	b.n	8003b9a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	611a      	str	r2, [r3, #16]
}
 8003adc:	e05d      	b.n	8003b9a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae6:	d133      	bne.n	8003b50 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b21      	cmp	r3, #33	; 0x21
 8003af2:	d109      	bne.n	8003b08 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b04:	611a      	str	r2, [r3, #16]
 8003b06:	e008      	b.n	8003b1a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <I2C_Master_SB+0x92>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d108      	bne.n	8003b3e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d032      	beq.n	8003b9a <I2C_Master_SB+0x100>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d02d      	beq.n	8003b9a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4c:	605a      	str	r2, [r3, #4]
}
 8003b4e:	e024      	b.n	8003b9a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10e      	bne.n	8003b76 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	11db      	asrs	r3, r3, #7
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f003 0306 	and.w	r3, r3, #6
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f063 030f 	orn	r3, r3, #15
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	611a      	str	r2, [r3, #16]
}
 8003b74:	e011      	b.n	8003b9a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d10d      	bne.n	8003b9a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	11db      	asrs	r3, r3, #7
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f003 0306 	and.w	r3, r3, #6
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f063 030e 	orn	r3, r3, #14
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	611a      	str	r2, [r3, #16]
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <I2C_Master_ADD10+0x26>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d108      	bne.n	8003bde <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <I2C_Master_ADD10+0x48>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bec:	605a      	str	r2, [r3, #4]
  }
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b091      	sub	sp, #68	; 0x44
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b22      	cmp	r3, #34	; 0x22
 8003c22:	f040 8169 	bne.w	8003ef8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <I2C_Master_ADDR+0x54>
 8003c2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c32:	2b40      	cmp	r3, #64	; 0x40
 8003c34:	d10b      	bne.n	8003c4e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c36:	2300      	movs	r3, #0
 8003c38:	633b      	str	r3, [r7, #48]	; 0x30
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	633b      	str	r3, [r7, #48]	; 0x30
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	e160      	b.n	8003f10 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d11d      	bne.n	8003c92 <I2C_Master_ADDR+0x98>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c5e:	d118      	bne.n	8003c92 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c60:	2300      	movs	r3, #0
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c84:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	651a      	str	r2, [r3, #80]	; 0x50
 8003c90:	e13e      	b.n	8003f10 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d113      	bne.n	8003cc4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	e115      	b.n	8003ef0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	f040 808a 	bne.w	8003de4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd6:	d137      	bne.n	8003d48 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf6:	d113      	bne.n	8003d20 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d06:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	e0e7      	b.n	8003ef0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d20:	2300      	movs	r3, #0
 8003d22:	623b      	str	r3, [r7, #32]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	623b      	str	r3, [r7, #32]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	623b      	str	r3, [r7, #32]
 8003d34:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e0d3      	b.n	8003ef0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d02e      	beq.n	8003dac <I2C_Master_ADDR+0x1b2>
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d02b      	beq.n	8003dac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d56:	2b12      	cmp	r3, #18
 8003d58:	d102      	bne.n	8003d60 <I2C_Master_ADDR+0x166>
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d125      	bne.n	8003dac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d00e      	beq.n	8003d84 <I2C_Master_ADDR+0x18a>
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d00b      	beq.n	8003d84 <I2C_Master_ADDR+0x18a>
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d008      	beq.n	8003d84 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e007      	b.n	8003d94 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d92:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	e0a1      	b.n	8003ef0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	61bb      	str	r3, [r7, #24]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e085      	b.n	8003ef0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d14d      	bne.n	8003e8a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d016      	beq.n	8003e22 <I2C_Master_ADDR+0x228>
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d013      	beq.n	8003e22 <I2C_Master_ADDR+0x228>
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d010      	beq.n	8003e22 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e007      	b.n	8003e32 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e30:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e40:	d117      	bne.n	8003e72 <I2C_Master_ADDR+0x278>
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e48:	d00b      	beq.n	8003e62 <I2C_Master_ADDR+0x268>
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d008      	beq.n	8003e62 <I2C_Master_ADDR+0x268>
 8003e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d005      	beq.n	8003e62 <I2C_Master_ADDR+0x268>
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d002      	beq.n	8003e62 <I2C_Master_ADDR+0x268>
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d107      	bne.n	8003e72 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	e032      	b.n	8003ef0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e98:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea8:	d117      	bne.n	8003eda <I2C_Master_ADDR+0x2e0>
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eb0:	d00b      	beq.n	8003eca <I2C_Master_ADDR+0x2d0>
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d008      	beq.n	8003eca <I2C_Master_ADDR+0x2d0>
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d005      	beq.n	8003eca <I2C_Master_ADDR+0x2d0>
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d002      	beq.n	8003eca <I2C_Master_ADDR+0x2d0>
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d107      	bne.n	8003eda <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ed8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003ef6:	e00b      	b.n	8003f10 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
}
 8003f0e:	e7ff      	b.n	8003f10 <I2C_Master_ADDR+0x316>
 8003f10:	bf00      	nop
 8003f12:	3744      	adds	r7, #68	; 0x44
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d02b      	beq.n	8003f8e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	781a      	ldrb	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d114      	bne.n	8003f8e <I2C_SlaveTransmit_TXE+0x72>
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b29      	cmp	r3, #41	; 0x29
 8003f68:	d111      	bne.n	8003f8e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2221      	movs	r2, #33	; 0x21
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2228      	movs	r2, #40	; 0x28
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff f9db 	bl	8003344 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d011      	beq.n	8003fcc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d02c      	beq.n	800404c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d114      	bne.n	800404c <I2C_SlaveReceive_RXNE+0x74>
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	2b2a      	cmp	r3, #42	; 0x2a
 8004026:	d111      	bne.n	800404c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004036:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2222      	movs	r2, #34	; 0x22
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2228      	movs	r2, #40	; 0x28
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff f986 	bl	8003358 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d012      	beq.n	800408c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040b2:	2b28      	cmp	r3, #40	; 0x28
 80040b4:	d125      	bne.n	8004102 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	81bb      	strh	r3, [r7, #12]
 80040e4:	e002      	b.n	80040ec <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040f4:	89ba      	ldrh	r2, [r7, #12]
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff f936 	bl	800336c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004100:	e00e      	b.n	8004120 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004102:	2300      	movs	r3, #0
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004146:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004148:	2300      	movs	r3, #0
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004174:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004184:	d172      	bne.n	800426c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	2b22      	cmp	r3, #34	; 0x22
 800418a:	d002      	beq.n	8004192 <I2C_Slave_STOPF+0x6a>
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b2a      	cmp	r3, #42	; 0x2a
 8004190:	d135      	bne.n	80041fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f043 0204 	orr.w	r2, r3, #4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe f887 	bl	80022de <HAL_DMA_GetState>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d049      	beq.n	800426a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	4a69      	ldr	r2, [pc, #420]	; (8004380 <I2C_Slave_STOPF+0x258>)
 80041dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe f859 	bl	800229a <HAL_DMA_Abort_IT>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d03d      	beq.n	800426a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041f8:	4610      	mov	r0, r2
 80041fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041fc:	e035      	b.n	800426a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f043 0204 	orr.w	r2, r3, #4
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004230:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe f851 	bl	80022de <HAL_DMA_GetState>
 800423c:	4603      	mov	r3, r0
 800423e:	2b01      	cmp	r3, #1
 8004240:	d014      	beq.n	800426c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004246:	4a4e      	ldr	r2, [pc, #312]	; (8004380 <I2C_Slave_STOPF+0x258>)
 8004248:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe f823 	bl	800229a <HAL_DMA_Abort_IT>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004264:	4610      	mov	r0, r2
 8004266:	4798      	blx	r3
 8004268:	e000      	b.n	800426c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800426a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d03e      	beq.n	80042f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b04      	cmp	r3, #4
 8004282:	d112      	bne.n	80042aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d112      	bne.n	80042de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	f043 0204 	orr.w	r2, r3, #4
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f8b3 	bl	8004468 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004302:	e039      	b.n	8004378 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b2a      	cmp	r3, #42	; 0x2a
 8004308:	d109      	bne.n	800431e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2228      	movs	r2, #40	; 0x28
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff f81d 	bl	8003358 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b28      	cmp	r3, #40	; 0x28
 8004328:	d111      	bne.n	800434e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a15      	ldr	r2, [pc, #84]	; (8004384 <I2C_Slave_STOPF+0x25c>)
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff f81e 	bl	8003388 <HAL_I2C_ListenCpltCallback>
}
 800434c:	e014      	b.n	8004378 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	2b22      	cmp	r3, #34	; 0x22
 8004354:	d002      	beq.n	800435c <I2C_Slave_STOPF+0x234>
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b22      	cmp	r3, #34	; 0x22
 800435a:	d10d      	bne.n	8004378 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fe fff0 	bl	8003358 <HAL_I2C_SlaveRxCpltCallback>
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	0800496d 	.word	0x0800496d
 8004384:	ffff0000 	.word	0xffff0000

08004388 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004396:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d002      	beq.n	80043aa <I2C_Slave_AF+0x22>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	d129      	bne.n	80043fe <I2C_Slave_AF+0x76>
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	2b28      	cmp	r3, #40	; 0x28
 80043ae:	d126      	bne.n	80043fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a2c      	ldr	r2, [pc, #176]	; (8004464 <I2C_Slave_AF+0xdc>)
 80043b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fe ffc6 	bl	8003388 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80043fc:	e02e      	b.n	800445c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	2b21      	cmp	r3, #33	; 0x21
 8004402:	d126      	bne.n	8004452 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <I2C_Slave_AF+0xdc>)
 8004408:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2221      	movs	r2, #33	; 0x21
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800442e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004438:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004448:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fe ff7a 	bl	8003344 <HAL_I2C_SlaveTxCpltCallback>
}
 8004450:	e004      	b.n	800445c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800445a:	615a      	str	r2, [r3, #20]
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	ffff0000 	.word	0xffff0000

08004468 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004476:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004480:	7bbb      	ldrb	r3, [r7, #14]
 8004482:	2b10      	cmp	r3, #16
 8004484:	d002      	beq.n	800448c <I2C_ITError+0x24>
 8004486:	7bbb      	ldrb	r3, [r7, #14]
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d10a      	bne.n	80044a2 <I2C_ITError+0x3a>
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b22      	cmp	r3, #34	; 0x22
 8004490:	d107      	bne.n	80044a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044a8:	2b28      	cmp	r3, #40	; 0x28
 80044aa:	d107      	bne.n	80044bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2228      	movs	r2, #40	; 0x28
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80044ba:	e015      	b.n	80044e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ca:	d00a      	beq.n	80044e2 <I2C_ITError+0x7a>
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b60      	cmp	r3, #96	; 0x60
 80044d0:	d007      	beq.n	80044e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f6:	d162      	bne.n	80045be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004506:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	d020      	beq.n	8004558 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	4a6a      	ldr	r2, [pc, #424]	; (80046c4 <I2C_ITError+0x25c>)
 800451c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	4618      	mov	r0, r3
 8004524:	f7fd feb9 	bl	800229a <HAL_DMA_Abort_IT>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8089 	beq.w	8004642 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004552:	4610      	mov	r0, r2
 8004554:	4798      	blx	r3
 8004556:	e074      	b.n	8004642 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	4a59      	ldr	r2, [pc, #356]	; (80046c4 <I2C_ITError+0x25c>)
 800455e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	4618      	mov	r0, r3
 8004566:	f7fd fe98 	bl	800229a <HAL_DMA_Abort_IT>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d068      	beq.n	8004642 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d10b      	bne.n	8004596 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045b8:	4610      	mov	r0, r2
 80045ba:	4798      	blx	r3
 80045bc:	e041      	b.n	8004642 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b60      	cmp	r3, #96	; 0x60
 80045c8:	d125      	bne.n	8004616 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d10b      	bne.n	80045fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0201 	bic.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fe fee2 	bl	80033d8 <HAL_I2C_AbortCpltCallback>
 8004614:	e015      	b.n	8004642 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	d10b      	bne.n	800463c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7fe fec1 	bl	80033c4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10e      	bne.n	8004670 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004662:	2b00      	cmp	r3, #0
 8004664:	d104      	bne.n	8004670 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800467e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004686:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b04      	cmp	r3, #4
 8004692:	d113      	bne.n	80046bc <I2C_ITError+0x254>
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b28      	cmp	r3, #40	; 0x28
 8004698:	d110      	bne.n	80046bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <I2C_ITError+0x260>)
 800469e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fe fe66 	bl	8003388 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	0800496d 	.word	0x0800496d
 80046c8:	ffff0000 	.word	0xffff0000

080046cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	460b      	mov	r3, r1
 80046da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d006      	beq.n	80046f6 <I2C_MasterRequestWrite+0x2a>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d003      	beq.n	80046f6 <I2C_MasterRequestWrite+0x2a>
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046f4:	d108      	bne.n	8004708 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e00b      	b.n	8004720 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	2b12      	cmp	r3, #18
 800470e:	d107      	bne.n	8004720 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f9c5 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004746:	d103      	bne.n	8004750 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800474e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e035      	b.n	80047c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800475c:	d108      	bne.n	8004770 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800475e:	897b      	ldrh	r3, [r7, #10]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800476c:	611a      	str	r2, [r3, #16]
 800476e:	e01b      	b.n	80047a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004770:	897b      	ldrh	r3, [r7, #10]
 8004772:	11db      	asrs	r3, r3, #7
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f003 0306 	and.w	r3, r3, #6
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f063 030f 	orn	r3, r3, #15
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	490e      	ldr	r1, [pc, #56]	; (80047c8 <I2C_MasterRequestWrite+0xfc>)
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f9eb 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e010      	b.n	80047c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800479e:	897b      	ldrh	r3, [r7, #10]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	4907      	ldr	r1, [pc, #28]	; (80047cc <I2C_MasterRequestWrite+0x100>)
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f9db 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	00010008 	.word	0x00010008
 80047cc:	00010002 	.word	0x00010002

080047d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	460b      	mov	r3, r1
 80047de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d006      	beq.n	800480a <I2C_MasterRequestRead+0x3a>
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d003      	beq.n	800480a <I2C_MasterRequestRead+0x3a>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004808:	d108      	bne.n	800481c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e00b      	b.n	8004834 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	2b11      	cmp	r3, #17
 8004822:	d107      	bne.n	8004834 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004832:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f93b 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00d      	beq.n	8004868 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485a:	d103      	bne.n	8004864 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e079      	b.n	800495c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004870:	d108      	bne.n	8004884 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004872:	897b      	ldrh	r3, [r7, #10]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	b2da      	uxtb	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	611a      	str	r2, [r3, #16]
 8004882:	e05f      	b.n	8004944 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004884:	897b      	ldrh	r3, [r7, #10]
 8004886:	11db      	asrs	r3, r3, #7
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f003 0306 	and.w	r3, r3, #6
 800488e:	b2db      	uxtb	r3, r3
 8004890:	f063 030f 	orn	r3, r3, #15
 8004894:	b2da      	uxtb	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	4930      	ldr	r1, [pc, #192]	; (8004964 <I2C_MasterRequestRead+0x194>)
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f961 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e054      	b.n	800495c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048b2:	897b      	ldrh	r3, [r7, #10]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	4929      	ldr	r1, [pc, #164]	; (8004968 <I2C_MasterRequestRead+0x198>)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f951 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e044      	b.n	800495c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d2:	2300      	movs	r3, #0
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f8d9 	bl	8004abc <I2C_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00d      	beq.n	800492c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491e:	d103      	bne.n	8004928 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004926:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e017      	b.n	800495c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800492c:	897b      	ldrh	r3, [r7, #10]
 800492e:	11db      	asrs	r3, r3, #7
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f003 0306 	and.w	r3, r3, #6
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f063 030e 	orn	r3, r3, #14
 800493c:	b2da      	uxtb	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	4907      	ldr	r1, [pc, #28]	; (8004968 <I2C_MasterRequestRead+0x198>)
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 f90d 	bl	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	00010008 	.word	0x00010008
 8004968:	00010002 	.word	0x00010002

0800496c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004984:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004986:	4b4b      	ldr	r3, [pc, #300]	; (8004ab4 <I2C_DMAAbort+0x148>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	08db      	lsrs	r3, r3, #3
 800498c:	4a4a      	ldr	r2, [pc, #296]	; (8004ab8 <I2C_DMAAbort+0x14c>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0a1a      	lsrs	r2, r3, #8
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	00da      	lsls	r2, r3, #3
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f043 0220 	orr.w	r2, r3, #32
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80049b2:	e00a      	b.n	80049ca <I2C_DMAAbort+0x5e>
    }
    count--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c8:	d0ea      	beq.n	80049a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d6:	2200      	movs	r2, #0
 80049d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	2200      	movs	r2, #0
 80049e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b60      	cmp	r3, #96	; 0x60
 8004a3a:	d10e      	bne.n	8004a5a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a52:	6978      	ldr	r0, [r7, #20]
 8004a54:	f7fe fcc0 	bl	80033d8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a58:	e027      	b.n	8004aaa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a60:	2b28      	cmp	r3, #40	; 0x28
 8004a62:	d117      	bne.n	8004a94 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2228      	movs	r2, #40	; 0x28
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a92:	e007      	b.n	8004aa4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004aa4:	6978      	ldr	r0, [r7, #20]
 8004aa6:	f7fe fc8d 	bl	80033c4 <HAL_I2C_ErrorCallback>
}
 8004aaa:	bf00      	nop
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	2000000c 	.word	0x2000000c
 8004ab8:	14f8b589 	.word	0x14f8b589

08004abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004acc:	e025      	b.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d021      	beq.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad6:	f7fd fa2f 	bl	8001f38 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d116      	bne.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f043 0220 	orr.w	r2, r3, #32
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e023      	b.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10d      	bne.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	e00c      	b.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	43da      	mvns	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bf0c      	ite	eq
 8004b52:	2301      	moveq	r3, #1
 8004b54:	2300      	movne	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d0b6      	beq.n	8004ace <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b78:	e051      	b.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d123      	bne.n	8004bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ba2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f043 0204 	orr.w	r2, r3, #4
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e046      	b.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d021      	beq.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	f7fd f9ad 	bl	8001f38 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d116      	bne.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e020      	b.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d10c      	bne.n	8004c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	e00b      	b.n	8004c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	43da      	mvns	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf14      	ite	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	2300      	moveq	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d18d      	bne.n	8004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c74:	e02d      	b.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f900 	bl	8004e7c <I2C_IsAcknowledgeFailed>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e02d      	b.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d021      	beq.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8e:	f7fd f953 	bl	8001f38 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d116      	bne.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e007      	b.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cdc:	2b80      	cmp	r3, #128	; 0x80
 8004cde:	d1ca      	bne.n	8004c76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cf6:	e02d      	b.n	8004d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f8bf 	bl	8004e7c <I2C_IsAcknowledgeFailed>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e02d      	b.n	8004d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d021      	beq.n	8004d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d10:	f7fd f912 	bl	8001f38 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d302      	bcc.n	8004d26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d116      	bne.n	8004d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e007      	b.n	8004d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d1ca      	bne.n	8004cf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	08db      	lsrs	r3, r3, #3
 8004d7e:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	0a1a      	lsrs	r2, r3, #8
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d107      	bne.n	8004daa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f043 0220 	orr.w	r2, r3, #32
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e008      	b.n	8004dbc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db8:	d0e9      	beq.n	8004d8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	2000000c 	.word	0x2000000c
 8004dcc:	14f8b589 	.word	0x14f8b589

08004dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ddc:	e042      	b.n	8004e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d119      	bne.n	8004e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0210 	mvn.w	r2, #16
 8004df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e029      	b.n	8004e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e20:	f7fd f88a 	bl	8001f38 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d302      	bcc.n	8004e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d116      	bne.n	8004e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f043 0220 	orr.w	r2, r3, #32
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e007      	b.n	8004e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d1b5      	bne.n	8004dde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e92:	d11b      	bne.n	8004ecc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	f043 0204 	orr.w	r2, r3, #4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004eea:	d103      	bne.n	8004ef4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ef2:	e007      	b.n	8004f04 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004efc:	d102      	bne.n	8004f04 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2208      	movs	r2, #8
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e267      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d075      	beq.n	800501a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f2e:	4b88      	ldr	r3, [pc, #544]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 030c 	and.w	r3, r3, #12
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d00c      	beq.n	8004f54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f3a:	4b85      	ldr	r3, [pc, #532]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d112      	bne.n	8004f6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f46:	4b82      	ldr	r3, [pc, #520]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f52:	d10b      	bne.n	8004f6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f54:	4b7e      	ldr	r3, [pc, #504]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d05b      	beq.n	8005018 <HAL_RCC_OscConfig+0x108>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d157      	bne.n	8005018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e242      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f74:	d106      	bne.n	8004f84 <HAL_RCC_OscConfig+0x74>
 8004f76:	4b76      	ldr	r3, [pc, #472]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a75      	ldr	r2, [pc, #468]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e01d      	b.n	8004fc0 <HAL_RCC_OscConfig+0xb0>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x98>
 8004f8e:	4b70      	ldr	r3, [pc, #448]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a6f      	ldr	r2, [pc, #444]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	4b6d      	ldr	r3, [pc, #436]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a6c      	ldr	r2, [pc, #432]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCC_OscConfig+0xb0>
 8004fa8:	4b69      	ldr	r3, [pc, #420]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a68      	ldr	r2, [pc, #416]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	4b66      	ldr	r3, [pc, #408]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a65      	ldr	r2, [pc, #404]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d013      	beq.n	8004ff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fc ffb6 	bl	8001f38 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd0:	f7fc ffb2 	bl	8001f38 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b64      	cmp	r3, #100	; 0x64
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e207      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe2:	4b5b      	ldr	r3, [pc, #364]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0xc0>
 8004fee:	e014      	b.n	800501a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fc ffa2 	bl	8001f38 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff8:	f7fc ff9e 	bl	8001f38 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	; 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e1f3      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500a:	4b51      	ldr	r3, [pc, #324]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0xe8>
 8005016:	e000      	b.n	800501a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d063      	beq.n	80050ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005026:	4b4a      	ldr	r3, [pc, #296]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005032:	4b47      	ldr	r3, [pc, #284]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800503a:	2b08      	cmp	r3, #8
 800503c:	d11c      	bne.n	8005078 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800503e:	4b44      	ldr	r3, [pc, #272]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d116      	bne.n	8005078 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504a:	4b41      	ldr	r3, [pc, #260]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_RCC_OscConfig+0x152>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d001      	beq.n	8005062 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e1c7      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005062:	4b3b      	ldr	r3, [pc, #236]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4937      	ldr	r1, [pc, #220]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8005072:	4313      	orrs	r3, r2
 8005074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005076:	e03a      	b.n	80050ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d020      	beq.n	80050c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005080:	4b34      	ldr	r3, [pc, #208]	; (8005154 <HAL_RCC_OscConfig+0x244>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005086:	f7fc ff57 	bl	8001f38 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800508e:	f7fc ff53 	bl	8001f38 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e1a8      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a0:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ac:	4b28      	ldr	r3, [pc, #160]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4925      	ldr	r1, [pc, #148]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	600b      	str	r3, [r1, #0]
 80050c0:	e015      	b.n	80050ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c2:	4b24      	ldr	r3, [pc, #144]	; (8005154 <HAL_RCC_OscConfig+0x244>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fc ff36 	bl	8001f38 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d0:	f7fc ff32 	bl	8001f38 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e187      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d036      	beq.n	8005168 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d016      	beq.n	8005130 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005102:	4b15      	ldr	r3, [pc, #84]	; (8005158 <HAL_RCC_OscConfig+0x248>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005108:	f7fc ff16 	bl	8001f38 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005110:	f7fc ff12 	bl	8001f38 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e167      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCC_OscConfig+0x240>)
 8005124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0x200>
 800512e:	e01b      	b.n	8005168 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005130:	4b09      	ldr	r3, [pc, #36]	; (8005158 <HAL_RCC_OscConfig+0x248>)
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005136:	f7fc feff 	bl	8001f38 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800513c:	e00e      	b.n	800515c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800513e:	f7fc fefb 	bl	8001f38 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d907      	bls.n	800515c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e150      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
 8005150:	40023800 	.word	0x40023800
 8005154:	42470000 	.word	0x42470000
 8005158:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800515c:	4b88      	ldr	r3, [pc, #544]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 800515e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ea      	bne.n	800513e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 8097 	beq.w	80052a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517a:	4b81      	ldr	r3, [pc, #516]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	4b7d      	ldr	r3, [pc, #500]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	4a7c      	ldr	r2, [pc, #496]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 8005190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005194:	6413      	str	r3, [r2, #64]	; 0x40
 8005196:	4b7a      	ldr	r3, [pc, #488]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519e:	60bb      	str	r3, [r7, #8]
 80051a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051a2:	2301      	movs	r3, #1
 80051a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a6:	4b77      	ldr	r3, [pc, #476]	; (8005384 <HAL_RCC_OscConfig+0x474>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d118      	bne.n	80051e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b2:	4b74      	ldr	r3, [pc, #464]	; (8005384 <HAL_RCC_OscConfig+0x474>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a73      	ldr	r2, [pc, #460]	; (8005384 <HAL_RCC_OscConfig+0x474>)
 80051b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051be:	f7fc febb 	bl	8001f38 <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c6:	f7fc feb7 	bl	8001f38 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e10c      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d8:	4b6a      	ldr	r3, [pc, #424]	; (8005384 <HAL_RCC_OscConfig+0x474>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0f0      	beq.n	80051c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_OscConfig+0x2ea>
 80051ec:	4b64      	ldr	r3, [pc, #400]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f0:	4a63      	ldr	r2, [pc, #396]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	6713      	str	r3, [r2, #112]	; 0x70
 80051f8:	e01c      	b.n	8005234 <HAL_RCC_OscConfig+0x324>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x30c>
 8005202:	4b5f      	ldr	r3, [pc, #380]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	4a5e      	ldr	r2, [pc, #376]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 8005208:	f043 0304 	orr.w	r3, r3, #4
 800520c:	6713      	str	r3, [r2, #112]	; 0x70
 800520e:	4b5c      	ldr	r3, [pc, #368]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	4a5b      	ldr	r2, [pc, #364]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6713      	str	r3, [r2, #112]	; 0x70
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0x324>
 800521c:	4b58      	ldr	r3, [pc, #352]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	4a57      	ldr	r2, [pc, #348]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6713      	str	r3, [r2, #112]	; 0x70
 8005228:	4b55      	ldr	r3, [pc, #340]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 800522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522c:	4a54      	ldr	r2, [pc, #336]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 800522e:	f023 0304 	bic.w	r3, r3, #4
 8005232:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d015      	beq.n	8005268 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7fc fe7c 	bl	8001f38 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005242:	e00a      	b.n	800525a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005244:	f7fc fe78 	bl	8001f38 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e0cb      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525a:	4b49      	ldr	r3, [pc, #292]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ee      	beq.n	8005244 <HAL_RCC_OscConfig+0x334>
 8005266:	e014      	b.n	8005292 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005268:	f7fc fe66 	bl	8001f38 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800526e:	e00a      	b.n	8005286 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005270:	f7fc fe62 	bl	8001f38 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	f241 3288 	movw	r2, #5000	; 0x1388
 800527e:	4293      	cmp	r3, r2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e0b5      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005286:	4b3e      	ldr	r3, [pc, #248]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1ee      	bne.n	8005270 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d105      	bne.n	80052a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005298:	4b39      	ldr	r3, [pc, #228]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	4a38      	ldr	r2, [pc, #224]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 800529e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80a1 	beq.w	80053f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052ae:	4b34      	ldr	r3, [pc, #208]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d05c      	beq.n	8005374 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d141      	bne.n	8005346 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c2:	4b31      	ldr	r3, [pc, #196]	; (8005388 <HAL_RCC_OscConfig+0x478>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c8:	f7fc fe36 	bl	8001f38 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052d0:	f7fc fe32 	bl	8001f38 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e087      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e2:	4b27      	ldr	r3, [pc, #156]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	019b      	lsls	r3, r3, #6
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	3b01      	subs	r3, #1
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	061b      	lsls	r3, r3, #24
 8005312:	491b      	ldr	r1, [pc, #108]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 8005314:	4313      	orrs	r3, r2
 8005316:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005318:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <HAL_RCC_OscConfig+0x478>)
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531e:	f7fc fe0b 	bl	8001f38 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005326:	f7fc fe07 	bl	8001f38 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e05c      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005338:	4b11      	ldr	r3, [pc, #68]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f0      	beq.n	8005326 <HAL_RCC_OscConfig+0x416>
 8005344:	e054      	b.n	80053f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_RCC_OscConfig+0x478>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fc fdf4 	bl	8001f38 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005354:	f7fc fdf0 	bl	8001f38 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e045      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_RCC_OscConfig+0x470>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x444>
 8005372:	e03d      	b.n	80053f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d107      	bne.n	800538c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e038      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
 8005380:	40023800 	.word	0x40023800
 8005384:	40007000 	.word	0x40007000
 8005388:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800538c:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <HAL_RCC_OscConfig+0x4ec>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d028      	beq.n	80053ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d121      	bne.n	80053ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d11a      	bne.n	80053ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053bc:	4013      	ands	r3, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d111      	bne.n	80053ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	3b01      	subs	r3, #1
 80053d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d107      	bne.n	80053ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40023800 	.word	0x40023800

08005400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0cc      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005414:	4b68      	ldr	r3, [pc, #416]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d90c      	bls.n	800543c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005422:	4b65      	ldr	r3, [pc, #404]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800542a:	4b63      	ldr	r3, [pc, #396]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d001      	beq.n	800543c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0b8      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d020      	beq.n	800548a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005454:	4b59      	ldr	r3, [pc, #356]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	4a58      	ldr	r2, [pc, #352]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800545e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800546c:	4b53      	ldr	r3, [pc, #332]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	4a52      	ldr	r2, [pc, #328]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005476:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005478:	4b50      	ldr	r3, [pc, #320]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	494d      	ldr	r1, [pc, #308]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d044      	beq.n	8005520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d107      	bne.n	80054ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	4b47      	ldr	r3, [pc, #284]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d119      	bne.n	80054de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e07f      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d003      	beq.n	80054be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d107      	bne.n	80054ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054be:	4b3f      	ldr	r3, [pc, #252]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e06f      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ce:	4b3b      	ldr	r3, [pc, #236]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e067      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054de:	4b37      	ldr	r3, [pc, #220]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f023 0203 	bic.w	r2, r3, #3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4934      	ldr	r1, [pc, #208]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f0:	f7fc fd22 	bl	8001f38 <HAL_GetTick>
 80054f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f6:	e00a      	b.n	800550e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f8:	f7fc fd1e 	bl	8001f38 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	f241 3288 	movw	r2, #5000	; 0x1388
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e04f      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550e:	4b2b      	ldr	r3, [pc, #172]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 020c 	and.w	r2, r3, #12
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	429a      	cmp	r2, r3
 800551e:	d1eb      	bne.n	80054f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005520:	4b25      	ldr	r3, [pc, #148]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d20c      	bcs.n	8005548 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552e:	4b22      	ldr	r3, [pc, #136]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e032      	b.n	80055ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005554:	4b19      	ldr	r3, [pc, #100]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	4916      	ldr	r1, [pc, #88]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	4313      	orrs	r3, r2
 8005564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005572:	4b12      	ldr	r3, [pc, #72]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	490e      	ldr	r1, [pc, #56]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005586:	f000 f821 	bl	80055cc <HAL_RCC_GetSysClockFreq>
 800558a:	4602      	mov	r2, r0
 800558c:	4b0b      	ldr	r3, [pc, #44]	; (80055bc <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	091b      	lsrs	r3, r3, #4
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	490a      	ldr	r1, [pc, #40]	; (80055c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005598:	5ccb      	ldrb	r3, [r1, r3]
 800559a:	fa22 f303 	lsr.w	r3, r2, r3
 800559e:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <HAL_RCC_ClockConfig+0x1c4>)
 80055a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055a2:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <HAL_RCC_ClockConfig+0x1c8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fc fc82 	bl	8001eb0 <HAL_InitTick>

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40023c00 	.word	0x40023c00
 80055bc:	40023800 	.word	0x40023800
 80055c0:	080083d0 	.word	0x080083d0
 80055c4:	2000000c 	.word	0x2000000c
 80055c8:	20000010 	.word	0x20000010

080055cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055d0:	b090      	sub	sp, #64	; 0x40
 80055d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	637b      	str	r3, [r7, #52]	; 0x34
 80055d8:	2300      	movs	r3, #0
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055dc:	2300      	movs	r3, #0
 80055de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055e4:	4b59      	ldr	r3, [pc, #356]	; (800574c <HAL_RCC_GetSysClockFreq+0x180>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 030c 	and.w	r3, r3, #12
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d00d      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0x40>
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	f200 80a1 	bhi.w	8005738 <HAL_RCC_GetSysClockFreq+0x16c>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0x34>
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d003      	beq.n	8005606 <HAL_RCC_GetSysClockFreq+0x3a>
 80055fe:	e09b      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005600:	4b53      	ldr	r3, [pc, #332]	; (8005750 <HAL_RCC_GetSysClockFreq+0x184>)
 8005602:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005604:	e09b      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005606:	4b53      	ldr	r3, [pc, #332]	; (8005754 <HAL_RCC_GetSysClockFreq+0x188>)
 8005608:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800560a:	e098      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800560c:	4b4f      	ldr	r3, [pc, #316]	; (800574c <HAL_RCC_GetSysClockFreq+0x180>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005616:	4b4d      	ldr	r3, [pc, #308]	; (800574c <HAL_RCC_GetSysClockFreq+0x180>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d028      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005622:	4b4a      	ldr	r3, [pc, #296]	; (800574c <HAL_RCC_GetSysClockFreq+0x180>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	099b      	lsrs	r3, r3, #6
 8005628:	2200      	movs	r2, #0
 800562a:	623b      	str	r3, [r7, #32]
 800562c:	627a      	str	r2, [r7, #36]	; 0x24
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005634:	2100      	movs	r1, #0
 8005636:	4b47      	ldr	r3, [pc, #284]	; (8005754 <HAL_RCC_GetSysClockFreq+0x188>)
 8005638:	fb03 f201 	mul.w	r2, r3, r1
 800563c:	2300      	movs	r3, #0
 800563e:	fb00 f303 	mul.w	r3, r0, r3
 8005642:	4413      	add	r3, r2
 8005644:	4a43      	ldr	r2, [pc, #268]	; (8005754 <HAL_RCC_GetSysClockFreq+0x188>)
 8005646:	fba0 1202 	umull	r1, r2, r0, r2
 800564a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800564c:	460a      	mov	r2, r1
 800564e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005652:	4413      	add	r3, r2
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005658:	2200      	movs	r2, #0
 800565a:	61bb      	str	r3, [r7, #24]
 800565c:	61fa      	str	r2, [r7, #28]
 800565e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005662:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005666:	f7fa fe0b 	bl	8000280 <__aeabi_uldivmod>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4613      	mov	r3, r2
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005672:	e053      	b.n	800571c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005674:	4b35      	ldr	r3, [pc, #212]	; (800574c <HAL_RCC_GetSysClockFreq+0x180>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	099b      	lsrs	r3, r3, #6
 800567a:	2200      	movs	r2, #0
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	617a      	str	r2, [r7, #20]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005686:	f04f 0b00 	mov.w	fp, #0
 800568a:	4652      	mov	r2, sl
 800568c:	465b      	mov	r3, fp
 800568e:	f04f 0000 	mov.w	r0, #0
 8005692:	f04f 0100 	mov.w	r1, #0
 8005696:	0159      	lsls	r1, r3, #5
 8005698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800569c:	0150      	lsls	r0, r2, #5
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	ebb2 080a 	subs.w	r8, r2, sl
 80056a6:	eb63 090b 	sbc.w	r9, r3, fp
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	f04f 0300 	mov.w	r3, #0
 80056b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056be:	ebb2 0408 	subs.w	r4, r2, r8
 80056c2:	eb63 0509 	sbc.w	r5, r3, r9
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	00eb      	lsls	r3, r5, #3
 80056d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056d4:	00e2      	lsls	r2, r4, #3
 80056d6:	4614      	mov	r4, r2
 80056d8:	461d      	mov	r5, r3
 80056da:	eb14 030a 	adds.w	r3, r4, sl
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	eb45 030b 	adc.w	r3, r5, fp
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056f2:	4629      	mov	r1, r5
 80056f4:	028b      	lsls	r3, r1, #10
 80056f6:	4621      	mov	r1, r4
 80056f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056fc:	4621      	mov	r1, r4
 80056fe:	028a      	lsls	r2, r1, #10
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005706:	2200      	movs	r2, #0
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	60fa      	str	r2, [r7, #12]
 800570c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005710:	f7fa fdb6 	bl	8000280 <__aeabi_uldivmod>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4613      	mov	r3, r2
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_GetSysClockFreq+0x180>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	3301      	adds	r3, #1
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800572c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005736:	e002      	b.n	800573e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005738:	4b05      	ldr	r3, [pc, #20]	; (8005750 <HAL_RCC_GetSysClockFreq+0x184>)
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800573c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005740:	4618      	mov	r0, r3
 8005742:	3740      	adds	r7, #64	; 0x40
 8005744:	46bd      	mov	sp, r7
 8005746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
 8005750:	00f42400 	.word	0x00f42400
 8005754:	017d7840 	.word	0x017d7840

08005758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800575c:	4b03      	ldr	r3, [pc, #12]	; (800576c <HAL_RCC_GetHCLKFreq+0x14>)
 800575e:	681b      	ldr	r3, [r3, #0]
}
 8005760:	4618      	mov	r0, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	2000000c 	.word	0x2000000c

08005770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005774:	f7ff fff0 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 8005778:	4602      	mov	r2, r0
 800577a:	4b05      	ldr	r3, [pc, #20]	; (8005790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	0a9b      	lsrs	r3, r3, #10
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	4903      	ldr	r1, [pc, #12]	; (8005794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40023800 	.word	0x40023800
 8005794:	080083e0 	.word	0x080083e0

08005798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800579c:	f7ff ffdc 	bl	8005758 <HAL_RCC_GetHCLKFreq>
 80057a0:	4602      	mov	r2, r0
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	0b5b      	lsrs	r3, r3, #13
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	4903      	ldr	r1, [pc, #12]	; (80057bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ae:	5ccb      	ldrb	r3, [r1, r3]
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40023800 	.word	0x40023800
 80057bc:	080083e0 	.word	0x080083e0

080057c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e07b      	b.n	80058ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d108      	bne.n	80057ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e2:	d009      	beq.n	80057f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	61da      	str	r2, [r3, #28]
 80057ea:	e005      	b.n	80057f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fc f97e 	bl	8001b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800582e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587c:	ea42 0103 	orr.w	r1, r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	0c1b      	lsrs	r3, r3, #16
 8005896:	f003 0104 	and.w	r1, r3, #4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	f003 0210 	and.w	r2, r3, #16
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b088      	sub	sp, #32
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_SPI_Transmit+0x22>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e126      	b.n	8005b42 <HAL_SPI_Transmit+0x270>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058fc:	f7fc fb1c 	bl	8001f38 <HAL_GetTick>
 8005900:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b01      	cmp	r3, #1
 8005910:	d002      	beq.n	8005918 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005912:	2302      	movs	r3, #2
 8005914:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005916:	e10b      	b.n	8005b30 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_SPI_Transmit+0x52>
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005928:	e102      	b.n	8005b30 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2203      	movs	r2, #3
 800592e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	88fa      	ldrh	r2, [r7, #6]
 8005942:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	88fa      	ldrh	r2, [r7, #6]
 8005948:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005970:	d10f      	bne.n	8005992 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005980:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005990:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d007      	beq.n	80059b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059b8:	d14b      	bne.n	8005a52 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_SPI_Transmit+0xf6>
 80059c2:	8afb      	ldrh	r3, [r7, #22]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d13e      	bne.n	8005a46 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	881a      	ldrh	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	1c9a      	adds	r2, r3, #2
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059ec:	e02b      	b.n	8005a46 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d112      	bne.n	8005a22 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a00:	881a      	ldrh	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	1c9a      	adds	r2, r3, #2
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a20:	e011      	b.n	8005a46 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a22:	f7fc fa89 	bl	8001f38 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d803      	bhi.n	8005a3a <HAL_SPI_Transmit+0x168>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a38:	d102      	bne.n	8005a40 <HAL_SPI_Transmit+0x16e>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a44:	e074      	b.n	8005b30 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1ce      	bne.n	80059ee <HAL_SPI_Transmit+0x11c>
 8005a50:	e04c      	b.n	8005aec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_Transmit+0x18e>
 8005a5a:	8afb      	ldrh	r3, [r7, #22]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d140      	bne.n	8005ae2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	7812      	ldrb	r2, [r2, #0]
 8005a6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a86:	e02c      	b.n	8005ae2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d113      	bne.n	8005abe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	7812      	ldrb	r2, [r2, #0]
 8005aa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	86da      	strh	r2, [r3, #54]	; 0x36
 8005abc:	e011      	b.n	8005ae2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005abe:	f7fc fa3b 	bl	8001f38 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d803      	bhi.n	8005ad6 <HAL_SPI_Transmit+0x204>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d102      	bne.n	8005adc <HAL_SPI_Transmit+0x20a>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ae0:	e026      	b.n	8005b30 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1cd      	bne.n	8005a88 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 fce9 	bl	80064c8 <SPI_EndRxTxTransaction>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e000      	b.n	8005b30 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005b2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b40:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b088      	sub	sp, #32
 8005b4e:	af02      	add	r7, sp, #8
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	60b9      	str	r1, [r7, #8]
 8005b54:	603b      	str	r3, [r7, #0]
 8005b56:	4613      	mov	r3, r2
 8005b58:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b66:	d112      	bne.n	8005b8e <HAL_SPI_Receive+0x44>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10e      	bne.n	8005b8e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2204      	movs	r2, #4
 8005b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b78:	88fa      	ldrh	r2, [r7, #6]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f8f1 	bl	8005d6c <HAL_SPI_TransmitReceive>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	e0ea      	b.n	8005d64 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_SPI_Receive+0x52>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e0e3      	b.n	8005d64 <HAL_SPI_Receive+0x21a>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ba4:	f7fc f9c8 	bl	8001f38 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d002      	beq.n	8005bbc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bba:	e0ca      	b.n	8005d52 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_SPI_Receive+0x7e>
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bcc:	e0c1      	b.n	8005d52 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	88fa      	ldrh	r2, [r7, #6]
 8005be6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	88fa      	ldrh	r2, [r7, #6]
 8005bec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c14:	d10f      	bne.n	8005c36 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c40:	2b40      	cmp	r3, #64	; 0x40
 8005c42:	d007      	beq.n	8005c54 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d162      	bne.n	8005d22 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c5c:	e02e      	b.n	8005cbc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d115      	bne.n	8005c98 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f103 020c 	add.w	r2, r3, #12
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	7812      	ldrb	r2, [r2, #0]
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c96:	e011      	b.n	8005cbc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c98:	f7fc f94e 	bl	8001f38 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d803      	bhi.n	8005cb0 <HAL_SPI_Receive+0x166>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d102      	bne.n	8005cb6 <HAL_SPI_Receive+0x16c>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d102      	bne.n	8005cbc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005cba:	e04a      	b.n	8005d52 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1cb      	bne.n	8005c5e <HAL_SPI_Receive+0x114>
 8005cc6:	e031      	b.n	8005d2c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d113      	bne.n	8005cfe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	b292      	uxth	r2, r2
 8005ce2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	1c9a      	adds	r2, r3, #2
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cfc:	e011      	b.n	8005d22 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cfe:	f7fc f91b 	bl	8001f38 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d803      	bhi.n	8005d16 <HAL_SPI_Receive+0x1cc>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d102      	bne.n	8005d1c <HAL_SPI_Receive+0x1d2>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d20:	e017      	b.n	8005d52 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1cd      	bne.n	8005cc8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 fb63 	bl	80063fc <SPI_EndRxTransaction>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
 8005d4e:	e000      	b.n	8005d52 <HAL_SPI_Receive+0x208>
  }

error :
 8005d50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08c      	sub	sp, #48	; 0x30
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x26>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e18a      	b.n	80060a8 <HAL_SPI_TransmitReceive+0x33c>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d9a:	f7fc f8cd 	bl	8001f38 <HAL_GetTick>
 8005d9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005db0:	887b      	ldrh	r3, [r7, #2]
 8005db2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005db4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d00f      	beq.n	8005ddc <HAL_SPI_TransmitReceive+0x70>
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dc2:	d107      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d103      	bne.n	8005dd4 <HAL_SPI_TransmitReceive+0x68>
 8005dcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d003      	beq.n	8005ddc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005dda:	e15b      	b.n	8006094 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x82>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x82>
 8005de8:	887b      	ldrh	r3, [r7, #2]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005df4:	e14e      	b.n	8006094 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d003      	beq.n	8005e0a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2205      	movs	r2, #5
 8005e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	887a      	ldrh	r2, [r7, #2]
 8005e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	887a      	ldrh	r2, [r7, #2]
 8005e20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	887a      	ldrh	r2, [r7, #2]
 8005e2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	887a      	ldrh	r2, [r7, #2]
 8005e32:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d007      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e66:	d178      	bne.n	8005f5a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <HAL_SPI_TransmitReceive+0x10a>
 8005e70:	8b7b      	ldrh	r3, [r7, #26]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d166      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	881a      	ldrh	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	1c9a      	adds	r2, r3, #2
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e9a:	e053      	b.n	8005f44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d11b      	bne.n	8005ee2 <HAL_SPI_TransmitReceive+0x176>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d016      	beq.n	8005ee2 <HAL_SPI_TransmitReceive+0x176>
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d113      	bne.n	8005ee2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	881a      	ldrh	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	1c9a      	adds	r2, r3, #2
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d119      	bne.n	8005f24 <HAL_SPI_TransmitReceive+0x1b8>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d014      	beq.n	8005f24 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	b292      	uxth	r2, r2
 8005f06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	1c9a      	adds	r2, r3, #2
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f20:	2301      	movs	r3, #1
 8005f22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f24:	f7fc f808 	bl	8001f38 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d807      	bhi.n	8005f44 <HAL_SPI_TransmitReceive+0x1d8>
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d003      	beq.n	8005f44 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005f42:	e0a7      	b.n	8006094 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1a6      	bne.n	8005e9c <HAL_SPI_TransmitReceive+0x130>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1a1      	bne.n	8005e9c <HAL_SPI_TransmitReceive+0x130>
 8005f58:	e07c      	b.n	8006054 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_SPI_TransmitReceive+0x1fc>
 8005f62:	8b7b      	ldrh	r3, [r7, #26]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d16b      	bne.n	8006040 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	330c      	adds	r3, #12
 8005f72:	7812      	ldrb	r2, [r2, #0]
 8005f74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f8e:	e057      	b.n	8006040 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d11c      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x26c>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d017      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0x26c>
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d114      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	7812      	ldrb	r2, [r2, #0]
 8005fba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d119      	bne.n	800601a <HAL_SPI_TransmitReceive+0x2ae>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d014      	beq.n	800601a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006016:	2301      	movs	r3, #1
 8006018:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800601a:	f7fb ff8d 	bl	8001f38 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006026:	429a      	cmp	r2, r3
 8006028:	d803      	bhi.n	8006032 <HAL_SPI_TransmitReceive+0x2c6>
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d102      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x2cc>
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800603e:	e029      	b.n	8006094 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1a2      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x224>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d19d      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006056:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fa35 	bl	80064c8 <SPI_EndRxTxTransaction>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d006      	beq.n	8006072 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006070:	e010      	b.n	8006094 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10b      	bne.n	8006092 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800607a:	2300      	movs	r3, #0
 800607c:	617b      	str	r3, [r7, #20]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	e000      	b.n	8006094 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006092:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3730      	adds	r7, #48	; 0x30
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10e      	bne.n	80060f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d004      	beq.n	80060f0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4798      	blx	r3
    return;
 80060ee:	e0ce      	b.n	800628e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <HAL_SPI_IRQHandler+0x5e>
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006100:	2b00      	cmp	r3, #0
 8006102:	d004      	beq.n	800610e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
    return;
 800610c:	e0bf      	b.n	800628e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <HAL_SPI_IRQHandler+0x7e>
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d105      	bne.n	800612e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 80b0 	beq.w	800628e <HAL_SPI_IRQHandler+0x1de>
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f003 0320 	and.w	r3, r3, #32
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80aa 	beq.w	800628e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d023      	beq.n	800618c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b03      	cmp	r3, #3
 800614e:	d011      	beq.n	8006174 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006154:	f043 0204 	orr.w	r2, r3, #4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	e00b      	b.n	800618c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006174:	2300      	movs	r3, #0
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	693b      	ldr	r3, [r7, #16]
        return;
 800618a:	e080      	b.n	800628e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d014      	beq.n	80061c0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619a:	f043 0201 	orr.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00c      	beq.n	80061e4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	f043 0208 	orr.w	r2, r3, #8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	60bb      	str	r3, [r7, #8]
 80061e2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d04f      	beq.n	800628c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061fa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <HAL_SPI_IRQHandler+0x168>
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d034      	beq.n	8006282 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0203 	bic.w	r2, r2, #3
 8006226:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d011      	beq.n	8006254 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006234:	4a17      	ldr	r2, [pc, #92]	; (8006294 <HAL_SPI_IRQHandler+0x1e4>)
 8006236:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623c:	4618      	mov	r0, r3
 800623e:	f7fc f82c 	bl	800229a <HAL_DMA_Abort_IT>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006258:	2b00      	cmp	r3, #0
 800625a:	d016      	beq.n	800628a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006260:	4a0c      	ldr	r2, [pc, #48]	; (8006294 <HAL_SPI_IRQHandler+0x1e4>)
 8006262:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006268:	4618      	mov	r0, r3
 800626a:	f7fc f816 	bl	800229a <HAL_DMA_Abort_IT>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006278:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006280:	e003      	b.n	800628a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f808 	bl	8006298 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006288:	e000      	b.n	800628c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800628a:	bf00      	nop
    return;
 800628c:	bf00      	nop
  }
}
 800628e:	3720      	adds	r7, #32
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	080062c5 	.word	0x080062c5

08006298 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff ffda 	bl	8006298 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062e4:	bf00      	nop
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	603b      	str	r3, [r7, #0]
 80062f8:	4613      	mov	r3, r2
 80062fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062fc:	f7fb fe1c 	bl	8001f38 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	4413      	add	r3, r2
 800630a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800630c:	f7fb fe14 	bl	8001f38 <HAL_GetTick>
 8006310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006312:	4b39      	ldr	r3, [pc, #228]	; (80063f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	015b      	lsls	r3, r3, #5
 8006318:	0d1b      	lsrs	r3, r3, #20
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	fb02 f303 	mul.w	r3, r2, r3
 8006320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006322:	e054      	b.n	80063ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	d050      	beq.n	80063ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800632c:	f7fb fe04 	bl	8001f38 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	429a      	cmp	r2, r3
 800633a:	d902      	bls.n	8006342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d13d      	bne.n	80063be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800635a:	d111      	bne.n	8006380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006364:	d004      	beq.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636e:	d107      	bne.n	8006380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006388:	d10f      	bne.n	80063aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e017      	b.n	80063ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4013      	ands	r3, r2
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	429a      	cmp	r2, r3
 80063dc:	bf0c      	ite	eq
 80063de:	2301      	moveq	r3, #1
 80063e0:	2300      	movne	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d19b      	bne.n	8006324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	2000000c 	.word	0x2000000c

080063fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006410:	d111      	bne.n	8006436 <SPI_EndRxTransaction+0x3a>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800641a:	d004      	beq.n	8006426 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006424:	d107      	bne.n	8006436 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006434:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800643e:	d12a      	bne.n	8006496 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006448:	d012      	beq.n	8006470 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2200      	movs	r2, #0
 8006452:	2180      	movs	r1, #128	; 0x80
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7ff ff49 	bl	80062ec <SPI_WaitFlagStateUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d02d      	beq.n	80064bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006464:	f043 0220 	orr.w	r2, r3, #32
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e026      	b.n	80064be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	2101      	movs	r1, #1
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff ff36 	bl	80062ec <SPI_WaitFlagStateUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d01a      	beq.n	80064bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648a:	f043 0220 	orr.w	r2, r3, #32
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e013      	b.n	80064be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2200      	movs	r2, #0
 800649e:	2101      	movs	r1, #1
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f7ff ff23 	bl	80062ec <SPI_WaitFlagStateUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d007      	beq.n	80064bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	f043 0220 	orr.w	r2, r3, #32
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e000      	b.n	80064be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064d4:	4b1b      	ldr	r3, [pc, #108]	; (8006544 <SPI_EndRxTxTransaction+0x7c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <SPI_EndRxTxTransaction+0x80>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	0d5b      	lsrs	r3, r3, #21
 80064e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064e4:	fb02 f303 	mul.w	r3, r2, r3
 80064e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f2:	d112      	bne.n	800651a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2200      	movs	r2, #0
 80064fc:	2180      	movs	r1, #128	; 0x80
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f7ff fef4 	bl	80062ec <SPI_WaitFlagStateUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d016      	beq.n	8006538 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650e:	f043 0220 	orr.w	r2, r3, #32
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e00f      	b.n	800653a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	3b01      	subs	r3, #1
 8006524:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006530:	2b80      	cmp	r3, #128	; 0x80
 8006532:	d0f2      	beq.n	800651a <SPI_EndRxTxTransaction+0x52>
 8006534:	e000      	b.n	8006538 <SPI_EndRxTxTransaction+0x70>
        break;
 8006536:	bf00      	nop
  }

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	2000000c 	.word	0x2000000c
 8006548:	165e9f81 	.word	0x165e9f81

0800654c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e03f      	b.n	80065de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fb fb1e 	bl	8001bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2224      	movs	r2, #36	; 0x24
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800658e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 ff7f 	bl	8007494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	695a      	ldr	r2, [r3, #20]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b08a      	sub	sp, #40	; 0x28
 80065ea:	af02      	add	r7, sp, #8
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	4613      	mov	r3, r2
 80065f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b20      	cmp	r3, #32
 8006604:	d17c      	bne.n	8006700 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <HAL_UART_Transmit+0x2c>
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e075      	b.n	8006702 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_UART_Transmit+0x3e>
 8006620:	2302      	movs	r3, #2
 8006622:	e06e      	b.n	8006702 <HAL_UART_Transmit+0x11c>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2221      	movs	r2, #33	; 0x21
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800663a:	f7fb fc7d 	bl	8001f38 <HAL_GetTick>
 800663e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	88fa      	ldrh	r2, [r7, #6]
 8006644:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	88fa      	ldrh	r2, [r7, #6]
 800664a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006654:	d108      	bne.n	8006668 <HAL_UART_Transmit+0x82>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800665e:	2300      	movs	r3, #0
 8006660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	e003      	b.n	8006670 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006678:	e02a      	b.n	80066d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	2180      	movs	r1, #128	; 0x80
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fca7 	bl	8006fd8 <UART_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e036      	b.n	8006702 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10b      	bne.n	80066b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	3302      	adds	r3, #2
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	e007      	b.n	80066c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	781a      	ldrb	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	3301      	adds	r3, #1
 80066c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1cf      	bne.n	800667a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2140      	movs	r1, #64	; 0x40
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 fc77 	bl	8006fd8 <UART_WaitOnFlagUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e006      	b.n	8006702 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e000      	b.n	8006702 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006700:	2302      	movs	r3, #2
  }
}
 8006702:	4618      	mov	r0, r3
 8006704:	3720      	adds	r7, #32
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b08a      	sub	sp, #40	; 0x28
 800670e:	af02      	add	r7, sp, #8
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	603b      	str	r3, [r7, #0]
 8006716:	4613      	mov	r3, r2
 8006718:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b20      	cmp	r3, #32
 8006728:	f040 808c 	bne.w	8006844 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_UART_Receive+0x2e>
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e084      	b.n	8006846 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_UART_Receive+0x40>
 8006746:	2302      	movs	r3, #2
 8006748:	e07d      	b.n	8006846 <HAL_UART_Receive+0x13c>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2222      	movs	r2, #34	; 0x22
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006766:	f7fb fbe7 	bl	8001f38 <HAL_GetTick>
 800676a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	88fa      	ldrh	r2, [r7, #6]
 8006770:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	88fa      	ldrh	r2, [r7, #6]
 8006776:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006780:	d108      	bne.n	8006794 <HAL_UART_Receive+0x8a>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800678a:	2300      	movs	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	61bb      	str	r3, [r7, #24]
 8006792:	e003      	b.n	800679c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006798:	2300      	movs	r3, #0
 800679a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80067a4:	e043      	b.n	800682e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2200      	movs	r2, #0
 80067ae:	2120      	movs	r1, #32
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 fc11 	bl	8006fd8 <UART_WaitOnFlagUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e042      	b.n	8006846 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10c      	bne.n	80067e0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	3302      	adds	r3, #2
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	e01f      	b.n	8006820 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e8:	d007      	beq.n	80067fa <HAL_UART_Receive+0xf0>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <HAL_UART_Receive+0xfe>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e008      	b.n	800681a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006814:	b2da      	uxtb	r2, r3
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3301      	adds	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1b6      	bne.n	80067a6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	e000      	b.n	8006846 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006844:	2302      	movs	r3, #2
  }
}
 8006846:	4618      	mov	r0, r3
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	4613      	mov	r3, r2
 800685a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b20      	cmp	r3, #32
 8006866:	d11d      	bne.n	80068a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_UART_Receive_IT+0x26>
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e016      	b.n	80068a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_UART_Receive_IT+0x38>
 8006882:	2302      	movs	r3, #2
 8006884:	e00f      	b.n	80068a6 <HAL_UART_Receive_IT+0x58>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006894:	88fb      	ldrh	r3, [r7, #6]
 8006896:	461a      	mov	r2, r3
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 fc0a 	bl	80070b4 <UART_Start_Receive_IT>
 80068a0:	4603      	mov	r3, r0
 80068a2:	e000      	b.n	80068a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80068a4:	2302      	movs	r3, #2
  }
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b09a      	sub	sp, #104	; 0x68
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	330c      	adds	r3, #12
 80068be:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80068c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068ce:	667b      	str	r3, [r7, #100]	; 0x64
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	330c      	adds	r3, #12
 80068d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80068d8:	657a      	str	r2, [r7, #84]	; 0x54
 80068da:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e5      	bne.n	80068b8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	663b      	str	r3, [r7, #96]	; 0x60
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3314      	adds	r3, #20
 800690a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800690c:	643a      	str	r2, [r7, #64]	; 0x40
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e5      	bne.n	80068ec <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	2b01      	cmp	r3, #1
 8006926:	d119      	bne.n	800695c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	330c      	adds	r3, #12
 800692e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	61fb      	str	r3, [r7, #28]
   return(result);
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	f023 0310 	bic.w	r3, r3, #16
 800693e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800694e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006950:	e841 2300 	strex	r3, r2, [r1]
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1e5      	bne.n	8006928 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d13f      	bne.n	80069ea <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3314      	adds	r3, #20
 8006970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	60bb      	str	r3, [r7, #8]
   return(result);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006980:	65bb      	str	r3, [r7, #88]	; 0x58
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3314      	adds	r3, #20
 8006988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800698a:	61ba      	str	r2, [r7, #24]
 800698c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6979      	ldr	r1, [r7, #20]
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	613b      	str	r3, [r7, #16]
   return(result);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e5      	bne.n	800696a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d013      	beq.n	80069ce <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	4a19      	ldr	r2, [pc, #100]	; (8006a10 <HAL_UART_AbortReceive_IT+0x160>)
 80069ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fb fc71 	bl	800229a <HAL_DMA_Abort_IT>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d022      	beq.n	8006a04 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069c8:	4610      	mov	r0, r2
 80069ca:	4798      	blx	r3
 80069cc:	e01a      	b.n	8006a04 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fab8 	bl	8006f58 <HAL_UART_AbortReceiveCpltCallback>
 80069e8:	e00c      	b.n	8006a04 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 faaa 	bl	8006f58 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3768      	adds	r7, #104	; 0x68
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	0800721f 	.word	0x0800721f

08006a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b0ba      	sub	sp, #232	; 0xe8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10f      	bne.n	8006a7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <HAL_UART_IRQHandler+0x66>
 8006a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6a:	f003 0320 	and.w	r3, r3, #32
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fc53 	bl	800731e <UART_Receive_IT>
      return;
 8006a78:	e256      	b.n	8006f28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80de 	beq.w	8006c40 <HAL_UART_IRQHandler+0x22c>
 8006a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 80d1 	beq.w	8006c40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_UART_IRQHandler+0xae>
 8006aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	f043 0201 	orr.w	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00b      	beq.n	8006ae6 <HAL_UART_IRQHandler+0xd2>
 8006ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d005      	beq.n	8006ae6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	f043 0202 	orr.w	r2, r3, #2
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00b      	beq.n	8006b0a <HAL_UART_IRQHandler+0xf6>
 8006af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	f043 0204 	orr.w	r2, r3, #4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0e:	f003 0308 	and.w	r3, r3, #8
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d011      	beq.n	8006b3a <HAL_UART_IRQHandler+0x126>
 8006b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d105      	bne.n	8006b2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d005      	beq.n	8006b3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	f043 0208 	orr.w	r2, r3, #8
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 81ed 	beq.w	8006f1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <HAL_UART_IRQHandler+0x14e>
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fbde 	bl	800731e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6c:	2b40      	cmp	r3, #64	; 0x40
 8006b6e:	bf0c      	ite	eq
 8006b70:	2301      	moveq	r3, #1
 8006b72:	2300      	movne	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <HAL_UART_IRQHandler+0x17a>
 8006b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d04f      	beq.n	8006c2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 face 	bl	8007130 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b40      	cmp	r3, #64	; 0x40
 8006ba0:	d141      	bne.n	8006c26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3314      	adds	r3, #20
 8006ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bb0:	e853 3f00 	ldrex	r3, [r3]
 8006bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1d9      	bne.n	8006ba2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d013      	beq.n	8006c1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfa:	4a7d      	ldr	r2, [pc, #500]	; (8006df0 <HAL_UART_IRQHandler+0x3dc>)
 8006bfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fb fb49 	bl	800229a <HAL_DMA_Abort_IT>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	e00e      	b.n	8006c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f990 	bl	8006f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c24:	e00a      	b.n	8006c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f98c 	bl	8006f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2c:	e006      	b.n	8006c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f988 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c3a:	e170      	b.n	8006f1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3c:	bf00      	nop
    return;
 8006c3e:	e16e      	b.n	8006f1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	f040 814a 	bne.w	8006ede <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4e:	f003 0310 	and.w	r3, r3, #16
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 8143 	beq.w	8006ede <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5c:	f003 0310 	and.w	r3, r3, #16
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 813c 	beq.w	8006ede <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c66:	2300      	movs	r3, #0
 8006c68:	60bb      	str	r3, [r7, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c86:	2b40      	cmp	r3, #64	; 0x40
 8006c88:	f040 80b4 	bne.w	8006df4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 8140 	beq.w	8006f22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006caa:	429a      	cmp	r2, r3
 8006cac:	f080 8139 	bcs.w	8006f22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc2:	f000 8088 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006cf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1d9      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3314      	adds	r3, #20
 8006d18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d24:	f023 0301 	bic.w	r3, r3, #1
 8006d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3314      	adds	r3, #20
 8006d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e1      	bne.n	8006d12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3314      	adds	r3, #20
 8006d54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3314      	adds	r3, #20
 8006d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006d72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e3      	bne.n	8006d4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da6:	f023 0310 	bic.w	r3, r3, #16
 8006daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	330c      	adds	r3, #12
 8006db4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006db8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006dba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e3      	bne.n	8006d94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fb f9f2 	bl	80021ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f8c0 	bl	8006f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dec:	e099      	b.n	8006f22 <HAL_UART_IRQHandler+0x50e>
 8006dee:	bf00      	nop
 8006df0:	080071f7 	.word	0x080071f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 808b 	beq.w	8006f26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8086 	beq.w	8006f26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	330c      	adds	r3, #12
 8006e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8006e40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e3      	bne.n	8006e1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3314      	adds	r3, #20
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	623b      	str	r3, [r7, #32]
   return(result);
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	f023 0301 	bic.w	r3, r3, #1
 8006e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3314      	adds	r3, #20
 8006e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e76:	633a      	str	r2, [r7, #48]	; 0x30
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e3      	bne.n	8006e52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	330c      	adds	r3, #12
 8006e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	e853 3f00 	ldrex	r3, [r3]
 8006ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 0310 	bic.w	r3, r3, #16
 8006eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ebc:	61fa      	str	r2, [r7, #28]
 8006ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec0:	69b9      	ldr	r1, [r7, #24]
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	e841 2300 	strex	r3, r2, [r1]
 8006ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1e3      	bne.n	8006e98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f848 	bl	8006f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006edc:	e023      	b.n	8006f26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <HAL_UART_IRQHandler+0x4ea>
 8006eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f9a9 	bl	800724e <UART_Transmit_IT>
    return;
 8006efc:	e014      	b.n	8006f28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00e      	beq.n	8006f28 <HAL_UART_IRQHandler+0x514>
 8006f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d008      	beq.n	8006f28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f9e9 	bl	80072ee <UART_EndTransmit_IT>
    return;
 8006f1c:	e004      	b.n	8006f28 <HAL_UART_IRQHandler+0x514>
    return;
 8006f1e:	bf00      	nop
 8006f20:	e002      	b.n	8006f28 <HAL_UART_IRQHandler+0x514>
      return;
 8006f22:	bf00      	nop
 8006f24:	e000      	b.n	8006f28 <HAL_UART_IRQHandler+0x514>
      return;
 8006f26:	bf00      	nop
  }
}
 8006f28:	37e8      	adds	r7, #232	; 0xe8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop

08006f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	2300      	movs	r3, #0
 8006f92:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	b2db      	uxtb	r3, r3
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b090      	sub	sp, #64	; 0x40
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe8:	e050      	b.n	800708c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff0:	d04c      	beq.n	800708c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d007      	beq.n	8007008 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ff8:	f7fa ff9e 	bl	8001f38 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007004:	429a      	cmp	r2, r3
 8007006:	d241      	bcs.n	800708c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	330c      	adds	r3, #12
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	330c      	adds	r3, #12
 8007026:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007028:	637a      	str	r2, [r7, #52]	; 0x34
 800702a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800702e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e5      	bne.n	8007008 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3314      	adds	r3, #20
 8007042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	613b      	str	r3, [r7, #16]
   return(result);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f023 0301 	bic.w	r3, r3, #1
 8007052:	63bb      	str	r3, [r7, #56]	; 0x38
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3314      	adds	r3, #20
 800705a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800705c:	623a      	str	r2, [r7, #32]
 800705e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	69f9      	ldr	r1, [r7, #28]
 8007062:	6a3a      	ldr	r2, [r7, #32]
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	61bb      	str	r3, [r7, #24]
   return(result);
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e5      	bne.n	800703c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e00f      	b.n	80070ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	4013      	ands	r3, r2
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	429a      	cmp	r2, r3
 800709a:	bf0c      	ite	eq
 800709c:	2301      	moveq	r3, #1
 800709e:	2300      	movne	r3, #0
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d09f      	beq.n	8006fea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3740      	adds	r7, #64	; 0x40
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	88fa      	ldrh	r2, [r7, #6]
 80070cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	88fa      	ldrh	r2, [r7, #6]
 80070d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2222      	movs	r2, #34	; 0x22
 80070de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007100:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695a      	ldr	r2, [r3, #20]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0201 	orr.w	r2, r2, #1
 8007110:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f042 0220 	orr.w	r2, r2, #32
 8007120:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007130:	b480      	push	{r7}
 8007132:	b095      	sub	sp, #84	; 0x54
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	330c      	adds	r3, #12
 800713e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800714e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007158:	643a      	str	r2, [r7, #64]	; 0x40
 800715a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800715e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e5      	bne.n	8007138 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3314      	adds	r3, #20
 8007172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	61fb      	str	r3, [r7, #28]
   return(result);
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	64bb      	str	r3, [r7, #72]	; 0x48
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3314      	adds	r3, #20
 800718a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800718c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800718e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e5      	bne.n	800716c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d119      	bne.n	80071dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	330c      	adds	r3, #12
 80071ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f023 0310 	bic.w	r3, r3, #16
 80071be:	647b      	str	r3, [r7, #68]	; 0x44
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	330c      	adds	r3, #12
 80071c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071c8:	61ba      	str	r2, [r7, #24]
 80071ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6979      	ldr	r1, [r7, #20]
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	613b      	str	r3, [r7, #16]
   return(result);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e5      	bne.n	80071a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071ea:	bf00      	nop
 80071ec:	3754      	adds	r7, #84	; 0x54
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7ff fe97 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2220      	movs	r2, #32
 8007236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fe89 	bl	8006f58 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b21      	cmp	r3, #33	; 0x21
 8007260:	d13e      	bne.n	80072e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726a:	d114      	bne.n	8007296 <UART_Transmit_IT+0x48>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d110      	bne.n	8007296 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007288:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	1c9a      	adds	r2, r3, #2
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	621a      	str	r2, [r3, #32]
 8007294:	e008      	b.n	80072a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	1c59      	adds	r1, r3, #1
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6211      	str	r1, [r2, #32]
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4619      	mov	r1, r3
 80072b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10f      	bne.n	80072dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	e000      	b.n	80072e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007304:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fe0e 	bl	8006f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b08c      	sub	sp, #48	; 0x30
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b22      	cmp	r3, #34	; 0x22
 8007330:	f040 80ab 	bne.w	800748a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733c:	d117      	bne.n	800736e <UART_Receive_IT+0x50>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d113      	bne.n	800736e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	b29b      	uxth	r3, r3
 8007358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735c:	b29a      	uxth	r2, r3
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	1c9a      	adds	r2, r3, #2
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	629a      	str	r2, [r3, #40]	; 0x28
 800736c:	e026      	b.n	80073bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007374:	2300      	movs	r3, #0
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007380:	d007      	beq.n	8007392 <UART_Receive_IT+0x74>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <UART_Receive_IT+0x82>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	b2da      	uxtb	r2, r3
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e008      	b.n	80073b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	4619      	mov	r1, r3
 80073ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d15a      	bne.n	8007486 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0220 	bic.w	r2, r2, #32
 80073de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	695a      	ldr	r2, [r3, #20]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	2b01      	cmp	r3, #1
 800740e:	d135      	bne.n	800747c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	613b      	str	r3, [r7, #16]
   return(result);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f023 0310 	bic.w	r3, r3, #16
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	330c      	adds	r3, #12
 8007434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007436:	623a      	str	r2, [r7, #32]
 8007438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	69f9      	ldr	r1, [r7, #28]
 800743c:	6a3a      	ldr	r2, [r7, #32]
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	61bb      	str	r3, [r7, #24]
   return(result);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e5      	bne.n	8007416 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b10      	cmp	r3, #16
 8007456:	d10a      	bne.n	800746e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fd79 	bl	8006f6c <HAL_UARTEx_RxEventCallback>
 800747a:	e002      	b.n	8007482 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fa fa55 	bl	800192c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	e002      	b.n	800748c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	e000      	b.n	800748c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800748a:	2302      	movs	r3, #2
  }
}
 800748c:	4618      	mov	r0, r3
 800748e:	3730      	adds	r7, #48	; 0x30
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007498:	b0c0      	sub	sp, #256	; 0x100
 800749a:	af00      	add	r7, sp, #0
 800749c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b0:	68d9      	ldr	r1, [r3, #12]
 80074b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	ea40 0301 	orr.w	r3, r0, r1
 80074bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074ec:	f021 010c 	bic.w	r1, r1, #12
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074fa:	430b      	orrs	r3, r1
 80074fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800750a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750e:	6999      	ldr	r1, [r3, #24]
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	ea40 0301 	orr.w	r3, r0, r1
 800751a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b8f      	ldr	r3, [pc, #572]	; (8007760 <UART_SetConfig+0x2cc>)
 8007524:	429a      	cmp	r2, r3
 8007526:	d005      	beq.n	8007534 <UART_SetConfig+0xa0>
 8007528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b8d      	ldr	r3, [pc, #564]	; (8007764 <UART_SetConfig+0x2d0>)
 8007530:	429a      	cmp	r2, r3
 8007532:	d104      	bne.n	800753e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007534:	f7fe f930 	bl	8005798 <HAL_RCC_GetPCLK2Freq>
 8007538:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800753c:	e003      	b.n	8007546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800753e:	f7fe f917 	bl	8005770 <HAL_RCC_GetPCLK1Freq>
 8007542:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007550:	f040 810c 	bne.w	800776c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007558:	2200      	movs	r2, #0
 800755a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800755e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007566:	4622      	mov	r2, r4
 8007568:	462b      	mov	r3, r5
 800756a:	1891      	adds	r1, r2, r2
 800756c:	65b9      	str	r1, [r7, #88]	; 0x58
 800756e:	415b      	adcs	r3, r3
 8007570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007576:	4621      	mov	r1, r4
 8007578:	eb12 0801 	adds.w	r8, r2, r1
 800757c:	4629      	mov	r1, r5
 800757e:	eb43 0901 	adc.w	r9, r3, r1
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800758e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007596:	4690      	mov	r8, r2
 8007598:	4699      	mov	r9, r3
 800759a:	4623      	mov	r3, r4
 800759c:	eb18 0303 	adds.w	r3, r8, r3
 80075a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075a4:	462b      	mov	r3, r5
 80075a6:	eb49 0303 	adc.w	r3, r9, r3
 80075aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075c2:	460b      	mov	r3, r1
 80075c4:	18db      	adds	r3, r3, r3
 80075c6:	653b      	str	r3, [r7, #80]	; 0x50
 80075c8:	4613      	mov	r3, r2
 80075ca:	eb42 0303 	adc.w	r3, r2, r3
 80075ce:	657b      	str	r3, [r7, #84]	; 0x54
 80075d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80075d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80075d8:	f7f8 fe52 	bl	8000280 <__aeabi_uldivmod>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4b61      	ldr	r3, [pc, #388]	; (8007768 <UART_SetConfig+0x2d4>)
 80075e2:	fba3 2302 	umull	r2, r3, r3, r2
 80075e6:	095b      	lsrs	r3, r3, #5
 80075e8:	011c      	lsls	r4, r3, #4
 80075ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80075f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80075fc:	4642      	mov	r2, r8
 80075fe:	464b      	mov	r3, r9
 8007600:	1891      	adds	r1, r2, r2
 8007602:	64b9      	str	r1, [r7, #72]	; 0x48
 8007604:	415b      	adcs	r3, r3
 8007606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800760c:	4641      	mov	r1, r8
 800760e:	eb12 0a01 	adds.w	sl, r2, r1
 8007612:	4649      	mov	r1, r9
 8007614:	eb43 0b01 	adc.w	fp, r3, r1
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800762c:	4692      	mov	sl, r2
 800762e:	469b      	mov	fp, r3
 8007630:	4643      	mov	r3, r8
 8007632:	eb1a 0303 	adds.w	r3, sl, r3
 8007636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800763a:	464b      	mov	r3, r9
 800763c:	eb4b 0303 	adc.w	r3, fp, r3
 8007640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007650:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007658:	460b      	mov	r3, r1
 800765a:	18db      	adds	r3, r3, r3
 800765c:	643b      	str	r3, [r7, #64]	; 0x40
 800765e:	4613      	mov	r3, r2
 8007660:	eb42 0303 	adc.w	r3, r2, r3
 8007664:	647b      	str	r3, [r7, #68]	; 0x44
 8007666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800766a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800766e:	f7f8 fe07 	bl	8000280 <__aeabi_uldivmod>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	4611      	mov	r1, r2
 8007678:	4b3b      	ldr	r3, [pc, #236]	; (8007768 <UART_SetConfig+0x2d4>)
 800767a:	fba3 2301 	umull	r2, r3, r3, r1
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	2264      	movs	r2, #100	; 0x64
 8007682:	fb02 f303 	mul.w	r3, r2, r3
 8007686:	1acb      	subs	r3, r1, r3
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800768e:	4b36      	ldr	r3, [pc, #216]	; (8007768 <UART_SetConfig+0x2d4>)
 8007690:	fba3 2302 	umull	r2, r3, r3, r2
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800769c:	441c      	add	r4, r3
 800769e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076b0:	4642      	mov	r2, r8
 80076b2:	464b      	mov	r3, r9
 80076b4:	1891      	adds	r1, r2, r2
 80076b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80076b8:	415b      	adcs	r3, r3
 80076ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076c0:	4641      	mov	r1, r8
 80076c2:	1851      	adds	r1, r2, r1
 80076c4:	6339      	str	r1, [r7, #48]	; 0x30
 80076c6:	4649      	mov	r1, r9
 80076c8:	414b      	adcs	r3, r1
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	f04f 0300 	mov.w	r3, #0
 80076d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80076d8:	4659      	mov	r1, fp
 80076da:	00cb      	lsls	r3, r1, #3
 80076dc:	4651      	mov	r1, sl
 80076de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076e2:	4651      	mov	r1, sl
 80076e4:	00ca      	lsls	r2, r1, #3
 80076e6:	4610      	mov	r0, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	4642      	mov	r2, r8
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076f4:	464b      	mov	r3, r9
 80076f6:	460a      	mov	r2, r1
 80076f8:	eb42 0303 	adc.w	r3, r2, r3
 80076fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800770c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007714:	460b      	mov	r3, r1
 8007716:	18db      	adds	r3, r3, r3
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
 800771a:	4613      	mov	r3, r2
 800771c:	eb42 0303 	adc.w	r3, r2, r3
 8007720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800772a:	f7f8 fda9 	bl	8000280 <__aeabi_uldivmod>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <UART_SetConfig+0x2d4>)
 8007734:	fba3 1302 	umull	r1, r3, r3, r2
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	2164      	movs	r1, #100	; 0x64
 800773c:	fb01 f303 	mul.w	r3, r1, r3
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	3332      	adds	r3, #50	; 0x32
 8007746:	4a08      	ldr	r2, [pc, #32]	; (8007768 <UART_SetConfig+0x2d4>)
 8007748:	fba2 2303 	umull	r2, r3, r2, r3
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	f003 0207 	and.w	r2, r3, #7
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4422      	add	r2, r4
 800775a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800775c:	e106      	b.n	800796c <UART_SetConfig+0x4d8>
 800775e:	bf00      	nop
 8007760:	40011000 	.word	0x40011000
 8007764:	40011400 	.word	0x40011400
 8007768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800776c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007770:	2200      	movs	r2, #0
 8007772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007776:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800777a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800777e:	4642      	mov	r2, r8
 8007780:	464b      	mov	r3, r9
 8007782:	1891      	adds	r1, r2, r2
 8007784:	6239      	str	r1, [r7, #32]
 8007786:	415b      	adcs	r3, r3
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
 800778a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800778e:	4641      	mov	r1, r8
 8007790:	1854      	adds	r4, r2, r1
 8007792:	4649      	mov	r1, r9
 8007794:	eb43 0501 	adc.w	r5, r3, r1
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	00eb      	lsls	r3, r5, #3
 80077a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077a6:	00e2      	lsls	r2, r4, #3
 80077a8:	4614      	mov	r4, r2
 80077aa:	461d      	mov	r5, r3
 80077ac:	4643      	mov	r3, r8
 80077ae:	18e3      	adds	r3, r4, r3
 80077b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077b4:	464b      	mov	r3, r9
 80077b6:	eb45 0303 	adc.w	r3, r5, r3
 80077ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	f04f 0300 	mov.w	r3, #0
 80077d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077da:	4629      	mov	r1, r5
 80077dc:	008b      	lsls	r3, r1, #2
 80077de:	4621      	mov	r1, r4
 80077e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077e4:	4621      	mov	r1, r4
 80077e6:	008a      	lsls	r2, r1, #2
 80077e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077ec:	f7f8 fd48 	bl	8000280 <__aeabi_uldivmod>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4b60      	ldr	r3, [pc, #384]	; (8007978 <UART_SetConfig+0x4e4>)
 80077f6:	fba3 2302 	umull	r2, r3, r3, r2
 80077fa:	095b      	lsrs	r3, r3, #5
 80077fc:	011c      	lsls	r4, r3, #4
 80077fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007802:	2200      	movs	r2, #0
 8007804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800780c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007810:	4642      	mov	r2, r8
 8007812:	464b      	mov	r3, r9
 8007814:	1891      	adds	r1, r2, r2
 8007816:	61b9      	str	r1, [r7, #24]
 8007818:	415b      	adcs	r3, r3
 800781a:	61fb      	str	r3, [r7, #28]
 800781c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007820:	4641      	mov	r1, r8
 8007822:	1851      	adds	r1, r2, r1
 8007824:	6139      	str	r1, [r7, #16]
 8007826:	4649      	mov	r1, r9
 8007828:	414b      	adcs	r3, r1
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007838:	4659      	mov	r1, fp
 800783a:	00cb      	lsls	r3, r1, #3
 800783c:	4651      	mov	r1, sl
 800783e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007842:	4651      	mov	r1, sl
 8007844:	00ca      	lsls	r2, r1, #3
 8007846:	4610      	mov	r0, r2
 8007848:	4619      	mov	r1, r3
 800784a:	4603      	mov	r3, r0
 800784c:	4642      	mov	r2, r8
 800784e:	189b      	adds	r3, r3, r2
 8007850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007854:	464b      	mov	r3, r9
 8007856:	460a      	mov	r2, r1
 8007858:	eb42 0303 	adc.w	r3, r2, r3
 800785c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	67bb      	str	r3, [r7, #120]	; 0x78
 800786a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800786c:	f04f 0200 	mov.w	r2, #0
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007878:	4649      	mov	r1, r9
 800787a:	008b      	lsls	r3, r1, #2
 800787c:	4641      	mov	r1, r8
 800787e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007882:	4641      	mov	r1, r8
 8007884:	008a      	lsls	r2, r1, #2
 8007886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800788a:	f7f8 fcf9 	bl	8000280 <__aeabi_uldivmod>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4611      	mov	r1, r2
 8007894:	4b38      	ldr	r3, [pc, #224]	; (8007978 <UART_SetConfig+0x4e4>)
 8007896:	fba3 2301 	umull	r2, r3, r3, r1
 800789a:	095b      	lsrs	r3, r3, #5
 800789c:	2264      	movs	r2, #100	; 0x64
 800789e:	fb02 f303 	mul.w	r3, r2, r3
 80078a2:	1acb      	subs	r3, r1, r3
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	3332      	adds	r3, #50	; 0x32
 80078a8:	4a33      	ldr	r2, [pc, #204]	; (8007978 <UART_SetConfig+0x4e4>)
 80078aa:	fba2 2303 	umull	r2, r3, r2, r3
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078b4:	441c      	add	r4, r3
 80078b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078ba:	2200      	movs	r2, #0
 80078bc:	673b      	str	r3, [r7, #112]	; 0x70
 80078be:	677a      	str	r2, [r7, #116]	; 0x74
 80078c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80078c4:	4642      	mov	r2, r8
 80078c6:	464b      	mov	r3, r9
 80078c8:	1891      	adds	r1, r2, r2
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	415b      	adcs	r3, r3
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078d4:	4641      	mov	r1, r8
 80078d6:	1851      	adds	r1, r2, r1
 80078d8:	6039      	str	r1, [r7, #0]
 80078da:	4649      	mov	r1, r9
 80078dc:	414b      	adcs	r3, r1
 80078de:	607b      	str	r3, [r7, #4]
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078ec:	4659      	mov	r1, fp
 80078ee:	00cb      	lsls	r3, r1, #3
 80078f0:	4651      	mov	r1, sl
 80078f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078f6:	4651      	mov	r1, sl
 80078f8:	00ca      	lsls	r2, r1, #3
 80078fa:	4610      	mov	r0, r2
 80078fc:	4619      	mov	r1, r3
 80078fe:	4603      	mov	r3, r0
 8007900:	4642      	mov	r2, r8
 8007902:	189b      	adds	r3, r3, r2
 8007904:	66bb      	str	r3, [r7, #104]	; 0x68
 8007906:	464b      	mov	r3, r9
 8007908:	460a      	mov	r2, r1
 800790a:	eb42 0303 	adc.w	r3, r2, r3
 800790e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	663b      	str	r3, [r7, #96]	; 0x60
 800791a:	667a      	str	r2, [r7, #100]	; 0x64
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007928:	4649      	mov	r1, r9
 800792a:	008b      	lsls	r3, r1, #2
 800792c:	4641      	mov	r1, r8
 800792e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007932:	4641      	mov	r1, r8
 8007934:	008a      	lsls	r2, r1, #2
 8007936:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800793a:	f7f8 fca1 	bl	8000280 <__aeabi_uldivmod>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4b0d      	ldr	r3, [pc, #52]	; (8007978 <UART_SetConfig+0x4e4>)
 8007944:	fba3 1302 	umull	r1, r3, r3, r2
 8007948:	095b      	lsrs	r3, r3, #5
 800794a:	2164      	movs	r1, #100	; 0x64
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	3332      	adds	r3, #50	; 0x32
 8007956:	4a08      	ldr	r2, [pc, #32]	; (8007978 <UART_SetConfig+0x4e4>)
 8007958:	fba2 2303 	umull	r2, r3, r2, r3
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	f003 020f 	and.w	r2, r3, #15
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4422      	add	r2, r4
 800796a:	609a      	str	r2, [r3, #8]
}
 800796c:	bf00      	nop
 800796e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007972:	46bd      	mov	sp, r7
 8007974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007978:	51eb851f 	.word	0x51eb851f

0800797c <siprintf>:
 800797c:	b40e      	push	{r1, r2, r3}
 800797e:	b500      	push	{lr}
 8007980:	b09c      	sub	sp, #112	; 0x70
 8007982:	ab1d      	add	r3, sp, #116	; 0x74
 8007984:	9002      	str	r0, [sp, #8]
 8007986:	9006      	str	r0, [sp, #24]
 8007988:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800798c:	4809      	ldr	r0, [pc, #36]	; (80079b4 <siprintf+0x38>)
 800798e:	9107      	str	r1, [sp, #28]
 8007990:	9104      	str	r1, [sp, #16]
 8007992:	4909      	ldr	r1, [pc, #36]	; (80079b8 <siprintf+0x3c>)
 8007994:	f853 2b04 	ldr.w	r2, [r3], #4
 8007998:	9105      	str	r1, [sp, #20]
 800799a:	6800      	ldr	r0, [r0, #0]
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	a902      	add	r1, sp, #8
 80079a0:	f000 f992 	bl	8007cc8 <_svfiprintf_r>
 80079a4:	9b02      	ldr	r3, [sp, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	b01c      	add	sp, #112	; 0x70
 80079ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b0:	b003      	add	sp, #12
 80079b2:	4770      	bx	lr
 80079b4:	20000064 	.word	0x20000064
 80079b8:	ffff0208 	.word	0xffff0208

080079bc <memset>:
 80079bc:	4402      	add	r2, r0
 80079be:	4603      	mov	r3, r0
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d100      	bne.n	80079c6 <memset+0xa>
 80079c4:	4770      	bx	lr
 80079c6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ca:	e7f9      	b.n	80079c0 <memset+0x4>

080079cc <__errno>:
 80079cc:	4b01      	ldr	r3, [pc, #4]	; (80079d4 <__errno+0x8>)
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	20000064 	.word	0x20000064

080079d8 <__libc_init_array>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	4d0d      	ldr	r5, [pc, #52]	; (8007a10 <__libc_init_array+0x38>)
 80079dc:	4c0d      	ldr	r4, [pc, #52]	; (8007a14 <__libc_init_array+0x3c>)
 80079de:	1b64      	subs	r4, r4, r5
 80079e0:	10a4      	asrs	r4, r4, #2
 80079e2:	2600      	movs	r6, #0
 80079e4:	42a6      	cmp	r6, r4
 80079e6:	d109      	bne.n	80079fc <__libc_init_array+0x24>
 80079e8:	4d0b      	ldr	r5, [pc, #44]	; (8007a18 <__libc_init_array+0x40>)
 80079ea:	4c0c      	ldr	r4, [pc, #48]	; (8007a1c <__libc_init_array+0x44>)
 80079ec:	f000 fc6a 	bl	80082c4 <_init>
 80079f0:	1b64      	subs	r4, r4, r5
 80079f2:	10a4      	asrs	r4, r4, #2
 80079f4:	2600      	movs	r6, #0
 80079f6:	42a6      	cmp	r6, r4
 80079f8:	d105      	bne.n	8007a06 <__libc_init_array+0x2e>
 80079fa:	bd70      	pop	{r4, r5, r6, pc}
 80079fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a00:	4798      	blx	r3
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7ee      	b.n	80079e4 <__libc_init_array+0xc>
 8007a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0a:	4798      	blx	r3
 8007a0c:	3601      	adds	r6, #1
 8007a0e:	e7f2      	b.n	80079f6 <__libc_init_array+0x1e>
 8007a10:	08008424 	.word	0x08008424
 8007a14:	08008424 	.word	0x08008424
 8007a18:	08008424 	.word	0x08008424
 8007a1c:	08008428 	.word	0x08008428

08007a20 <__retarget_lock_acquire_recursive>:
 8007a20:	4770      	bx	lr

08007a22 <__retarget_lock_release_recursive>:
 8007a22:	4770      	bx	lr

08007a24 <_free_r>:
 8007a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a26:	2900      	cmp	r1, #0
 8007a28:	d044      	beq.n	8007ab4 <_free_r+0x90>
 8007a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a2e:	9001      	str	r0, [sp, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f1a1 0404 	sub.w	r4, r1, #4
 8007a36:	bfb8      	it	lt
 8007a38:	18e4      	addlt	r4, r4, r3
 8007a3a:	f000 f8df 	bl	8007bfc <__malloc_lock>
 8007a3e:	4a1e      	ldr	r2, [pc, #120]	; (8007ab8 <_free_r+0x94>)
 8007a40:	9801      	ldr	r0, [sp, #4]
 8007a42:	6813      	ldr	r3, [r2, #0]
 8007a44:	b933      	cbnz	r3, 8007a54 <_free_r+0x30>
 8007a46:	6063      	str	r3, [r4, #4]
 8007a48:	6014      	str	r4, [r2, #0]
 8007a4a:	b003      	add	sp, #12
 8007a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a50:	f000 b8da 	b.w	8007c08 <__malloc_unlock>
 8007a54:	42a3      	cmp	r3, r4
 8007a56:	d908      	bls.n	8007a6a <_free_r+0x46>
 8007a58:	6825      	ldr	r5, [r4, #0]
 8007a5a:	1961      	adds	r1, r4, r5
 8007a5c:	428b      	cmp	r3, r1
 8007a5e:	bf01      	itttt	eq
 8007a60:	6819      	ldreq	r1, [r3, #0]
 8007a62:	685b      	ldreq	r3, [r3, #4]
 8007a64:	1949      	addeq	r1, r1, r5
 8007a66:	6021      	streq	r1, [r4, #0]
 8007a68:	e7ed      	b.n	8007a46 <_free_r+0x22>
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	b10b      	cbz	r3, 8007a74 <_free_r+0x50>
 8007a70:	42a3      	cmp	r3, r4
 8007a72:	d9fa      	bls.n	8007a6a <_free_r+0x46>
 8007a74:	6811      	ldr	r1, [r2, #0]
 8007a76:	1855      	adds	r5, r2, r1
 8007a78:	42a5      	cmp	r5, r4
 8007a7a:	d10b      	bne.n	8007a94 <_free_r+0x70>
 8007a7c:	6824      	ldr	r4, [r4, #0]
 8007a7e:	4421      	add	r1, r4
 8007a80:	1854      	adds	r4, r2, r1
 8007a82:	42a3      	cmp	r3, r4
 8007a84:	6011      	str	r1, [r2, #0]
 8007a86:	d1e0      	bne.n	8007a4a <_free_r+0x26>
 8007a88:	681c      	ldr	r4, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	6053      	str	r3, [r2, #4]
 8007a8e:	440c      	add	r4, r1
 8007a90:	6014      	str	r4, [r2, #0]
 8007a92:	e7da      	b.n	8007a4a <_free_r+0x26>
 8007a94:	d902      	bls.n	8007a9c <_free_r+0x78>
 8007a96:	230c      	movs	r3, #12
 8007a98:	6003      	str	r3, [r0, #0]
 8007a9a:	e7d6      	b.n	8007a4a <_free_r+0x26>
 8007a9c:	6825      	ldr	r5, [r4, #0]
 8007a9e:	1961      	adds	r1, r4, r5
 8007aa0:	428b      	cmp	r3, r1
 8007aa2:	bf04      	itt	eq
 8007aa4:	6819      	ldreq	r1, [r3, #0]
 8007aa6:	685b      	ldreq	r3, [r3, #4]
 8007aa8:	6063      	str	r3, [r4, #4]
 8007aaa:	bf04      	itt	eq
 8007aac:	1949      	addeq	r1, r1, r5
 8007aae:	6021      	streq	r1, [r4, #0]
 8007ab0:	6054      	str	r4, [r2, #4]
 8007ab2:	e7ca      	b.n	8007a4a <_free_r+0x26>
 8007ab4:	b003      	add	sp, #12
 8007ab6:	bd30      	pop	{r4, r5, pc}
 8007ab8:	20000374 	.word	0x20000374

08007abc <sbrk_aligned>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	4e0e      	ldr	r6, [pc, #56]	; (8007af8 <sbrk_aligned+0x3c>)
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	6831      	ldr	r1, [r6, #0]
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	b911      	cbnz	r1, 8007ace <sbrk_aligned+0x12>
 8007ac8:	f000 fba6 	bl	8008218 <_sbrk_r>
 8007acc:	6030      	str	r0, [r6, #0]
 8007ace:	4621      	mov	r1, r4
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f000 fba1 	bl	8008218 <_sbrk_r>
 8007ad6:	1c43      	adds	r3, r0, #1
 8007ad8:	d00a      	beq.n	8007af0 <sbrk_aligned+0x34>
 8007ada:	1cc4      	adds	r4, r0, #3
 8007adc:	f024 0403 	bic.w	r4, r4, #3
 8007ae0:	42a0      	cmp	r0, r4
 8007ae2:	d007      	beq.n	8007af4 <sbrk_aligned+0x38>
 8007ae4:	1a21      	subs	r1, r4, r0
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f000 fb96 	bl	8008218 <_sbrk_r>
 8007aec:	3001      	adds	r0, #1
 8007aee:	d101      	bne.n	8007af4 <sbrk_aligned+0x38>
 8007af0:	f04f 34ff 	mov.w	r4, #4294967295
 8007af4:	4620      	mov	r0, r4
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	20000378 	.word	0x20000378

08007afc <_malloc_r>:
 8007afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b00:	1ccd      	adds	r5, r1, #3
 8007b02:	f025 0503 	bic.w	r5, r5, #3
 8007b06:	3508      	adds	r5, #8
 8007b08:	2d0c      	cmp	r5, #12
 8007b0a:	bf38      	it	cc
 8007b0c:	250c      	movcc	r5, #12
 8007b0e:	2d00      	cmp	r5, #0
 8007b10:	4607      	mov	r7, r0
 8007b12:	db01      	blt.n	8007b18 <_malloc_r+0x1c>
 8007b14:	42a9      	cmp	r1, r5
 8007b16:	d905      	bls.n	8007b24 <_malloc_r+0x28>
 8007b18:	230c      	movs	r3, #12
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	2600      	movs	r6, #0
 8007b1e:	4630      	mov	r0, r6
 8007b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007bf8 <_malloc_r+0xfc>
 8007b28:	f000 f868 	bl	8007bfc <__malloc_lock>
 8007b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b30:	461c      	mov	r4, r3
 8007b32:	bb5c      	cbnz	r4, 8007b8c <_malloc_r+0x90>
 8007b34:	4629      	mov	r1, r5
 8007b36:	4638      	mov	r0, r7
 8007b38:	f7ff ffc0 	bl	8007abc <sbrk_aligned>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	4604      	mov	r4, r0
 8007b40:	d155      	bne.n	8007bee <_malloc_r+0xf2>
 8007b42:	f8d8 4000 	ldr.w	r4, [r8]
 8007b46:	4626      	mov	r6, r4
 8007b48:	2e00      	cmp	r6, #0
 8007b4a:	d145      	bne.n	8007bd8 <_malloc_r+0xdc>
 8007b4c:	2c00      	cmp	r4, #0
 8007b4e:	d048      	beq.n	8007be2 <_malloc_r+0xe6>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	4631      	mov	r1, r6
 8007b54:	4638      	mov	r0, r7
 8007b56:	eb04 0903 	add.w	r9, r4, r3
 8007b5a:	f000 fb5d 	bl	8008218 <_sbrk_r>
 8007b5e:	4581      	cmp	r9, r0
 8007b60:	d13f      	bne.n	8007be2 <_malloc_r+0xe6>
 8007b62:	6821      	ldr	r1, [r4, #0]
 8007b64:	1a6d      	subs	r5, r5, r1
 8007b66:	4629      	mov	r1, r5
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7ff ffa7 	bl	8007abc <sbrk_aligned>
 8007b6e:	3001      	adds	r0, #1
 8007b70:	d037      	beq.n	8007be2 <_malloc_r+0xe6>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	442b      	add	r3, r5
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	f8d8 3000 	ldr.w	r3, [r8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d038      	beq.n	8007bf2 <_malloc_r+0xf6>
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	42a2      	cmp	r2, r4
 8007b84:	d12b      	bne.n	8007bde <_malloc_r+0xe2>
 8007b86:	2200      	movs	r2, #0
 8007b88:	605a      	str	r2, [r3, #4]
 8007b8a:	e00f      	b.n	8007bac <_malloc_r+0xb0>
 8007b8c:	6822      	ldr	r2, [r4, #0]
 8007b8e:	1b52      	subs	r2, r2, r5
 8007b90:	d41f      	bmi.n	8007bd2 <_malloc_r+0xd6>
 8007b92:	2a0b      	cmp	r2, #11
 8007b94:	d917      	bls.n	8007bc6 <_malloc_r+0xca>
 8007b96:	1961      	adds	r1, r4, r5
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	6025      	str	r5, [r4, #0]
 8007b9c:	bf18      	it	ne
 8007b9e:	6059      	strne	r1, [r3, #4]
 8007ba0:	6863      	ldr	r3, [r4, #4]
 8007ba2:	bf08      	it	eq
 8007ba4:	f8c8 1000 	streq.w	r1, [r8]
 8007ba8:	5162      	str	r2, [r4, r5]
 8007baa:	604b      	str	r3, [r1, #4]
 8007bac:	4638      	mov	r0, r7
 8007bae:	f104 060b 	add.w	r6, r4, #11
 8007bb2:	f000 f829 	bl	8007c08 <__malloc_unlock>
 8007bb6:	f026 0607 	bic.w	r6, r6, #7
 8007bba:	1d23      	adds	r3, r4, #4
 8007bbc:	1af2      	subs	r2, r6, r3
 8007bbe:	d0ae      	beq.n	8007b1e <_malloc_r+0x22>
 8007bc0:	1b9b      	subs	r3, r3, r6
 8007bc2:	50a3      	str	r3, [r4, r2]
 8007bc4:	e7ab      	b.n	8007b1e <_malloc_r+0x22>
 8007bc6:	42a3      	cmp	r3, r4
 8007bc8:	6862      	ldr	r2, [r4, #4]
 8007bca:	d1dd      	bne.n	8007b88 <_malloc_r+0x8c>
 8007bcc:	f8c8 2000 	str.w	r2, [r8]
 8007bd0:	e7ec      	b.n	8007bac <_malloc_r+0xb0>
 8007bd2:	4623      	mov	r3, r4
 8007bd4:	6864      	ldr	r4, [r4, #4]
 8007bd6:	e7ac      	b.n	8007b32 <_malloc_r+0x36>
 8007bd8:	4634      	mov	r4, r6
 8007bda:	6876      	ldr	r6, [r6, #4]
 8007bdc:	e7b4      	b.n	8007b48 <_malloc_r+0x4c>
 8007bde:	4613      	mov	r3, r2
 8007be0:	e7cc      	b.n	8007b7c <_malloc_r+0x80>
 8007be2:	230c      	movs	r3, #12
 8007be4:	603b      	str	r3, [r7, #0]
 8007be6:	4638      	mov	r0, r7
 8007be8:	f000 f80e 	bl	8007c08 <__malloc_unlock>
 8007bec:	e797      	b.n	8007b1e <_malloc_r+0x22>
 8007bee:	6025      	str	r5, [r4, #0]
 8007bf0:	e7dc      	b.n	8007bac <_malloc_r+0xb0>
 8007bf2:	605b      	str	r3, [r3, #4]
 8007bf4:	deff      	udf	#255	; 0xff
 8007bf6:	bf00      	nop
 8007bf8:	20000374 	.word	0x20000374

08007bfc <__malloc_lock>:
 8007bfc:	4801      	ldr	r0, [pc, #4]	; (8007c04 <__malloc_lock+0x8>)
 8007bfe:	f7ff bf0f 	b.w	8007a20 <__retarget_lock_acquire_recursive>
 8007c02:	bf00      	nop
 8007c04:	20000370 	.word	0x20000370

08007c08 <__malloc_unlock>:
 8007c08:	4801      	ldr	r0, [pc, #4]	; (8007c10 <__malloc_unlock+0x8>)
 8007c0a:	f7ff bf0a 	b.w	8007a22 <__retarget_lock_release_recursive>
 8007c0e:	bf00      	nop
 8007c10:	20000370 	.word	0x20000370

08007c14 <__ssputs_r>:
 8007c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c18:	688e      	ldr	r6, [r1, #8]
 8007c1a:	461f      	mov	r7, r3
 8007c1c:	42be      	cmp	r6, r7
 8007c1e:	680b      	ldr	r3, [r1, #0]
 8007c20:	4682      	mov	sl, r0
 8007c22:	460c      	mov	r4, r1
 8007c24:	4690      	mov	r8, r2
 8007c26:	d82c      	bhi.n	8007c82 <__ssputs_r+0x6e>
 8007c28:	898a      	ldrh	r2, [r1, #12]
 8007c2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c2e:	d026      	beq.n	8007c7e <__ssputs_r+0x6a>
 8007c30:	6965      	ldr	r5, [r4, #20]
 8007c32:	6909      	ldr	r1, [r1, #16]
 8007c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c38:	eba3 0901 	sub.w	r9, r3, r1
 8007c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c40:	1c7b      	adds	r3, r7, #1
 8007c42:	444b      	add	r3, r9
 8007c44:	106d      	asrs	r5, r5, #1
 8007c46:	429d      	cmp	r5, r3
 8007c48:	bf38      	it	cc
 8007c4a:	461d      	movcc	r5, r3
 8007c4c:	0553      	lsls	r3, r2, #21
 8007c4e:	d527      	bpl.n	8007ca0 <__ssputs_r+0x8c>
 8007c50:	4629      	mov	r1, r5
 8007c52:	f7ff ff53 	bl	8007afc <_malloc_r>
 8007c56:	4606      	mov	r6, r0
 8007c58:	b360      	cbz	r0, 8007cb4 <__ssputs_r+0xa0>
 8007c5a:	6921      	ldr	r1, [r4, #16]
 8007c5c:	464a      	mov	r2, r9
 8007c5e:	f000 faeb 	bl	8008238 <memcpy>
 8007c62:	89a3      	ldrh	r3, [r4, #12]
 8007c64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c6c:	81a3      	strh	r3, [r4, #12]
 8007c6e:	6126      	str	r6, [r4, #16]
 8007c70:	6165      	str	r5, [r4, #20]
 8007c72:	444e      	add	r6, r9
 8007c74:	eba5 0509 	sub.w	r5, r5, r9
 8007c78:	6026      	str	r6, [r4, #0]
 8007c7a:	60a5      	str	r5, [r4, #8]
 8007c7c:	463e      	mov	r6, r7
 8007c7e:	42be      	cmp	r6, r7
 8007c80:	d900      	bls.n	8007c84 <__ssputs_r+0x70>
 8007c82:	463e      	mov	r6, r7
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	4632      	mov	r2, r6
 8007c88:	4641      	mov	r1, r8
 8007c8a:	f000 faab 	bl	80081e4 <memmove>
 8007c8e:	68a3      	ldr	r3, [r4, #8]
 8007c90:	1b9b      	subs	r3, r3, r6
 8007c92:	60a3      	str	r3, [r4, #8]
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	4433      	add	r3, r6
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca0:	462a      	mov	r2, r5
 8007ca2:	f000 fad7 	bl	8008254 <_realloc_r>
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d1e0      	bne.n	8007c6e <__ssputs_r+0x5a>
 8007cac:	6921      	ldr	r1, [r4, #16]
 8007cae:	4650      	mov	r0, sl
 8007cb0:	f7ff feb8 	bl	8007a24 <_free_r>
 8007cb4:	230c      	movs	r3, #12
 8007cb6:	f8ca 3000 	str.w	r3, [sl]
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc6:	e7e9      	b.n	8007c9c <__ssputs_r+0x88>

08007cc8 <_svfiprintf_r>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	4698      	mov	r8, r3
 8007cce:	898b      	ldrh	r3, [r1, #12]
 8007cd0:	061b      	lsls	r3, r3, #24
 8007cd2:	b09d      	sub	sp, #116	; 0x74
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	460d      	mov	r5, r1
 8007cd8:	4614      	mov	r4, r2
 8007cda:	d50e      	bpl.n	8007cfa <_svfiprintf_r+0x32>
 8007cdc:	690b      	ldr	r3, [r1, #16]
 8007cde:	b963      	cbnz	r3, 8007cfa <_svfiprintf_r+0x32>
 8007ce0:	2140      	movs	r1, #64	; 0x40
 8007ce2:	f7ff ff0b 	bl	8007afc <_malloc_r>
 8007ce6:	6028      	str	r0, [r5, #0]
 8007ce8:	6128      	str	r0, [r5, #16]
 8007cea:	b920      	cbnz	r0, 8007cf6 <_svfiprintf_r+0x2e>
 8007cec:	230c      	movs	r3, #12
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf4:	e0d0      	b.n	8007e98 <_svfiprintf_r+0x1d0>
 8007cf6:	2340      	movs	r3, #64	; 0x40
 8007cf8:	616b      	str	r3, [r5, #20]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cfe:	2320      	movs	r3, #32
 8007d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d08:	2330      	movs	r3, #48	; 0x30
 8007d0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007eb0 <_svfiprintf_r+0x1e8>
 8007d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d12:	f04f 0901 	mov.w	r9, #1
 8007d16:	4623      	mov	r3, r4
 8007d18:	469a      	mov	sl, r3
 8007d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d1e:	b10a      	cbz	r2, 8007d24 <_svfiprintf_r+0x5c>
 8007d20:	2a25      	cmp	r2, #37	; 0x25
 8007d22:	d1f9      	bne.n	8007d18 <_svfiprintf_r+0x50>
 8007d24:	ebba 0b04 	subs.w	fp, sl, r4
 8007d28:	d00b      	beq.n	8007d42 <_svfiprintf_r+0x7a>
 8007d2a:	465b      	mov	r3, fp
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4638      	mov	r0, r7
 8007d32:	f7ff ff6f 	bl	8007c14 <__ssputs_r>
 8007d36:	3001      	adds	r0, #1
 8007d38:	f000 80a9 	beq.w	8007e8e <_svfiprintf_r+0x1c6>
 8007d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d3e:	445a      	add	r2, fp
 8007d40:	9209      	str	r2, [sp, #36]	; 0x24
 8007d42:	f89a 3000 	ldrb.w	r3, [sl]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 80a1 	beq.w	8007e8e <_svfiprintf_r+0x1c6>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d56:	f10a 0a01 	add.w	sl, sl, #1
 8007d5a:	9304      	str	r3, [sp, #16]
 8007d5c:	9307      	str	r3, [sp, #28]
 8007d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d62:	931a      	str	r3, [sp, #104]	; 0x68
 8007d64:	4654      	mov	r4, sl
 8007d66:	2205      	movs	r2, #5
 8007d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d6c:	4850      	ldr	r0, [pc, #320]	; (8007eb0 <_svfiprintf_r+0x1e8>)
 8007d6e:	f7f8 fa37 	bl	80001e0 <memchr>
 8007d72:	9a04      	ldr	r2, [sp, #16]
 8007d74:	b9d8      	cbnz	r0, 8007dae <_svfiprintf_r+0xe6>
 8007d76:	06d0      	lsls	r0, r2, #27
 8007d78:	bf44      	itt	mi
 8007d7a:	2320      	movmi	r3, #32
 8007d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d80:	0711      	lsls	r1, r2, #28
 8007d82:	bf44      	itt	mi
 8007d84:	232b      	movmi	r3, #43	; 0x2b
 8007d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d90:	d015      	beq.n	8007dbe <_svfiprintf_r+0xf6>
 8007d92:	9a07      	ldr	r2, [sp, #28]
 8007d94:	4654      	mov	r4, sl
 8007d96:	2000      	movs	r0, #0
 8007d98:	f04f 0c0a 	mov.w	ip, #10
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007da2:	3b30      	subs	r3, #48	; 0x30
 8007da4:	2b09      	cmp	r3, #9
 8007da6:	d94d      	bls.n	8007e44 <_svfiprintf_r+0x17c>
 8007da8:	b1b0      	cbz	r0, 8007dd8 <_svfiprintf_r+0x110>
 8007daa:	9207      	str	r2, [sp, #28]
 8007dac:	e014      	b.n	8007dd8 <_svfiprintf_r+0x110>
 8007dae:	eba0 0308 	sub.w	r3, r0, r8
 8007db2:	fa09 f303 	lsl.w	r3, r9, r3
 8007db6:	4313      	orrs	r3, r2
 8007db8:	9304      	str	r3, [sp, #16]
 8007dba:	46a2      	mov	sl, r4
 8007dbc:	e7d2      	b.n	8007d64 <_svfiprintf_r+0x9c>
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	1d19      	adds	r1, r3, #4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	9103      	str	r1, [sp, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	bfbb      	ittet	lt
 8007dca:	425b      	neglt	r3, r3
 8007dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007dd0:	9307      	strge	r3, [sp, #28]
 8007dd2:	9307      	strlt	r3, [sp, #28]
 8007dd4:	bfb8      	it	lt
 8007dd6:	9204      	strlt	r2, [sp, #16]
 8007dd8:	7823      	ldrb	r3, [r4, #0]
 8007dda:	2b2e      	cmp	r3, #46	; 0x2e
 8007ddc:	d10c      	bne.n	8007df8 <_svfiprintf_r+0x130>
 8007dde:	7863      	ldrb	r3, [r4, #1]
 8007de0:	2b2a      	cmp	r3, #42	; 0x2a
 8007de2:	d134      	bne.n	8007e4e <_svfiprintf_r+0x186>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1d1a      	adds	r2, r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	9203      	str	r2, [sp, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfb8      	it	lt
 8007df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007df4:	3402      	adds	r4, #2
 8007df6:	9305      	str	r3, [sp, #20]
 8007df8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007ec0 <_svfiprintf_r+0x1f8>
 8007dfc:	7821      	ldrb	r1, [r4, #0]
 8007dfe:	2203      	movs	r2, #3
 8007e00:	4650      	mov	r0, sl
 8007e02:	f7f8 f9ed 	bl	80001e0 <memchr>
 8007e06:	b138      	cbz	r0, 8007e18 <_svfiprintf_r+0x150>
 8007e08:	9b04      	ldr	r3, [sp, #16]
 8007e0a:	eba0 000a 	sub.w	r0, r0, sl
 8007e0e:	2240      	movs	r2, #64	; 0x40
 8007e10:	4082      	lsls	r2, r0
 8007e12:	4313      	orrs	r3, r2
 8007e14:	3401      	adds	r4, #1
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1c:	4825      	ldr	r0, [pc, #148]	; (8007eb4 <_svfiprintf_r+0x1ec>)
 8007e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e22:	2206      	movs	r2, #6
 8007e24:	f7f8 f9dc 	bl	80001e0 <memchr>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d038      	beq.n	8007e9e <_svfiprintf_r+0x1d6>
 8007e2c:	4b22      	ldr	r3, [pc, #136]	; (8007eb8 <_svfiprintf_r+0x1f0>)
 8007e2e:	bb1b      	cbnz	r3, 8007e78 <_svfiprintf_r+0x1b0>
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	3307      	adds	r3, #7
 8007e34:	f023 0307 	bic.w	r3, r3, #7
 8007e38:	3308      	adds	r3, #8
 8007e3a:	9303      	str	r3, [sp, #12]
 8007e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3e:	4433      	add	r3, r6
 8007e40:	9309      	str	r3, [sp, #36]	; 0x24
 8007e42:	e768      	b.n	8007d16 <_svfiprintf_r+0x4e>
 8007e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e48:	460c      	mov	r4, r1
 8007e4a:	2001      	movs	r0, #1
 8007e4c:	e7a6      	b.n	8007d9c <_svfiprintf_r+0xd4>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	3401      	adds	r4, #1
 8007e52:	9305      	str	r3, [sp, #20]
 8007e54:	4619      	mov	r1, r3
 8007e56:	f04f 0c0a 	mov.w	ip, #10
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e60:	3a30      	subs	r2, #48	; 0x30
 8007e62:	2a09      	cmp	r2, #9
 8007e64:	d903      	bls.n	8007e6e <_svfiprintf_r+0x1a6>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0c6      	beq.n	8007df8 <_svfiprintf_r+0x130>
 8007e6a:	9105      	str	r1, [sp, #20]
 8007e6c:	e7c4      	b.n	8007df8 <_svfiprintf_r+0x130>
 8007e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e72:	4604      	mov	r4, r0
 8007e74:	2301      	movs	r3, #1
 8007e76:	e7f0      	b.n	8007e5a <_svfiprintf_r+0x192>
 8007e78:	ab03      	add	r3, sp, #12
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	4b0f      	ldr	r3, [pc, #60]	; (8007ebc <_svfiprintf_r+0x1f4>)
 8007e80:	a904      	add	r1, sp, #16
 8007e82:	4638      	mov	r0, r7
 8007e84:	f3af 8000 	nop.w
 8007e88:	1c42      	adds	r2, r0, #1
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	d1d6      	bne.n	8007e3c <_svfiprintf_r+0x174>
 8007e8e:	89ab      	ldrh	r3, [r5, #12]
 8007e90:	065b      	lsls	r3, r3, #25
 8007e92:	f53f af2d 	bmi.w	8007cf0 <_svfiprintf_r+0x28>
 8007e96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e98:	b01d      	add	sp, #116	; 0x74
 8007e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9e:	ab03      	add	r3, sp, #12
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <_svfiprintf_r+0x1f4>)
 8007ea6:	a904      	add	r1, sp, #16
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f000 f879 	bl	8007fa0 <_printf_i>
 8007eae:	e7eb      	b.n	8007e88 <_svfiprintf_r+0x1c0>
 8007eb0:	080083e8 	.word	0x080083e8
 8007eb4:	080083f2 	.word	0x080083f2
 8007eb8:	00000000 	.word	0x00000000
 8007ebc:	08007c15 	.word	0x08007c15
 8007ec0:	080083ee 	.word	0x080083ee

08007ec4 <_printf_common>:
 8007ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec8:	4616      	mov	r6, r2
 8007eca:	4699      	mov	r9, r3
 8007ecc:	688a      	ldr	r2, [r1, #8]
 8007ece:	690b      	ldr	r3, [r1, #16]
 8007ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	bfb8      	it	lt
 8007ed8:	4613      	movlt	r3, r2
 8007eda:	6033      	str	r3, [r6, #0]
 8007edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ee0:	4607      	mov	r7, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	b10a      	cbz	r2, 8007eea <_printf_common+0x26>
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	6033      	str	r3, [r6, #0]
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	0699      	lsls	r1, r3, #26
 8007eee:	bf42      	ittt	mi
 8007ef0:	6833      	ldrmi	r3, [r6, #0]
 8007ef2:	3302      	addmi	r3, #2
 8007ef4:	6033      	strmi	r3, [r6, #0]
 8007ef6:	6825      	ldr	r5, [r4, #0]
 8007ef8:	f015 0506 	ands.w	r5, r5, #6
 8007efc:	d106      	bne.n	8007f0c <_printf_common+0x48>
 8007efe:	f104 0a19 	add.w	sl, r4, #25
 8007f02:	68e3      	ldr	r3, [r4, #12]
 8007f04:	6832      	ldr	r2, [r6, #0]
 8007f06:	1a9b      	subs	r3, r3, r2
 8007f08:	42ab      	cmp	r3, r5
 8007f0a:	dc26      	bgt.n	8007f5a <_printf_common+0x96>
 8007f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f10:	1e13      	subs	r3, r2, #0
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	bf18      	it	ne
 8007f16:	2301      	movne	r3, #1
 8007f18:	0692      	lsls	r2, r2, #26
 8007f1a:	d42b      	bmi.n	8007f74 <_printf_common+0xb0>
 8007f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f20:	4649      	mov	r1, r9
 8007f22:	4638      	mov	r0, r7
 8007f24:	47c0      	blx	r8
 8007f26:	3001      	adds	r0, #1
 8007f28:	d01e      	beq.n	8007f68 <_printf_common+0xa4>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	6922      	ldr	r2, [r4, #16]
 8007f2e:	f003 0306 	and.w	r3, r3, #6
 8007f32:	2b04      	cmp	r3, #4
 8007f34:	bf02      	ittt	eq
 8007f36:	68e5      	ldreq	r5, [r4, #12]
 8007f38:	6833      	ldreq	r3, [r6, #0]
 8007f3a:	1aed      	subeq	r5, r5, r3
 8007f3c:	68a3      	ldr	r3, [r4, #8]
 8007f3e:	bf0c      	ite	eq
 8007f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f44:	2500      	movne	r5, #0
 8007f46:	4293      	cmp	r3, r2
 8007f48:	bfc4      	itt	gt
 8007f4a:	1a9b      	subgt	r3, r3, r2
 8007f4c:	18ed      	addgt	r5, r5, r3
 8007f4e:	2600      	movs	r6, #0
 8007f50:	341a      	adds	r4, #26
 8007f52:	42b5      	cmp	r5, r6
 8007f54:	d11a      	bne.n	8007f8c <_printf_common+0xc8>
 8007f56:	2000      	movs	r0, #0
 8007f58:	e008      	b.n	8007f6c <_printf_common+0xa8>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	4652      	mov	r2, sl
 8007f5e:	4649      	mov	r1, r9
 8007f60:	4638      	mov	r0, r7
 8007f62:	47c0      	blx	r8
 8007f64:	3001      	adds	r0, #1
 8007f66:	d103      	bne.n	8007f70 <_printf_common+0xac>
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f70:	3501      	adds	r5, #1
 8007f72:	e7c6      	b.n	8007f02 <_printf_common+0x3e>
 8007f74:	18e1      	adds	r1, r4, r3
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	2030      	movs	r0, #48	; 0x30
 8007f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f7e:	4422      	add	r2, r4
 8007f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f88:	3302      	adds	r3, #2
 8007f8a:	e7c7      	b.n	8007f1c <_printf_common+0x58>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	4622      	mov	r2, r4
 8007f90:	4649      	mov	r1, r9
 8007f92:	4638      	mov	r0, r7
 8007f94:	47c0      	blx	r8
 8007f96:	3001      	adds	r0, #1
 8007f98:	d0e6      	beq.n	8007f68 <_printf_common+0xa4>
 8007f9a:	3601      	adds	r6, #1
 8007f9c:	e7d9      	b.n	8007f52 <_printf_common+0x8e>
	...

08007fa0 <_printf_i>:
 8007fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	7e0f      	ldrb	r7, [r1, #24]
 8007fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fa8:	2f78      	cmp	r7, #120	; 0x78
 8007faa:	4691      	mov	r9, r2
 8007fac:	4680      	mov	r8, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	469a      	mov	sl, r3
 8007fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fb6:	d807      	bhi.n	8007fc8 <_printf_i+0x28>
 8007fb8:	2f62      	cmp	r7, #98	; 0x62
 8007fba:	d80a      	bhi.n	8007fd2 <_printf_i+0x32>
 8007fbc:	2f00      	cmp	r7, #0
 8007fbe:	f000 80d4 	beq.w	800816a <_printf_i+0x1ca>
 8007fc2:	2f58      	cmp	r7, #88	; 0x58
 8007fc4:	f000 80c0 	beq.w	8008148 <_printf_i+0x1a8>
 8007fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fd0:	e03a      	b.n	8008048 <_printf_i+0xa8>
 8007fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fd6:	2b15      	cmp	r3, #21
 8007fd8:	d8f6      	bhi.n	8007fc8 <_printf_i+0x28>
 8007fda:	a101      	add	r1, pc, #4	; (adr r1, 8007fe0 <_printf_i+0x40>)
 8007fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fe0:	08008039 	.word	0x08008039
 8007fe4:	0800804d 	.word	0x0800804d
 8007fe8:	08007fc9 	.word	0x08007fc9
 8007fec:	08007fc9 	.word	0x08007fc9
 8007ff0:	08007fc9 	.word	0x08007fc9
 8007ff4:	08007fc9 	.word	0x08007fc9
 8007ff8:	0800804d 	.word	0x0800804d
 8007ffc:	08007fc9 	.word	0x08007fc9
 8008000:	08007fc9 	.word	0x08007fc9
 8008004:	08007fc9 	.word	0x08007fc9
 8008008:	08007fc9 	.word	0x08007fc9
 800800c:	08008151 	.word	0x08008151
 8008010:	08008079 	.word	0x08008079
 8008014:	0800810b 	.word	0x0800810b
 8008018:	08007fc9 	.word	0x08007fc9
 800801c:	08007fc9 	.word	0x08007fc9
 8008020:	08008173 	.word	0x08008173
 8008024:	08007fc9 	.word	0x08007fc9
 8008028:	08008079 	.word	0x08008079
 800802c:	08007fc9 	.word	0x08007fc9
 8008030:	08007fc9 	.word	0x08007fc9
 8008034:	08008113 	.word	0x08008113
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	1d1a      	adds	r2, r3, #4
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	602a      	str	r2, [r5, #0]
 8008040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008048:	2301      	movs	r3, #1
 800804a:	e09f      	b.n	800818c <_printf_i+0x1ec>
 800804c:	6820      	ldr	r0, [r4, #0]
 800804e:	682b      	ldr	r3, [r5, #0]
 8008050:	0607      	lsls	r7, r0, #24
 8008052:	f103 0104 	add.w	r1, r3, #4
 8008056:	6029      	str	r1, [r5, #0]
 8008058:	d501      	bpl.n	800805e <_printf_i+0xbe>
 800805a:	681e      	ldr	r6, [r3, #0]
 800805c:	e003      	b.n	8008066 <_printf_i+0xc6>
 800805e:	0646      	lsls	r6, r0, #25
 8008060:	d5fb      	bpl.n	800805a <_printf_i+0xba>
 8008062:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008066:	2e00      	cmp	r6, #0
 8008068:	da03      	bge.n	8008072 <_printf_i+0xd2>
 800806a:	232d      	movs	r3, #45	; 0x2d
 800806c:	4276      	negs	r6, r6
 800806e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008072:	485a      	ldr	r0, [pc, #360]	; (80081dc <_printf_i+0x23c>)
 8008074:	230a      	movs	r3, #10
 8008076:	e012      	b.n	800809e <_printf_i+0xfe>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	6820      	ldr	r0, [r4, #0]
 800807c:	1d19      	adds	r1, r3, #4
 800807e:	6029      	str	r1, [r5, #0]
 8008080:	0605      	lsls	r5, r0, #24
 8008082:	d501      	bpl.n	8008088 <_printf_i+0xe8>
 8008084:	681e      	ldr	r6, [r3, #0]
 8008086:	e002      	b.n	800808e <_printf_i+0xee>
 8008088:	0641      	lsls	r1, r0, #25
 800808a:	d5fb      	bpl.n	8008084 <_printf_i+0xe4>
 800808c:	881e      	ldrh	r6, [r3, #0]
 800808e:	4853      	ldr	r0, [pc, #332]	; (80081dc <_printf_i+0x23c>)
 8008090:	2f6f      	cmp	r7, #111	; 0x6f
 8008092:	bf0c      	ite	eq
 8008094:	2308      	moveq	r3, #8
 8008096:	230a      	movne	r3, #10
 8008098:	2100      	movs	r1, #0
 800809a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800809e:	6865      	ldr	r5, [r4, #4]
 80080a0:	60a5      	str	r5, [r4, #8]
 80080a2:	2d00      	cmp	r5, #0
 80080a4:	bfa2      	ittt	ge
 80080a6:	6821      	ldrge	r1, [r4, #0]
 80080a8:	f021 0104 	bicge.w	r1, r1, #4
 80080ac:	6021      	strge	r1, [r4, #0]
 80080ae:	b90e      	cbnz	r6, 80080b4 <_printf_i+0x114>
 80080b0:	2d00      	cmp	r5, #0
 80080b2:	d04b      	beq.n	800814c <_printf_i+0x1ac>
 80080b4:	4615      	mov	r5, r2
 80080b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80080ba:	fb03 6711 	mls	r7, r3, r1, r6
 80080be:	5dc7      	ldrb	r7, [r0, r7]
 80080c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080c4:	4637      	mov	r7, r6
 80080c6:	42bb      	cmp	r3, r7
 80080c8:	460e      	mov	r6, r1
 80080ca:	d9f4      	bls.n	80080b6 <_printf_i+0x116>
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d10b      	bne.n	80080e8 <_printf_i+0x148>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	07de      	lsls	r6, r3, #31
 80080d4:	d508      	bpl.n	80080e8 <_printf_i+0x148>
 80080d6:	6923      	ldr	r3, [r4, #16]
 80080d8:	6861      	ldr	r1, [r4, #4]
 80080da:	4299      	cmp	r1, r3
 80080dc:	bfde      	ittt	le
 80080de:	2330      	movle	r3, #48	; 0x30
 80080e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080e8:	1b52      	subs	r2, r2, r5
 80080ea:	6122      	str	r2, [r4, #16]
 80080ec:	f8cd a000 	str.w	sl, [sp]
 80080f0:	464b      	mov	r3, r9
 80080f2:	aa03      	add	r2, sp, #12
 80080f4:	4621      	mov	r1, r4
 80080f6:	4640      	mov	r0, r8
 80080f8:	f7ff fee4 	bl	8007ec4 <_printf_common>
 80080fc:	3001      	adds	r0, #1
 80080fe:	d14a      	bne.n	8008196 <_printf_i+0x1f6>
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	b004      	add	sp, #16
 8008106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	f043 0320 	orr.w	r3, r3, #32
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	4833      	ldr	r0, [pc, #204]	; (80081e0 <_printf_i+0x240>)
 8008114:	2778      	movs	r7, #120	; 0x78
 8008116:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	6829      	ldr	r1, [r5, #0]
 800811e:	061f      	lsls	r7, r3, #24
 8008120:	f851 6b04 	ldr.w	r6, [r1], #4
 8008124:	d402      	bmi.n	800812c <_printf_i+0x18c>
 8008126:	065f      	lsls	r7, r3, #25
 8008128:	bf48      	it	mi
 800812a:	b2b6      	uxthmi	r6, r6
 800812c:	07df      	lsls	r7, r3, #31
 800812e:	bf48      	it	mi
 8008130:	f043 0320 	orrmi.w	r3, r3, #32
 8008134:	6029      	str	r1, [r5, #0]
 8008136:	bf48      	it	mi
 8008138:	6023      	strmi	r3, [r4, #0]
 800813a:	b91e      	cbnz	r6, 8008144 <_printf_i+0x1a4>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	f023 0320 	bic.w	r3, r3, #32
 8008142:	6023      	str	r3, [r4, #0]
 8008144:	2310      	movs	r3, #16
 8008146:	e7a7      	b.n	8008098 <_printf_i+0xf8>
 8008148:	4824      	ldr	r0, [pc, #144]	; (80081dc <_printf_i+0x23c>)
 800814a:	e7e4      	b.n	8008116 <_printf_i+0x176>
 800814c:	4615      	mov	r5, r2
 800814e:	e7bd      	b.n	80080cc <_printf_i+0x12c>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	6826      	ldr	r6, [r4, #0]
 8008154:	6961      	ldr	r1, [r4, #20]
 8008156:	1d18      	adds	r0, r3, #4
 8008158:	6028      	str	r0, [r5, #0]
 800815a:	0635      	lsls	r5, r6, #24
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	d501      	bpl.n	8008164 <_printf_i+0x1c4>
 8008160:	6019      	str	r1, [r3, #0]
 8008162:	e002      	b.n	800816a <_printf_i+0x1ca>
 8008164:	0670      	lsls	r0, r6, #25
 8008166:	d5fb      	bpl.n	8008160 <_printf_i+0x1c0>
 8008168:	8019      	strh	r1, [r3, #0]
 800816a:	2300      	movs	r3, #0
 800816c:	6123      	str	r3, [r4, #16]
 800816e:	4615      	mov	r5, r2
 8008170:	e7bc      	b.n	80080ec <_printf_i+0x14c>
 8008172:	682b      	ldr	r3, [r5, #0]
 8008174:	1d1a      	adds	r2, r3, #4
 8008176:	602a      	str	r2, [r5, #0]
 8008178:	681d      	ldr	r5, [r3, #0]
 800817a:	6862      	ldr	r2, [r4, #4]
 800817c:	2100      	movs	r1, #0
 800817e:	4628      	mov	r0, r5
 8008180:	f7f8 f82e 	bl	80001e0 <memchr>
 8008184:	b108      	cbz	r0, 800818a <_printf_i+0x1ea>
 8008186:	1b40      	subs	r0, r0, r5
 8008188:	6060      	str	r0, [r4, #4]
 800818a:	6863      	ldr	r3, [r4, #4]
 800818c:	6123      	str	r3, [r4, #16]
 800818e:	2300      	movs	r3, #0
 8008190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008194:	e7aa      	b.n	80080ec <_printf_i+0x14c>
 8008196:	6923      	ldr	r3, [r4, #16]
 8008198:	462a      	mov	r2, r5
 800819a:	4649      	mov	r1, r9
 800819c:	4640      	mov	r0, r8
 800819e:	47d0      	blx	sl
 80081a0:	3001      	adds	r0, #1
 80081a2:	d0ad      	beq.n	8008100 <_printf_i+0x160>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	079b      	lsls	r3, r3, #30
 80081a8:	d413      	bmi.n	80081d2 <_printf_i+0x232>
 80081aa:	68e0      	ldr	r0, [r4, #12]
 80081ac:	9b03      	ldr	r3, [sp, #12]
 80081ae:	4298      	cmp	r0, r3
 80081b0:	bfb8      	it	lt
 80081b2:	4618      	movlt	r0, r3
 80081b4:	e7a6      	b.n	8008104 <_printf_i+0x164>
 80081b6:	2301      	movs	r3, #1
 80081b8:	4632      	mov	r2, r6
 80081ba:	4649      	mov	r1, r9
 80081bc:	4640      	mov	r0, r8
 80081be:	47d0      	blx	sl
 80081c0:	3001      	adds	r0, #1
 80081c2:	d09d      	beq.n	8008100 <_printf_i+0x160>
 80081c4:	3501      	adds	r5, #1
 80081c6:	68e3      	ldr	r3, [r4, #12]
 80081c8:	9903      	ldr	r1, [sp, #12]
 80081ca:	1a5b      	subs	r3, r3, r1
 80081cc:	42ab      	cmp	r3, r5
 80081ce:	dcf2      	bgt.n	80081b6 <_printf_i+0x216>
 80081d0:	e7eb      	b.n	80081aa <_printf_i+0x20a>
 80081d2:	2500      	movs	r5, #0
 80081d4:	f104 0619 	add.w	r6, r4, #25
 80081d8:	e7f5      	b.n	80081c6 <_printf_i+0x226>
 80081da:	bf00      	nop
 80081dc:	080083f9 	.word	0x080083f9
 80081e0:	0800840a 	.word	0x0800840a

080081e4 <memmove>:
 80081e4:	4288      	cmp	r0, r1
 80081e6:	b510      	push	{r4, lr}
 80081e8:	eb01 0402 	add.w	r4, r1, r2
 80081ec:	d902      	bls.n	80081f4 <memmove+0x10>
 80081ee:	4284      	cmp	r4, r0
 80081f0:	4623      	mov	r3, r4
 80081f2:	d807      	bhi.n	8008204 <memmove+0x20>
 80081f4:	1e43      	subs	r3, r0, #1
 80081f6:	42a1      	cmp	r1, r4
 80081f8:	d008      	beq.n	800820c <memmove+0x28>
 80081fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008202:	e7f8      	b.n	80081f6 <memmove+0x12>
 8008204:	4402      	add	r2, r0
 8008206:	4601      	mov	r1, r0
 8008208:	428a      	cmp	r2, r1
 800820a:	d100      	bne.n	800820e <memmove+0x2a>
 800820c:	bd10      	pop	{r4, pc}
 800820e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008216:	e7f7      	b.n	8008208 <memmove+0x24>

08008218 <_sbrk_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d06      	ldr	r5, [pc, #24]	; (8008234 <_sbrk_r+0x1c>)
 800821c:	2300      	movs	r3, #0
 800821e:	4604      	mov	r4, r0
 8008220:	4608      	mov	r0, r1
 8008222:	602b      	str	r3, [r5, #0]
 8008224:	f7f9 fdb0 	bl	8001d88 <_sbrk>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_sbrk_r+0x1a>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b103      	cbz	r3, 8008232 <_sbrk_r+0x1a>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	2000036c 	.word	0x2000036c

08008238 <memcpy>:
 8008238:	440a      	add	r2, r1
 800823a:	4291      	cmp	r1, r2
 800823c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008240:	d100      	bne.n	8008244 <memcpy+0xc>
 8008242:	4770      	bx	lr
 8008244:	b510      	push	{r4, lr}
 8008246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800824a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800824e:	4291      	cmp	r1, r2
 8008250:	d1f9      	bne.n	8008246 <memcpy+0xe>
 8008252:	bd10      	pop	{r4, pc}

08008254 <_realloc_r>:
 8008254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008258:	4680      	mov	r8, r0
 800825a:	4614      	mov	r4, r2
 800825c:	460e      	mov	r6, r1
 800825e:	b921      	cbnz	r1, 800826a <_realloc_r+0x16>
 8008260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008264:	4611      	mov	r1, r2
 8008266:	f7ff bc49 	b.w	8007afc <_malloc_r>
 800826a:	b92a      	cbnz	r2, 8008278 <_realloc_r+0x24>
 800826c:	f7ff fbda 	bl	8007a24 <_free_r>
 8008270:	4625      	mov	r5, r4
 8008272:	4628      	mov	r0, r5
 8008274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008278:	f000 f81b 	bl	80082b2 <_malloc_usable_size_r>
 800827c:	4284      	cmp	r4, r0
 800827e:	4607      	mov	r7, r0
 8008280:	d802      	bhi.n	8008288 <_realloc_r+0x34>
 8008282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008286:	d812      	bhi.n	80082ae <_realloc_r+0x5a>
 8008288:	4621      	mov	r1, r4
 800828a:	4640      	mov	r0, r8
 800828c:	f7ff fc36 	bl	8007afc <_malloc_r>
 8008290:	4605      	mov	r5, r0
 8008292:	2800      	cmp	r0, #0
 8008294:	d0ed      	beq.n	8008272 <_realloc_r+0x1e>
 8008296:	42bc      	cmp	r4, r7
 8008298:	4622      	mov	r2, r4
 800829a:	4631      	mov	r1, r6
 800829c:	bf28      	it	cs
 800829e:	463a      	movcs	r2, r7
 80082a0:	f7ff ffca 	bl	8008238 <memcpy>
 80082a4:	4631      	mov	r1, r6
 80082a6:	4640      	mov	r0, r8
 80082a8:	f7ff fbbc 	bl	8007a24 <_free_r>
 80082ac:	e7e1      	b.n	8008272 <_realloc_r+0x1e>
 80082ae:	4635      	mov	r5, r6
 80082b0:	e7df      	b.n	8008272 <_realloc_r+0x1e>

080082b2 <_malloc_usable_size_r>:
 80082b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082b6:	1f18      	subs	r0, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	bfbc      	itt	lt
 80082bc:	580b      	ldrlt	r3, [r1, r0]
 80082be:	18c0      	addlt	r0, r0, r3
 80082c0:	4770      	bx	lr
	...

080082c4 <_init>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	bf00      	nop
 80082c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ca:	bc08      	pop	{r3}
 80082cc:	469e      	mov	lr, r3
 80082ce:	4770      	bx	lr

080082d0 <_fini>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	bf00      	nop
 80082d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d6:	bc08      	pop	{r3}
 80082d8:	469e      	mov	lr, r3
 80082da:	4770      	bx	lr
